{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/newnext/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/newnext/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/newnext/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/newnext/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/newnext/source/images/beian.png","path":"images/beian.png","modified":0,"renderable":1},{"_id":"themes/newnext/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/newnext/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/newnext/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/newnext/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/newnext/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/newnext/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/newnext/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/newnext/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/newnext/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/newnext/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/newnext/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/newnext/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/newnext/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/newnext/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/newnext/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/newnext/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/newnext/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/newnext/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/newnext/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/newnext/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/newnext/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/newnext/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/newnext/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/newnext/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/newnext/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/newnext/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/newnext/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/newnext/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/newnext/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/newnext/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/newnext/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"source/img/1.jpg","path":"img/1.jpg","modified":0,"renderable":0},{"_id":"source/img/2.jpg","path":"img/2.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":499162500000},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":499162500000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":499162500000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":499162500000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":499162500000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":499162500000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":499162500000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":499162500000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":499162500000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":499162500000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":499162500000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":499162500000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":499162500000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":499162500000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":499162500000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":499162500000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":499162500000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":499162500000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":499162500000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":499162500000},{"_id":"public/2021/09/21/hello-world/index.html","hash":"991a5f91ea9a1fa0ae947e0827fe808ee992d6ca","modified":1632187436949},{"_id":"public/archives/index.html","hash":"494795b5083ddedb9cfbb45734004822aa464427","modified":1632188031868},{"_id":"public/index.html","hash":"94c654bcb3f12a71fa96c80ccb66fca586d2a846","modified":1632188031868},{"_id":"public/archives/2021/index.html","hash":"2afa1790ae8d944f76e428069e7039412bb48faa","modified":1632187436949},{"_id":"public/archives/2021/09/index.html","hash":"569177c878f25af40ef4eace3d6948ca4bc5d414","modified":1632187436949},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1632186590721},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1632186590721},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1632186590721},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1632186590721},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1632186590721},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1632186590721},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1632186590721},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1632186590721},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1632186590721},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1632186590721},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1632186590721},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1632186590721},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1632186590721},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1632186590721},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1632186590721},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1632186590721},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1632186590721},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1632186590721},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1632186590721},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1632186590721},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1632186590721},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1632186590721},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1632186590721},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1632186096121},{"_id":"themes/hexo-theme-next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1632186096121},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1632186096121},{"_id":"themes/hexo-theme-next/.gitignore","hash":"68d2f59b79fbc9edf358295ac38515c4b32126c1","modified":1632186096126},{"_id":"themes/hexo-theme-next/_vendors.yml","hash":"01f4946d18df12e9cdbcd3d34c95c6c68af86837","modified":1632186096127},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1632186096126},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1632186096126},{"_id":"themes/hexo-theme-next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":1632186096127},{"_id":"themes/hexo-theme-next/package.json","hash":"f41a8858849f4ac9384cb4469c5c00ad192e79d9","modified":1632186096146},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1632186096127},{"_id":"themes/hexo-theme-next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1632186096146},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1632186096122},{"_id":"themes/hexo-theme-next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1632186096122},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1632186096123},{"_id":"themes/hexo-theme-next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1632186096123},{"_id":"themes/hexo-theme-next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1632186096124},{"_id":"themes/hexo-theme-next/.githooks/install.js","hash":"4d77dbddf2eac1f3fc78f151d12ed22208ed655b","modified":1632186096122},{"_id":"themes/hexo-theme-next/_config.yml","hash":"ed34ac32ce8400e87a22bb123c0eb1bc6e7224cb","modified":1632186096127},{"_id":"themes/hexo-theme-next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1632186096124},{"_id":"themes/hexo-theme-next/.github/release-drafter.yml","hash":"dedc56fdcd58c58fe81728754abc531691106b0c","modified":1632186096124},{"_id":"themes/hexo-theme-next/.github/labeler.yml","hash":"5c4bc2bd561e6d9b33ee118cc12218c5de46f72d","modified":1632186096124},{"_id":"themes/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1632186096130},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1632186096122},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1632186096128},{"_id":"themes/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1632186096130},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1632186096130},{"_id":"themes/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1632186096128},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1632186096130},{"_id":"themes/hexo-theme-next/languages/es.yml","hash":"651e3b33d86a7cdb9fd7895ca28279f8b1a24faa","modified":1632186096131},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1632186096131},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1632186096131},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1632186096128},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1632186096131},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1632186096131},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1632186096132},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1632186096132},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"e9af1afe529ca747a04b801401d394b2ad696fde","modified":1632186096132},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1632186096130},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":1632186096132},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1632186096132},{"_id":"themes/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1632186096131},{"_id":"themes/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1632186096133},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1632186096133},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1632186096133},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1632186096133},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1632186096133},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1632186096133},{"_id":"themes/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1632186096132},{"_id":"themes/hexo-theme-next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":1632186096145},{"_id":"themes/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1632186096133},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1632186096123},{"_id":"themes/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1632186096145},{"_id":"themes/hexo-theme-next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1632186096177},{"_id":"themes/hexo-theme-next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":1632186096145},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1632186096123},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1632186096123},{"_id":"themes/hexo-theme-next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":1632186096145},{"_id":"themes/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1632186096144},{"_id":"themes/hexo-theme-next/layout/page.njk","hash":"9cd3eca2c468bb46c7c5bf391bea4b025af178f6","modified":1632186096145},{"_id":"themes/hexo-theme-next/.github/workflows/label-commenter.yml","hash":"44405477660289d4ed9beba1d054b15bb67bba06","modified":1632186096124},{"_id":"themes/hexo-theme-next/.github/workflows/linter.yml","hash":"276a91c7179926f410c784c99fa635dc0a016c2d","modified":1632186096125},{"_id":"themes/hexo-theme-next/.github/workflows/lock.yml","hash":"70bd0be3f33774e4b0ada3a59c901f8f9cff1013","modified":1632186096125},{"_id":"themes/hexo-theme-next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1632186096125},{"_id":"themes/hexo-theme-next/.github/workflows/labeler.yml","hash":"8b73c439dc796be141d521a4546bcfb7a5485534","modified":1632186096125},{"_id":"themes/hexo-theme-next/.github/workflows/stale.yml","hash":"0feb3e1afd1b2dca9dbc7811ce4cf5520e2d186c","modified":1632186096125},{"_id":"themes/hexo-theme-next/.github/workflows/tester.yml","hash":"22aaaa3eba1a7ebcf0f78417fd9a7113ee7b6c6c","modified":1632186096125},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/other.md","hash":"8cc5b5c116f6a052865a324512362f145d699202","modified":1632186096123},{"_id":"themes/hexo-theme-next/layout/_macro/post.njk","hash":"b106599106285ecd4c0c1e0ed11c46a36b5a69d5","modified":1632186096134},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":1632186096129},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1632186096134},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":1632186096128},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1632186096134},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1632186096129},{"_id":"themes/hexo-theme-next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":1632186096134},{"_id":"themes/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1632186096134},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1632186096129},{"_id":"themes/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1632186096136},{"_id":"themes/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1632186096142},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1632186096137},{"_id":"themes/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1632186096143},{"_id":"themes/hexo-theme-next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1632186096142},{"_id":"themes/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1632186096143},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1632186096143},{"_id":"themes/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1632186096149},{"_id":"themes/hexo-theme-next/scripts/filters/locals.js","hash":"0cd7da6755459d60779f0a7ccf311e26e184d55d","modified":1632186096149},{"_id":"themes/hexo-theme-next/scripts/events/index.js","hash":"1ce12eda88fa5df7e76ec7b78b8463fc6618410c","modified":1632186096146},{"_id":"themes/hexo-theme-next/scripts/filters/post.js","hash":"ab8bb12e4d55640b1ac4252514468ce37ebcb0b0","modified":1632186096149},{"_id":"themes/hexo-theme-next/scripts/filters/minify.js","hash":"0af64049db8188d5f8cc226b353e0d7909819feb","modified":1632186096149},{"_id":"themes/hexo-theme-next/scripts/helpers/engine.js","hash":"b9785bc737470e9b8e910e7da9e8c45c2ead58fa","modified":1632186096149},{"_id":"themes/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1632186096149},{"_id":"themes/hexo-theme-next/scripts/helpers/next-config.js","hash":"9a07f2d979fc8fe0c5e07d48304187b9b03ea7ff","modified":1632186096150},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1632186096150},{"_id":"themes/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1632186096150},{"_id":"themes/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1632186096150},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1632186096150},{"_id":"themes/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1632186096150},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":1632186096151},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1632186096151},{"_id":"themes/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1632186096151},{"_id":"themes/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1632186096151},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1632186096151},{"_id":"themes/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1632186096152},{"_id":"themes/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1632186096151},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1632186096152},{"_id":"themes/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1632186096152},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1632186096139},{"_id":"themes/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1632186096139},{"_id":"themes/hexo-theme-next/source/css/_mixins.styl","hash":"acef5acc728f24cb657be8d7010d836b4d556b0e","modified":1632186096163},{"_id":"themes/hexo-theme-next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":1632186096152},{"_id":"themes/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1632186096139},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1632186096167},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1632186096168},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1632186096168},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1632186096168},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1632186096169},{"_id":"themes/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1632186096169},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1632186096169},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1632186096169},{"_id":"themes/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1632186096170},{"_id":"themes/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1632186096170},{"_id":"themes/hexo-theme-next/source/js/pjax.js","hash":"0523cb1946907687c53999e2ce7cfe1831da6476","modified":1632186096170},{"_id":"themes/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1632186096170},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1632186096170},{"_id":"themes/hexo-theme-next/source/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1632186096171},{"_id":"themes/hexo-theme-next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1632186096176},{"_id":"themes/hexo-theme-next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1632186096176},{"_id":"themes/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1632186096168},{"_id":"themes/hexo-theme-next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1632186096177},{"_id":"themes/hexo-theme-next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1632186096177},{"_id":"themes/hexo-theme-next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1632186096177},{"_id":"themes/hexo-theme-next/test/tags/group-pictures.js","hash":"f41640e5d0f552c0b0c4ac8876a2edb0fcf54e56","modified":1632186096177},{"_id":"themes/hexo-theme-next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1632186096177},{"_id":"themes/hexo-theme-next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1632186096178},{"_id":"themes/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1632186096169},{"_id":"themes/hexo-theme-next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1632186096178},{"_id":"themes/hexo-theme-next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1632186096178},{"_id":"themes/hexo-theme-next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1632186096179},{"_id":"themes/hexo-theme-next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1632186096179},{"_id":"themes/hexo-theme-next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1632186096179},{"_id":"themes/hexo-theme-next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1632186096178},{"_id":"themes/hexo-theme-next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1632186096177},{"_id":"themes/hexo-theme-next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":1632186096135},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.njk","hash":"8ed5ab7ec63f9fd5438d1c497cc5f50ae11fcfdf","modified":1632186096135},{"_id":"themes/hexo-theme-next/layout/_partials/header/brand.njk","hash":"ffb6c69a9c90793cbe9bf0544b55f7a41c016d8f","modified":1632186096135},{"_id":"themes/hexo-theme-next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1632186096178},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"9167e429a459686c9fc140790124a46d677e6b15","modified":1632186096135},{"_id":"themes/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1632186096136},{"_id":"themes/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1632186096136},{"_id":"themes/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1632186096136},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":1632186096135},{"_id":"themes/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1632186096136},{"_id":"themes/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":1632186096136},{"_id":"themes/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1632186096136},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1632186096137},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1632186096137},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":1632186096135},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1632186096137},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1632186096138},{"_id":"themes/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1632186096138},{"_id":"themes/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1632186096138},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"7384e6390067ef2a84e7310d6adb3f6104ed62e2","modified":1632186096138},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"471dcbe22d0dbe043dcf25a1a1c17ca76aa9a548","modified":1632186096138},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1632186096140},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":1632186096140},{"_id":"themes/hexo-theme-next/source/js/utils.js","hash":"370d417d76a897f09c11a49d2c8c8b723921bd9a","modified":1632186096176},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1632186096140},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1632186096140},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1632186096141},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1632186096140},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1632186096140},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1632186096139},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1632186096141},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1632186096141},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1632186096141},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1632186096140},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1632186096141},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1632186096141},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1632186096142},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1632186096142},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1632186096142},{"_id":"themes/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"5c01e380ba843f8016d8fa4593432430f5bd3584","modified":1632186096139},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1632186096142},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1632186096143},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1632186096143},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1632186096144},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1632186096144},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1632186096144},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1632186096144},{"_id":"themes/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"aa05e6b3d613a756178b8ba06832ad27499d4c14","modified":1632186096147},{"_id":"themes/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1632186096147},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1632186096141},{"_id":"themes/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1632186096147},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1632186096148},{"_id":"themes/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1632186096148},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1632186096148},{"_id":"themes/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1632186096148},{"_id":"themes/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1632186096148},{"_id":"themes/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1632186096148},{"_id":"themes/hexo-theme-next/scripts/events/lib/config.js","hash":"b0ced2583fdd505da3ef27a9db9c55cc7b936732","modified":1632186096146},{"_id":"themes/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1632186096147},{"_id":"themes/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1632186096146},{"_id":"themes/hexo-theme-next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":1632186096147},{"_id":"themes/hexo-theme-next/scripts/events/lib/vendors.js","hash":"08dac57e15c9f06c7cf54884b045f2362595f9d2","modified":1632186096147},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1632186096167},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1632186096167},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1632186096167},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1632186096144},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":1632186096171},{"_id":"themes/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1632186096173},{"_id":"themes/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1632186096174},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1632186096144},{"_id":"themes/hexo-theme-next/source/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1632186096174},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1632186096153},{"_id":"themes/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"56d61a62529a6195c0c858cad4ec4597509dbd07","modified":1632186096155},{"_id":"themes/hexo-theme-next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1632186096153},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1632186096167},{"_id":"themes/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1632186096158},{"_id":"themes/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1632186096158},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1632186096160},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1632186096160},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1632186096161},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1632186096161},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1632186096161},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1632186096161},{"_id":"themes/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1632186096174},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1632186096164},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1632186096164},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"32a1b73944561655087d80f025208a84e012b3cf","modified":1632186096167},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":1632186096164},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":1632186096164},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"2e58cb90a77d3dd16e02b8949808b4b16453828c","modified":1632186096160},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1632186096165},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1632186096165},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1632186096165},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":1632186096165},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1632186096163},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1632186096165},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":1632186096166},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1632186096166},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1632186096166},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1632186096166},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1632186096164},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1632186096166},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1632186096171},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1632186096165},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1632186096165},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1632186096171},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1632186096171},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1632186096172},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1632186096172},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1632186096173},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1632186096173},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1632186096173},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1632186096173},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1632186096172},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1632186096172},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1632186096166},{"_id":"themes/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1632186096174},{"_id":"themes/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1632186096174},{"_id":"themes/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1632186096175},{"_id":"themes/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1632186096175},{"_id":"themes/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1632186096175},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1632186096176},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1632186096176},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1632186096153},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1632186096153},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1632186096153},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1632186096172},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1632186096153},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1632186096154},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1632186096172},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1632186096154},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1632186096153},{"_id":"themes/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1632186096175},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1632186096155},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"b1c99f34d65f994c89940bb7cdff4e36779ceb5d","modified":1632186096155},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":1632186096154},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1632186096154},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1632186096155},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1632186096156},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"b1bcc5f9357a9f8b8d6f8f285f073aaf3157f9db","modified":1632186096156},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1632186096156},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1632186096156},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"c8e95e8ac4cbdba01cb93e9e0569b45603e41bc6","modified":1632186096156},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1632186096154},{"_id":"themes/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"5a4e5ed613f3990378f3f632e8f16b33374e0095","modified":1632186096157},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1632186096156},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1632186096155},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"a1a93609efac88b312bad03539d60980df92527d","modified":1632186096157},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1632186096157},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"d6baf7e7102c76afd7ce066fa38a66ff2d27d6f5","modified":1632186096157},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1632186096155},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":1632186096157},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1632186096158},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1632186096158},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1632186096158},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1632186096158},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1632186096158},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1632186096159},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1632186096159},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"650ed4ad6df1b6ff04647e7b6d568304e4d3ed2e","modified":1632186096157},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1632186096159},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1632186096160},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1632186096160},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1632186096162},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1632186096162},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1632186096159},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1632186096161},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1632186096162},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1632186096162},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"0b3e2696eca39781c3524b2c5a2555ebc616e6e8","modified":1632186096161},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1632186096162},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1632186096162},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"a6ef2258a201b34a448cd010a698e0af0927f820","modified":1632186096163},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1632186096163},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"9b34143aec49e390e18f380026a45096f7477722","modified":1632186096163},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1632187231953},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1632187017836},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1632187017836},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1632187017836},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1632187017836},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1632187231953},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1632187017836},{"_id":"public/js/bookmark.js","hash":"c9acb262acf0cf127497b570fa9479fb32f34547","modified":1632187231953},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1632187017836},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1632187017836},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1632187017836},{"_id":"public/js/motion.js","hash":"9ac69597315b5b7b4c8900b7949d2a31387d6284","modified":1632187231953},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1632187231953},{"_id":"public/js/pjax.js","hash":"0523cb1946907687c53999e2ce7cfe1831da6476","modified":1632187017836},{"_id":"public/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1632187017836},{"_id":"public/js/utils.js","hash":"f772c2d64d0d3db69119495261d582c4bb481293","modified":1632187231953},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1632187017836},{"_id":"public/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1632187231953},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1632187017836},{"_id":"public/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1632187017836},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1632187017836},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1632187017836},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1632187017836},{"_id":"public/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1632187017836},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1632187017836},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1632187017836},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1632187017836},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1632187017836},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1632187017836},{"_id":"public/css/main.css","hash":"900f8248f4b414629d1a3cd4abc48117837d430a","modified":1632187231953},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1632187017836},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1632187017836},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1632187017836},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1632187017836},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1632187017836},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1632187017836},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1632187017836},{"_id":"public/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1632187017836},{"_id":"public/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1632187017836},{"_id":"public/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1632187017836},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1632187017836},{"_id":"public/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1632187017836},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1632187017836},{"_id":"themes/newnext/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632187144484},{"_id":"themes/newnext/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632187144485},{"_id":"themes/newnext/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1632187144444},{"_id":"themes/newnext/package.json","hash":"61aa2ac422e92ad435d1bfedea8d41824f5fe85e","modified":1632187144466},{"_id":"themes/newnext/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1632187144445},{"_id":"themes/newnext/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1632187144445},{"_id":"themes/newnext/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1632187144450},{"_id":"themes/newnext/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1632187144446},{"_id":"themes/newnext/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1632187144446},{"_id":"themes/newnext/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1632187144447},{"_id":"themes/newnext/docs/DATA-FILES.md","hash":"d0d46cb265f0efceffce82214cd36d8b82ddce13","modified":1632187144446},{"_id":"themes/newnext/_config.yml","hash":"398e6ac5f3440015a7eca5f5d13d5de6a0d273fc","modified":1632187144445},{"_id":"themes/newnext/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1632187144445},{"_id":"themes/newnext/docs/UPDATE-FROM-5.1.X.md","hash":"199e9ef3cb5928af0fe801d03d2d1aeea704cea4","modified":1632187144447},{"_id":"themes/newnext/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1632187144446},{"_id":"themes/newnext/languages/en.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1632187144451},{"_id":"themes/newnext/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1632187144450},{"_id":"themes/newnext/languages/fa.yml","hash":"35468531ad0236df5b188f28bd1b4bb0c0537faf","modified":1632187144451},{"_id":"themes/newnext/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1632187144447},{"_id":"themes/newnext/languages/fr.yml","hash":"5fe560d14824c71ea90b2a76d0c17b2332b9d08a","modified":1632187144451},{"_id":"themes/newnext/languages/hu.yml","hash":"dd9e4cd2873ed9a9ae7cb89962eeff911de396b4","modified":1632187144451},{"_id":"themes/newnext/languages/id.yml","hash":"80c3db4c2dbbea0703f6c8f1191218f692899507","modified":1632187144452},{"_id":"themes/newnext/languages/de.yml","hash":"285b294b1dd2ce49b0694beb4fd75ed05dc20ccb","modified":1632187144450},{"_id":"themes/newnext/languages/it.yml","hash":"68ac5a0aa361210f51915e101c842ed1c9464889","modified":1632187144452},{"_id":"themes/newnext/languages/ja.yml","hash":"e61529ddf80426a5362ed07642216027615bd740","modified":1632187144452},{"_id":"themes/newnext/languages/ko.yml","hash":"14a162509dc71bb364335c20281d3bccbd2a51f3","modified":1632187144452},{"_id":"themes/newnext/languages/nl.yml","hash":"4d9b09aff03648cbbbfeb0c51a2d1214320b5ec6","modified":1632187144452},{"_id":"themes/newnext/languages/pt-BR.yml","hash":"024dcdeb30c93e57cd1ba4cd707f8988dcad2468","modified":1632187144452},{"_id":"themes/newnext/languages/pt.yml","hash":"88fb58e537a949c013a2adcdaebcbe09543c0bd2","modified":1632187144452},{"_id":"themes/newnext/languages/tr.yml","hash":"e08d8d6ee9507a7c7d4450bc1c76b435470a3739","modified":1632187144453},{"_id":"themes/newnext/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1632187144447},{"_id":"themes/newnext/languages/es.yml","hash":"3bd0977225a9b9dc3cdc856161b3a77e5993ac4a","modified":1632187144451},{"_id":"themes/newnext/languages/uk.yml","hash":"e58393cf726401bf50a772392e23507d9e11049e","modified":1632187144453},{"_id":"themes/newnext/languages/vi.yml","hash":"0c0890ccffcb5cca0893de63ebad66e3ce740707","modified":1632187144453},{"_id":"themes/newnext/languages/zh-CN.yml","hash":"4b36a51556e87d236c6ac6ee6975de1beb95724c","modified":1632187144453},{"_id":"themes/newnext/languages/zh-HK.yml","hash":"6d83daf9df1811e3ae6cde5ad778c888d8027b13","modified":1632187144453},{"_id":"themes/newnext/languages/zh-TW.yml","hash":"5e395cb492a0b6284f8d2ffdd93f7380db31486f","modified":1632187144454},{"_id":"themes/newnext/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1632187144465},{"_id":"themes/newnext/layout/_layout.swig","hash":"512bdf6787b5d9fb1d40b126b0fa8e6f1018d1cd","modified":1632187144454},{"_id":"themes/newnext/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1632187144466},{"_id":"themes/newnext/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1632187144466},{"_id":"themes/newnext/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1632187144466},{"_id":"themes/newnext/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1632187144470},{"_id":"themes/newnext/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1632187144466},{"_id":"themes/newnext/docs/ru/DATA-FILES.md","hash":"2665f6a9d72090f9452a8811544ff2596e8899be","modified":1632187144447},{"_id":"themes/newnext/languages/ru.yml","hash":"f7d5efd6289845f2375bbee8fe883813de745767","modified":1632187144453},{"_id":"themes/newnext/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1632187144466},{"_id":"themes/newnext/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"ebacdc94f6f9724a7c6ef7c3cdde41ff7c37931a","modified":1632187144448},{"_id":"themes/newnext/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1632187144448},{"_id":"themes/newnext/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1632187144447},{"_id":"themes/newnext/docs/zh-CN/DATA-FILES.md","hash":"3b4dbf0d2ca12ab442b7e0e227769ce100b8a444","modified":1632187144449},{"_id":"themes/newnext/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1632187144449},{"_id":"themes/newnext/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1632187144448},{"_id":"themes/newnext/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1632187144448},{"_id":"themes/newnext/docs/zh-CN/CONTRIBUTING.md","hash":"bc159df1260e0c912c509090d54dd20a08201100","modified":1632187144448},{"_id":"themes/newnext/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1632187144450},{"_id":"themes/newnext/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"8109a531d3a7f5a306e36d4304c11f0c7c180c87","modified":1632187144450},{"_id":"themes/newnext/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1632187144454},{"_id":"themes/newnext/layout/_partials/comments.swig","hash":"3a72e3d72980fa0944008b36b284b044d0e84b2a","modified":1632187144455},{"_id":"themes/newnext/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1632187144454},{"_id":"themes/newnext/docs/zh-CN/MATH.md","hash":"2d60a18340c9260cd4dc81fe8acc7983d6b2d011","modified":1632187144449},{"_id":"themes/newnext/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"264d131b8865bae069f8e4d78a33a0f59d28e36b","modified":1632187144449},{"_id":"themes/newnext/layout/_partials/footer.swig","hash":"dc91d58ef6ac30da5d6fe3174132ef9537f2a0a1","modified":1632187413670},{"_id":"themes/newnext/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1632187144457},{"_id":"themes/newnext/layout/_scripts/pjax.swig","hash":"9675acc599ffa546f05a60375c1637b0327be4fd","modified":1632187144459},{"_id":"themes/newnext/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1632187144458},{"_id":"themes/newnext/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1632187144459},{"_id":"themes/newnext/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1632187144460},{"_id":"themes/newnext/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1632187144460},{"_id":"themes/newnext/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1632187144461},{"_id":"themes/newnext/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1632187144463},{"_id":"themes/newnext/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1632187144464},{"_id":"themes/newnext/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1632187144469},{"_id":"themes/newnext/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1632187144467},{"_id":"themes/newnext/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1632187144469},{"_id":"themes/newnext/scripts/filters/locals.js","hash":"ffa0e122c1cdf9c86ddca104ddb2dfbaccaa1bb5","modified":1632187144469},{"_id":"themes/newnext/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1632187144469},{"_id":"themes/newnext/scripts/helpers/engine.js","hash":"c8c8afde59df587f883dd9b47a3c629042bc4c6e","modified":1632187144470},{"_id":"themes/newnext/scripts/filters/post.js","hash":"ec740559866c0a6697e6cd6fc364b2231aa36575","modified":1632187144470},{"_id":"themes/newnext/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1632187144470},{"_id":"themes/newnext/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1632187144471},{"_id":"themes/newnext/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1632187144470},{"_id":"themes/newnext/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1632187144470},{"_id":"themes/newnext/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1632187144471},{"_id":"themes/newnext/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1632187144471},{"_id":"themes/newnext/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1632187144471},{"_id":"themes/newnext/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1632187144471},{"_id":"themes/newnext/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1632187144472},{"_id":"themes/newnext/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1632187144472},{"_id":"themes/newnext/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1632187144472},{"_id":"themes/newnext/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1632187144472},{"_id":"themes/newnext/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1632187144489},{"_id":"themes/newnext/layout/_macro/post.swig","hash":"d80862f005ccbb1d583e40b6e0e6226cced1b925","modified":1632187144454},{"_id":"themes/newnext/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1632187144489},{"_id":"themes/newnext/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1632187144489},{"_id":"themes/newnext/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1632187144462},{"_id":"themes/newnext/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1632187144458},{"_id":"themes/newnext/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1632187144489},{"_id":"themes/newnext/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1632187144491},{"_id":"themes/newnext/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1632187144491},{"_id":"themes/newnext/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1632187144490},{"_id":"themes/newnext/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1632187144490},{"_id":"themes/newnext/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1632187144492},{"_id":"themes/newnext/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1632187144492},{"_id":"themes/newnext/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1632187144492},{"_id":"themes/newnext/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1632187144492},{"_id":"themes/newnext/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1632187144491},{"_id":"themes/newnext/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1632187144492},{"_id":"themes/newnext/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1632187144492},{"_id":"themes/newnext/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1632187144492},{"_id":"themes/newnext/source/js/bookmark.js","hash":"c9acb262acf0cf127497b570fa9479fb32f34547","modified":1632187144493},{"_id":"themes/newnext/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1632187144491},{"_id":"themes/newnext/source/js/motion.js","hash":"9ac69597315b5b7b4c8900b7949d2a31387d6284","modified":1632187144493},{"_id":"themes/newnext/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1632187144493},{"_id":"themes/newnext/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1632187144491},{"_id":"themes/newnext/layout/_partials/head/head-unique.swig","hash":"f5d2c5a3421ae52888be62e2c837459d1175cc93","modified":1632187144455},{"_id":"themes/newnext/layout/_partials/head/head.swig","hash":"955f68e2c1d3753436141c04fafd57d8fbb265c6","modified":1632187144455},{"_id":"themes/newnext/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1632187144456},{"_id":"themes/newnext/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1632187144455},{"_id":"themes/newnext/layout/_partials/header/menu-item.swig","hash":"ff33b5797f5e4b5cbcb3c222c17bc636c6b88df6","modified":1632187144456},{"_id":"themes/newnext/layout/_partials/header/menu.swig","hash":"d488664bc16608b5f829f959c2058b4381be244a","modified":1632187144456},{"_id":"themes/newnext/layout/_partials/header/sub-menu.swig","hash":"fbec9f77139e1f300509c38446416b4b26350cfa","modified":1632187144456},{"_id":"themes/newnext/source/js/utils.js","hash":"f772c2d64d0d3db69119495261d582c4bb481293","modified":1632187144494},{"_id":"themes/newnext/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1632187144456},{"_id":"themes/newnext/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1632187144456},{"_id":"themes/newnext/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1632187144457},{"_id":"themes/newnext/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1632187144457},{"_id":"themes/newnext/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1632187144458},{"_id":"themes/newnext/layout/_partials/post/post-reward.swig","hash":"78cb2077f50bc3b81130a516ffc04bc1fcea5834","modified":1632187144457},{"_id":"themes/newnext/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1632187144458},{"_id":"themes/newnext/layout/_partials/sidebar/site-overview.swig","hash":"6cc891f0f5553fc3f9ebd3cab8d6a081c20efe56","modified":1632187144458},{"_id":"themes/newnext/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1632187144458},{"_id":"themes/newnext/layout/_partials/post/post-copyright.swig","hash":"0572a4c685fe5c49021a465b717397217ee04df8","modified":1632187144457},{"_id":"themes/newnext/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1632187144459},{"_id":"themes/newnext/source/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1632187144493},{"_id":"themes/newnext/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1632187144459},{"_id":"themes/newnext/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1632187144494},{"_id":"themes/newnext/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1632187144460},{"_id":"themes/newnext/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1632187144459},{"_id":"themes/newnext/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1632187144461},{"_id":"themes/newnext/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1632187144460},{"_id":"themes/newnext/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1632187144461},{"_id":"themes/newnext/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1632187144461},{"_id":"themes/newnext/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1632187144461},{"_id":"themes/newnext/layout/_third-party/comments/changyan.swig","hash":"1130b8bd60f3b84397974486e6586d7f0afaf836","modified":1632187144462},{"_id":"themes/newnext/layout/_third-party/comments/disqus.swig","hash":"fe3cdd70224bd0c8171513a5dfed7b85deb7f23d","modified":1632187144462},{"_id":"themes/newnext/layout/_third-party/comments/gitalk.swig","hash":"8063f65cdaae80840fcf427b875ae606f678dfa5","modified":1632187144462},{"_id":"themes/newnext/layout/_third-party/comments/livere.swig","hash":"6f95bc4d7ffaddc3c0df0ef3eeeaac58ff83f560","modified":1632187144462},{"_id":"themes/newnext/layout/_third-party/comments/valine.swig","hash":"a9c8e7987b63b9ef66e47b966aea05ac77ff920a","modified":1632187144462},{"_id":"themes/newnext/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1632187144463},{"_id":"themes/newnext/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1632187144463},{"_id":"themes/newnext/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1632187144463},{"_id":"themes/newnext/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1632187144461},{"_id":"themes/newnext/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1632187144464},{"_id":"themes/newnext/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1632187144464},{"_id":"themes/newnext/layout/_scripts/pages/schedule.swig","hash":"d5a5f45ef0b41332cad069d263df2c449e2f1e7e","modified":1632187144459},{"_id":"themes/newnext/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1632187144465},{"_id":"themes/newnext/layout/_third-party/comments/disqusjs.swig","hash":"9719cb5858896aef86c2e0bec0ace259936680c4","modified":1632187144462},{"_id":"themes/newnext/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1632187144464},{"_id":"themes/newnext/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1632187144464},{"_id":"themes/newnext/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1632187144465},{"_id":"themes/newnext/layout/_third-party/statistics/lean-analytics.swig","hash":"4a7207c6f9ab0e56ea8f59aca3ed4c2cb2fb7450","modified":1632187144465},{"_id":"themes/newnext/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1632187144464},{"_id":"themes/newnext/scripts/events/lib/config.js","hash":"b205d72a56b1827681f0a260c266e0c02065fd08","modified":1632187144467},{"_id":"themes/newnext/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1632187144467},{"_id":"themes/newnext/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1632187144467},{"_id":"themes/newnext/scripts/filters/comment/changyan.js","hash":"1fc2a94b94108175848ba9541d05898c071386d0","modified":1632187144468},{"_id":"themes/newnext/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1632187144468},{"_id":"themes/newnext/scripts/filters/comment/disqus.js","hash":"d2ce60980fc148bfb877981aabd07bf45d2cdcda","modified":1632187144468},{"_id":"themes/newnext/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1632187144468},{"_id":"themes/newnext/scripts/filters/comment/disqusjs.js","hash":"c081166868e6428a07c51c5674b86b7a4cc9c2a8","modified":1632187144468},{"_id":"themes/newnext/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1632187144465},{"_id":"themes/newnext/scripts/filters/comment/livere.js","hash":"3c4bdc2a682f9889a532e1cb856bc5caeb4208e1","modified":1632187144469},{"_id":"themes/newnext/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1632187144468},{"_id":"themes/newnext/scripts/filters/comment/valine.js","hash":"5201cd09a5e263282ccbf205f07d46f4c6d3f700","modified":1632187144469},{"_id":"themes/newnext/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1632187144484},{"_id":"themes/newnext/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1632187144485},{"_id":"themes/newnext/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1632187144488},{"_id":"themes/newnext/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1632187144488},{"_id":"themes/newnext/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1632187144488},{"_id":"themes/newnext/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1632187144488},{"_id":"themes/newnext/source/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1632187144493},{"_id":"themes/newnext/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1632187144495},{"_id":"themes/newnext/source/js/schemes/pisces.js","hash":"b15a0e8077a9aef55951837871d68a6b0958e127","modified":1632187144493},{"_id":"themes/newnext/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1632187144495},{"_id":"themes/newnext/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1632187144485},{"_id":"themes/newnext/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1632187144495},{"_id":"themes/newnext/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1632187144495},{"_id":"themes/newnext/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1632187144495},{"_id":"themes/newnext/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1632187144465},{"_id":"themes/newnext/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1632187144489},{"_id":"themes/newnext/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1632187144472},{"_id":"themes/newnext/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1632187144473},{"_id":"themes/newnext/source/css/_common/components/rainbow.styl","hash":"41c7cd1b63d49476ed5fbdd26ab9411d8f44bd05","modified":1632187144476},{"_id":"themes/newnext/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1632187144476},{"_id":"themes/newnext/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1632187144479},{"_id":"themes/newnext/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1632187144473},{"_id":"themes/newnext/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1632187144481},{"_id":"themes/newnext/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1632187144479},{"_id":"themes/newnext/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1632187144481},{"_id":"themes/newnext/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1632187144482},{"_id":"themes/newnext/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1632187144499},{"_id":"themes/newnext/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1632187144482},{"_id":"themes/newnext/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1632187144482},{"_id":"themes/newnext/source/css/_common/scaffolding/tables.styl","hash":"2b52b0eb4c66e06762cf115450da0ca1dd435e75","modified":1632187144483},{"_id":"themes/newnext/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1632187144484},{"_id":"themes/newnext/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1632187144485},{"_id":"themes/newnext/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1632187144485},{"_id":"themes/newnext/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1632187144486},{"_id":"themes/newnext/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1632187144481},{"_id":"themes/newnext/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1632187144486},{"_id":"themes/newnext/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1632187144486},{"_id":"themes/newnext/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1632187144486},{"_id":"themes/newnext/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1632187144487},{"_id":"themes/newnext/source/css/_schemes/Muse/_menu.styl","hash":"316ee13fc26d327c8862c2455211144c180cf9c1","modified":1632187144486},{"_id":"themes/newnext/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1632187144486},{"_id":"themes/newnext/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1632187144487},{"_id":"themes/newnext/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1632187144487},{"_id":"themes/newnext/source/css/_schemes/Pisces/_layout.styl","hash":"f5abb2ea7746586738fb4e82107fceed041708ee","modified":1632187144487},{"_id":"themes/newnext/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1632187144486},{"_id":"themes/newnext/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1632187144498},{"_id":"themes/newnext/source/css/_schemes/Pisces/_menu.styl","hash":"c0ed534696ed86560c95ab2a3541b2b42a41ed39","modified":1632187144487},{"_id":"themes/newnext/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1632187144488},{"_id":"themes/newnext/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1632187144488},{"_id":"themes/newnext/source/css/_schemes/Pisces/_sidebar.styl","hash":"d7587df06b30042091316d8b1cc58ba361211492","modified":1632187144488},{"_id":"themes/newnext/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1632187144487},{"_id":"themes/newnext/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1632187144495},{"_id":"themes/newnext/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1632187144496},{"_id":"themes/newnext/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1632187144496},{"_id":"themes/newnext/source/css/_common/components/post/post-collapse.styl","hash":"98227b4de364b48b11e21efcf4f1beb2ed3ab329","modified":1632187144474},{"_id":"themes/newnext/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1632187144474},{"_id":"themes/newnext/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1632187144475},{"_id":"themes/newnext/source/css/_common/components/post/post-expand.styl","hash":"7a683e254646d32b3336774c0cdcf88c1966c0b1","modified":1632187144474},{"_id":"themes/newnext/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1632187144475},{"_id":"themes/newnext/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1632187144475},{"_id":"themes/newnext/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1632187144475},{"_id":"themes/newnext/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1632187144475},{"_id":"themes/newnext/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1632187144475},{"_id":"themes/newnext/source/css/_common/components/post/post.styl","hash":"284249dcfa3b49c5d76210bbb0f74f65fc2f12ea","modified":1632187144476},{"_id":"themes/newnext/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1632187144473},{"_id":"themes/newnext/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1632187144474},{"_id":"themes/newnext/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1632187144473},{"_id":"themes/newnext/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1632187144473},{"_id":"themes/newnext/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1632187144473},{"_id":"themes/newnext/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1632187144473},{"_id":"themes/newnext/source/css/_common/components/post/post-gallery.styl","hash":"d557a0de91a428330b43cdae9f1ec7167d24e2e4","modified":1632187144474},{"_id":"themes/newnext/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1632187144476},{"_id":"themes/newnext/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1632187144476},{"_id":"themes/newnext/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1632187144477},{"_id":"themes/newnext/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1632187144477},{"_id":"themes/newnext/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1632187144478},{"_id":"themes/newnext/source/css/_common/outline/footer/footer.styl","hash":"5528a755b180312d008054653633d857aeeb6780","modified":1632187144477},{"_id":"themes/newnext/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1632187144478},{"_id":"themes/newnext/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1632187144478},{"_id":"themes/newnext/source/css/_common/outline/header/site-nav.styl","hash":"b5ba1b3d5535ccf1e5df6f4cd8ee0147d7278be9","modified":1632187144478},{"_id":"themes/newnext/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1632187144478},{"_id":"themes/newnext/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1632187144479},{"_id":"themes/newnext/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1632187144479},{"_id":"themes/newnext/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1632187144478},{"_id":"themes/newnext/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"1db4ce981fe9fcb9ee4279395c29553efbb43947","modified":1632187144480},{"_id":"themes/newnext/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1632187144479},{"_id":"themes/newnext/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"e2ad7ccf1865a45548e3f31c70fac2c65d6ef534","modified":1632187144480},{"_id":"themes/newnext/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1632187144479},{"_id":"themes/newnext/source/css/_common/components/third-party/search.styl","hash":"2d9d68a431a334626d463bb1bdfbcd2ea8242e94","modified":1632187144477},{"_id":"themes/newnext/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1632187144477},{"_id":"themes/newnext/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1632187144480},{"_id":"themes/newnext/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1632187144481},{"_id":"themes/newnext/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1632187144481},{"_id":"themes/newnext/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1632187144481},{"_id":"themes/newnext/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1632187144482},{"_id":"themes/newnext/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1632187144480},{"_id":"themes/newnext/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"42a12c718b5832cd535a4631759376910c549d94","modified":1632187144483},{"_id":"themes/newnext/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1632187144483},{"_id":"themes/newnext/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1632187144483},{"_id":"themes/newnext/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1632187144483},{"_id":"themes/newnext/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1632187144483},{"_id":"themes/newnext/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1632187144484},{"_id":"themes/newnext/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1632187144484},{"_id":"themes/newnext/source/css/_common/outline/sidebar/sidebar.styl","hash":"c83d750238d6ac13b65869a909465fe621c464c3","modified":1632187144480},{"_id":"themes/newnext/source/css/_common/scaffolding/highlight/highlight.styl","hash":"ae13712e313aacfce989d97ed6cba0606c776fb3","modified":1632187144482},{"_id":"themes/newnext/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1632187144498},{"_id":"themes/newnext/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1632187144498},{"_id":"themes/newnext/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1632187144497},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1632187231953},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1632187231953},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1632187231953},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1632187231953},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1632187231953},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1632187231953},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1632187231953},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1632187231953},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1632187231953},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1632187231953},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1632187231953},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1632187231953},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1632187231953},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1632187231953},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1632187231953},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1632187231953},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1632187231953},{"_id":"public/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1632187231953},{"_id":"public/js/schemes/pisces.js","hash":"b15a0e8077a9aef55951837871d68a6b0958e127","modified":1632187231953},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1632187231953},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1632187231953},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1632187231953},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1632187231953},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1632187231953},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1632187231953},{"_id":"source/about/index.md","hash":"8c0ad161e9a9b70fd744c3d3aaf4c51e1b70295d","modified":1632187144423},{"_id":"source/archives/index.md","hash":"525fcda6ae85bcf93719d356390ea1cffa4511bf","modified":1632187144423},{"_id":"source/categories/index.md","hash":"3adf9d4210382ee547ce1ba3462a3623436813b9","modified":1632187144423},{"_id":"source/img/1.jpg","hash":"d6275abdbe350ad997f949a28ff4b7ee5673a82c","modified":1632187144424},{"_id":"source/tags/index.md","hash":"2c961de146c533d2fc6599df5a7ee21d7a945a4b","modified":1632187144424},{"_id":"source/_posts/JavaScript执行机制之event-loop.md","hash":"78579fd4d3abfef410426d7292072dbc506e0a26","modified":1632187144421},{"_id":"source/_posts/firewalld指令.md","hash":"914acaca8613d745a44b3891dc963fa9ff24547e","modified":1632187144421},{"_id":"source/_posts/node笔记.md","hash":"3781751eeb5b7a9c0a2fe36d43017c0db598b34b","modified":1632187144421},{"_id":"source/_posts/npm摘录.md","hash":"773380bec032806bf294732d161d6e8861f5cbfd","modified":1632187144422},{"_id":"source/_posts/npm资料摘录-package-json.md","hash":"ff2eab400dcd5ba1c18770e6205d90900785924f","modified":1632187144422},{"_id":"source/_posts/个人博客的使用方式.md","hash":"2199f341bedf248ace0a673a5d3d7c4d6f28f619","modified":1632187144422},{"_id":"source/_posts/用Hexo搭建个人博客-前言.md","hash":"527a0450d68dd743f4288d4c383e59af63b54eb4","modified":1632187144422},{"_id":"source/_posts/用Hexo搭建个人博客-设置GitHub.md","hash":"547927bb955e8ee459ad87f586d07366ab835f43","modified":1632187144422},{"_id":"source/_posts/用Hexo搭建个人博客-配置主题.md","hash":"5141a1ff203f3a70ebcdd0ae915d7c6ea09fbcca","modified":1632187144423},{"_id":"source/_posts/用Hexo搭建个人博客-配置hexo工程.md","hash":"08dc48b6bb2db42643ce05e551815cd1fa335fa9","modified":1632187144423},{"_id":"source/img/2.jpg","hash":"780e9ea2ca8a0406452135a8e33fa5169af4f615","modified":1632187144424},{"_id":"public/about/index.html","hash":"54f0ad5dc6a56fea1acc157380941ee451c7450b","modified":1632188031868},{"_id":"public/categories/index.html","hash":"1677fddc1facaad42518d6bfa6cb3a3c87ed281f","modified":1632188031868},{"_id":"public/tags/index.html","hash":"8429330c9c17f8cab5662da040670bc50573bdca","modified":1632188031868},{"_id":"public/2020/01/01/node笔记/index.html","hash":"1c96b126d77f778aa869fc6b7479e2b9e5021159","modified":1632188031868},{"_id":"public/2019/12/31/npm资料摘录-package-json/index.html","hash":"8886b26c6877e967ff27336ae2b1ca74801f11b4","modified":1632188031868},{"_id":"public/2019/12/30/个人博客的使用方式/index.html","hash":"0a98b9d57ac582f7204f99cb1e5ed7f9ba71bc8c","modified":1632188031868},{"_id":"public/2019/12/30/用Hexo搭建个人博客-设置GitHub/index.html","hash":"e4eb2124520f5d8b36943a11ca92fdafddd9f708","modified":1632188031868},{"_id":"public/categories/node/index.html","hash":"17ddac06393b5b2868b1a06ca33aa94ae7ffe00d","modified":1632188031868},{"_id":"public/categories/npm/index.html","hash":"a117e95fa4185c359185b43fd16f04bd4156422a","modified":1632188031868},{"_id":"public/categories/npm/摘录/index.html","hash":"29437b14f8f6185911973d9f5e68fafcc683bcbf","modified":1632188031868},{"_id":"public/categories/CentOS/index.html","hash":"f8e6ee54d62eadf2c5a2b80c041694cf4c9d0165","modified":1632188031868},{"_id":"public/categories/CentOS/网络防火墙/index.html","hash":"6aeed36d6c411da73a514839b0e15ecdab534b73","modified":1632188031868},{"_id":"public/categories/javascript/index.html","hash":"d56353e57e28ef91db5627801b37adedd8c84227","modified":1632188031868},{"_id":"public/categories/用Hexo搭建个人博客/index.html","hash":"ad5911264065e2d0500252661b145c9a0c6a9e9a","modified":1632188031868},{"_id":"public/categories/个人博客的使用方式/index.html","hash":"083c0aebc6096bd213000ebb36c05f7b7f2f5bb6","modified":1632188031868},{"_id":"public/archives/2019/index.html","hash":"12c2c205f025dba0c44dcc03e0f69e0ed0fdfecf","modified":1632188031868},{"_id":"public/archives/2019/12/index.html","hash":"2554800339bfa61d4fa29cbac07087360de9bf9a","modified":1632188031868},{"_id":"public/archives/2020/index.html","hash":"06b6e2838c5247576be1054f8d279abb5222e421","modified":1632188031868},{"_id":"public/archives/2020/01/index.html","hash":"f7e3a66df801e2f28c3f802b65b0787ab5be3979","modified":1632188031868},{"_id":"public/tags/node/index.html","hash":"691c3e64d8fac80de5d4f3b50e4fe43ad69f20d7","modified":1632188031868},{"_id":"public/tags/npm/index.html","hash":"86b91495ac2f6e7de7dd5e332af90bea1a7c7642","modified":1632188031868},{"_id":"public/tags/package-json/index.html","hash":"ea901bab26bad79625bd2dbaa7bc2069996a3a62","modified":1632188031868},{"_id":"public/tags/CentOS/index.html","hash":"b04c699720f2628ee2d94111ba390556b83e2005","modified":1632188031868},{"_id":"public/tags/firewalld/index.html","hash":"d3032dc5be7bb5c8e4a14f4ae4d36c76a0307bd4","modified":1632188031868},{"_id":"public/tags/javascript/index.html","hash":"c4c84e69792f8e721c1ca2e1d59c70c24dd62316","modified":1632188031868},{"_id":"public/tags/event/index.html","hash":"2e3d9296ce10f3a60ed27d9fa4e7c75ef3a2439b","modified":1632188031868},{"_id":"public/tags/Hexo/index.html","hash":"1b1eeaa82998efb1daccb69ae73962fb433a7dbe","modified":1632188031868},{"_id":"public/tags/github/index.html","hash":"9db8e28f9b23aae7fcfd886c2557d4504e4391a6","modified":1632188031868},{"_id":"public/tags/个人博客/index.html","hash":"49a021b05c4b82d999a5b4aaa6d2daa104e10393","modified":1632188031868},{"_id":"public/2020/01/02/JavaScript执行机制之event-loop/index.html","hash":"22d7e5dd27d1cab929a92c6034c166ffd0c48bcd","modified":1632188031868},{"_id":"public/2020/01/01/firewalld指令/index.html","hash":"643232226016c010e280d62c7c3a4006096691bd","modified":1632188031868},{"_id":"public/2020/01/01/用Hexo搭建个人博客-配置主题/index.html","hash":"35ec11a8167723705c6c81e7c4190541b71df08b","modified":1632188031868},{"_id":"public/2019/12/31/用Hexo搭建个人博客-配置hexo工程/index.html","hash":"9f5c559fa688dbcb28b3d791ae8723527f6f6614","modified":1632188031868},{"_id":"public/2019/12/31/npm摘录/index.html","hash":"3296c58d9e592305372aa35b7a8959d4d1333858","modified":1632188031868},{"_id":"public/2019/12/30/用Hexo搭建个人博客-前言/index.html","hash":"a39177f865f484256fc127a9961b693a9c1411c6","modified":1632188031868},{"_id":"public/img/1.jpg","hash":"d6275abdbe350ad997f949a28ff4b7ee5673a82c","modified":1632188031868},{"_id":"public/img/2.jpg","hash":"780e9ea2ca8a0406452135a8e33fa5169af4f615","modified":1632188031868}],"Category":[{"name":"node","_id":"ckttecqzn00051kuv82qq9vtg"},{"name":"npm","_id":"ckttecqzr000a1kuvfc78gw0r"},{"name":"摘录","parent":"ckttecqzr000a1kuvfc78gw0r","_id":"ckttecqzs000d1kuvdbexf766"},{"name":"CentOS","_id":"ckttecqzv000j1kuvdkla7t8f"},{"name":"网络防火墙","parent":"ckttecqzv000j1kuvdkla7t8f","_id":"ckttecqzw000m1kuvebm4djo5"},{"name":"javascript","_id":"ckttecqzy000s1kuv9qpqdqbz"},{"name":"用Hexo搭建个人博客","_id":"ckttecr0300141kuv5qe92eze"},{"name":"个人博客的使用方式","_id":"ckttecr0400171kuv5fi6cerj"}],"Data":[],"Page":[{"title":"关于","date":"2019-12-29T00:38:40.000Z","_content":"这是一个测试页面。\n这是about","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2019-12-29 08:38:40\n---\n这是一个测试页面。\n这是about","updated":"2021-09-21T01:19:04.423Z","path":"about/index.html","_id":"ckttecqur00001kuv0ieb6obi","comments":1,"layout":"page","content":"<p>这是一个测试页面。<br>这是about</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是一个测试页面。<br>这是about</p>\n"},{"title":"归档","date":"2019-12-29T00:38:23.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: 归档\ndate: 2019-12-29 08:38:23\n---\n","updated":"2021-09-21T01:19:04.423Z","path":"archives/index.html","_id":"ckttecquy00011kuv65fmb072","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2019-12-29T00:37:56.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-12-29 08:37:56\ntype: \"categories\"\n---\n","updated":"2021-09-21T01:19:04.423Z","path":"categories/index.html","_id":"ckttecqv400021kuv5cuu5rbc","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-12-29T00:36:37.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-12-29 08:36:37\ntype: \"tags\"\n---\n","updated":"2021-09-21T01:19:04.424Z","path":"tags/index.html","_id":"ckttecqvd00031kuv3yds7zvk","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"node笔记","date":"2020-01-01T12:51:12.000Z","_content":"## 什么是异步\n不仅仅是node，其实web容器也一样；这里的异步是针对I/O和事件来说的，是对于javascript来说的。这里不仅仅是异步，应该是异步非阻塞。","source":"_posts/node笔记.md","raw":"---\ntitle: node笔记\ndate: 2020-01-01 20:51:12\ncategories:\n- node\ntags:\n- node\n---\n## 什么是异步\n不仅仅是node，其实web容器也一样；这里的异步是针对I/O和事件来说的，是对于javascript来说的。这里不仅仅是异步，应该是异步非阻塞。","slug":"node笔记","published":1,"updated":"2021-09-21T01:19:04.421Z","_id":"ckttecqzl00041kuvdpzvbx32","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是异步\"><a href=\"#什么是异步\" class=\"headerlink\" title=\"什么是异步\"></a>什么是异步</h2><p>不仅仅是node，其实web容器也一样；这里的异步是针对I/O和事件来说的，是对于javascript来说的。这里不仅仅是异步，应该是异步非阻塞。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是异步\"><a href=\"#什么是异步\" class=\"headerlink\" title=\"什么是异步\"></a>什么是异步</h2><p>不仅仅是node，其实web容器也一样；这里的异步是针对I/O和事件来说的，是对于javascript来说的。这里不仅仅是异步，应该是异步非阻塞。</p>\n"},{"title":"npm资料摘录-package.json","date":"2019-12-30T18:31:36.000Z","_content":"\n摘录 [package.json 的 dependencies 里有趣现象](https://www.jianshu.com/p/33115db91c40)\n\n1. 带@加前缀的  \n    如：```\"@babel/preset-env\": \"^7.3.4\"```  \n    这种用法主要想将多个 package 分组归类，但不能直接```xxx/yyy```，前面必须添加```@```。  \n    注意：这带前缀的包，在发布时要带 publish 参数, ```npm publish --access publish```\n\n1. 带^号  \n    如：```\"moment\": \"^2.24.0\"```   \n    就上面这个而言，```^```号表示 ```>=2.24.0 < 3.0.0```\n1. 纯版本号\n    如：```\"react\": \"16.4.1\"```   \n    一般固定版本号，是担心安装了比当前版本高的版本，从而引起不兼容。不过现在都有了 arn.lock 或 package-lock.json 来锁版本，就没这类问题了。\n    <!-- more -->\n1. 带包名的版本号   \n    如：```\"react-native-webp-support\": \"TGPSKI/react-native-webp-support\"```   \n    详情见：https://github.com/TGPSKI/react-native-webp-support#ios\n1. 直接安装代码仓库里的代码\n    如：```\"repository1\": \"git+https://github.com/myusername/repository1.git\"```\n    这种形式也还有多种玩法，比如：地址后面跟不同的 branchName、tagName、hashCode（某一次提交的代码） 等。\n1. 引用本地文件\n    如：```\"react-native-video\": \"file:../..\"```    \n    详情见：https://github.com/react-native-community/react-native-video/blob/master/examples/basic/package.json\n\n    一般是 package 作者在写 ```examples``` 时，引用 package 项目根目录下的 index.js 文件。\n1. 安装至代码目录    \n    如：```\"react-native-device-info\": \"file:./src/node_modules/react-native-device-info\"```  \n    安装后，会将 ```react-native-device-info``` 包安装到本地目录（src 下），方便自己管理（但下次安装会覆盖，除非将修改过的文件用 git 管理起来），**不推荐**。\n","source":"_posts/npm资料摘录-package-json.md","raw":"---\ntitle: npm资料摘录-package.json\ndate: 2019-12-31 02:31:36\ncategories:\n- npm\n- 摘录\ntags:\n- npm\n- package.json\n---\n\n摘录 [package.json 的 dependencies 里有趣现象](https://www.jianshu.com/p/33115db91c40)\n\n1. 带@加前缀的  \n    如：```\"@babel/preset-env\": \"^7.3.4\"```  \n    这种用法主要想将多个 package 分组归类，但不能直接```xxx/yyy```，前面必须添加```@```。  \n    注意：这带前缀的包，在发布时要带 publish 参数, ```npm publish --access publish```\n\n1. 带^号  \n    如：```\"moment\": \"^2.24.0\"```   \n    就上面这个而言，```^```号表示 ```>=2.24.0 < 3.0.0```\n1. 纯版本号\n    如：```\"react\": \"16.4.1\"```   \n    一般固定版本号，是担心安装了比当前版本高的版本，从而引起不兼容。不过现在都有了 arn.lock 或 package-lock.json 来锁版本，就没这类问题了。\n    <!-- more -->\n1. 带包名的版本号   \n    如：```\"react-native-webp-support\": \"TGPSKI/react-native-webp-support\"```   \n    详情见：https://github.com/TGPSKI/react-native-webp-support#ios\n1. 直接安装代码仓库里的代码\n    如：```\"repository1\": \"git+https://github.com/myusername/repository1.git\"```\n    这种形式也还有多种玩法，比如：地址后面跟不同的 branchName、tagName、hashCode（某一次提交的代码） 等。\n1. 引用本地文件\n    如：```\"react-native-video\": \"file:../..\"```    \n    详情见：https://github.com/react-native-community/react-native-video/blob/master/examples/basic/package.json\n\n    一般是 package 作者在写 ```examples``` 时，引用 package 项目根目录下的 index.js 文件。\n1. 安装至代码目录    \n    如：```\"react-native-device-info\": \"file:./src/node_modules/react-native-device-info\"```  \n    安装后，会将 ```react-native-device-info``` 包安装到本地目录（src 下），方便自己管理（但下次安装会覆盖，除非将修改过的文件用 git 管理起来），**不推荐**。\n","slug":"npm资料摘录-package-json","published":1,"updated":"2021-09-21T01:19:04.422Z","_id":"ckttecqzq00091kuvdbwdhjt0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>摘录 <a href=\"https://www.jianshu.com/p/33115db91c40\">package.json 的 dependencies 里有趣现象</a></p>\n<ol>\n<li><p>带@加前缀的<br> 如：<code>&quot;@babel/preset-env&quot;: &quot;^7.3.4&quot;</code><br> 这种用法主要想将多个 package 分组归类，但不能直接<code>xxx/yyy</code>，前面必须添加<code>@</code>。<br> 注意：这带前缀的包，在发布时要带 publish 参数, <code>npm publish --access publish</code></p>\n</li>\n<li><p>带^号<br> 如：<code>&quot;moment&quot;: &quot;^2.24.0&quot;</code><br> 就上面这个而言，<code>^</code>号表示 <code>&gt;=2.24.0 &lt; 3.0.0</code></p>\n</li>\n<li><p>纯版本号<br> 如：<code>&quot;react&quot;: &quot;16.4.1&quot;</code><br> 一般固定版本号，是担心安装了比当前版本高的版本，从而引起不兼容。不过现在都有了 arn.lock 或 package-lock.json 来锁版本，就没这类问题了。</p>\n <span id=\"more\"></span></li>\n<li><p>带包名的版本号<br> 如：<code>&quot;react-native-webp-support&quot;: &quot;TGPSKI/react-native-webp-support&quot;</code><br> 详情见：<a href=\"https://github.com/TGPSKI/react-native-webp-support#ios\">https://github.com/TGPSKI/react-native-webp-support#ios</a></p>\n</li>\n<li><p>直接安装代码仓库里的代码<br> 如：<code>&quot;repository1&quot;: &quot;git+https://github.com/myusername/repository1.git&quot;</code><br> 这种形式也还有多种玩法，比如：地址后面跟不同的 branchName、tagName、hashCode（某一次提交的代码） 等。</p>\n</li>\n<li><p>引用本地文件<br> 如：<code>&quot;react-native-video&quot;: &quot;file:../..&quot;</code><br> 详情见：<a href=\"https://github.com/react-native-community/react-native-video/blob/master/examples/basic/package.json\">https://github.com/react-native-community/react-native-video/blob/master/examples/basic/package.json</a></p>\n<p> 一般是 package 作者在写 <code>examples</code> 时，引用 package 项目根目录下的 index.js 文件。</p>\n</li>\n<li><p>安装至代码目录<br> 如：<code>&quot;react-native-device-info&quot;: &quot;file:./src/node_modules/react-native-device-info&quot;</code><br> 安装后，会将 <code>react-native-device-info</code> 包安装到本地目录（src 下），方便自己管理（但下次安装会覆盖，除非将修改过的文件用 git 管理起来），<strong>不推荐</strong>。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>摘录 <a href=\"https://www.jianshu.com/p/33115db91c40\">package.json 的 dependencies 里有趣现象</a></p>\n<ol>\n<li><p>带@加前缀的<br> 如：<code>&quot;@babel/preset-env&quot;: &quot;^7.3.4&quot;</code><br> 这种用法主要想将多个 package 分组归类，但不能直接<code>xxx/yyy</code>，前面必须添加<code>@</code>。<br> 注意：这带前缀的包，在发布时要带 publish 参数, <code>npm publish --access publish</code></p>\n</li>\n<li><p>带^号<br> 如：<code>&quot;moment&quot;: &quot;^2.24.0&quot;</code><br> 就上面这个而言，<code>^</code>号表示 <code>&gt;=2.24.0 &lt; 3.0.0</code></p>\n</li>\n<li><p>纯版本号<br> 如：<code>&quot;react&quot;: &quot;16.4.1&quot;</code><br> 一般固定版本号，是担心安装了比当前版本高的版本，从而引起不兼容。不过现在都有了 arn.lock 或 package-lock.json 来锁版本，就没这类问题了。</p>","more":"</li>\n<li><p>带包名的版本号<br> 如：<code>&quot;react-native-webp-support&quot;: &quot;TGPSKI/react-native-webp-support&quot;</code><br> 详情见：<a href=\"https://github.com/TGPSKI/react-native-webp-support#ios\">https://github.com/TGPSKI/react-native-webp-support#ios</a></p>\n</li>\n<li><p>直接安装代码仓库里的代码<br> 如：<code>&quot;repository1&quot;: &quot;git+https://github.com/myusername/repository1.git&quot;</code><br> 这种形式也还有多种玩法，比如：地址后面跟不同的 branchName、tagName、hashCode（某一次提交的代码） 等。</p>\n</li>\n<li><p>引用本地文件<br> 如：<code>&quot;react-native-video&quot;: &quot;file:../..&quot;</code><br> 详情见：<a href=\"https://github.com/react-native-community/react-native-video/blob/master/examples/basic/package.json\">https://github.com/react-native-community/react-native-video/blob/master/examples/basic/package.json</a></p>\n<p> 一般是 package 作者在写 <code>examples</code> 时，引用 package 项目根目录下的 index.js 文件。</p>\n</li>\n<li><p>安装至代码目录<br> 如：<code>&quot;react-native-device-info&quot;: &quot;file:./src/node_modules/react-native-device-info&quot;</code><br> 安装后，会将 <code>react-native-device-info</code> 包安装到本地目录（src 下），方便自己管理（但下次安装会覆盖，除非将修改过的文件用 git 管理起来），<strong>不推荐</strong>。</p>\n</li>\n</ol>"},{"title":"firewalld指令","date":"2020-01-01T13:21:01.000Z","_content":"摘录：[shuyang](https://www.cnblogs.com/wangshuyang/)的[firewalld命令集--firewall-cmd](https://www.cnblogs.com/wangshuyang/p/11941547.html)\n\n## firewalld命令集--firewall-cmd\nfirewalld是Linux上新用的防火墙软件，跟iptables差不多的工具  \nfirewall-cmd 是 firewalld的字符界面管理工具，firewalld是centos7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念。\n\nfirewalld跟iptables比起来至少有两大好处：\n1. firewalld可以动态修改单条规则，而不需要像iptables那样，在修改了规则后必须得全部刷新才可以生效。\n1. firewalld在使用上要比iptables人性化很多，即使不明白“五张表五条链”而且对TCP/IP协议也不理解也可以实现大部分功能。  \n\nfirewalld自身并不具备防火墙的功能，而是和iptables一样需要通过内核的netfilter来实现，也就是说firewalld和 iptables一样，他们的作用都是用于维护规则，而真正使用规则干活的是内核的netfilter，只不过firewalld和iptables的结 构以及使用方法不一样罢了。\n<!-- more -->\n### 命令格式\n```\n$ firewall-cmd [选项 ... ]\n```\n#### 选项\n##### 通用选项\n```\n-h, --help    # 显示帮助信息；\n-V, --version # 显示版本信息. （这个选项不能与其他选项组合）；\n-q, --quiet   # 不打印状态消息；\n```\n##### 状态选项\n```\n--state                # 显示firewalld的状态；\n--reload               # 不中断服务的重新加载；\n--complete-reload      # 中断所有连接的重新加载；\n--runtime-to-permanent # 将当前防火墙的规则永久保存；\n--check-config         # 检查配置正确性；\n```\n##### 日志选项\n```\n--get-log-denied         # 获取记录被拒绝的日志；\n--set-log-denied=<value> # 设置记录被拒绝的日志，只能为 'all','unicast','broadcast','multicast','off' 其中的一个；\n```\n### 实例\n\n#### 安装firewalld\n```\n$ yum install firewalld firewall-config\n\n$ systemctl start  firewalld # 启动\n$ systemctl stop firewalld  # 停止\n$ systemctl enable firewalld # 启用自动启动\n$ systemctl disable firewalld # 禁用自动启动\n$ systemctl status firewalld # 或者 firewall-cmd --state 查看状态\n```\n#### 关闭服务的方法\n你也可以关闭目前还不熟悉的FirewallD防火墙，而使用iptables，命令如下：\n```\n$ systemctl stop firewalld\n$ systemctl disable firewalld\n$ yum install iptables-services\n$ systemctl start iptables\n$ systemctl enable iptables\n```\n#### 配置firewalld\n```\n$ firewall-cmd --version  # 查看版本\n$ firewall-cmd --help     # 查看帮助\n```\n##### 查看设置：\n```\n$ firewall-cmd --state  # 显示状态\n$ firewall-cmd --get-active-zones  # 查看区域信息\n$ firewall-cmd --get-zone-of-interface=eth0  # 查看指定接口所属区域\n$ firewall-cmd --panic-on  # 拒绝所有包\n$ firewall-cmd --panic-off  # 取消拒绝状态\n$ firewall-cmd --query-panic  # 查看是否拒绝\n```\n##### 更新规则\n```\n$ firewall-cmd --reload # 更新防火墙规则\n$ firewall-cmd --complete-reload\n# 两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务\n```\n##### 区域的相关设置\n```\n# 将接口添加到区域，默认接口都在public\n$ firewall-cmd --zone=public --add-interface=eth0\n# 永久生效再加上 --permanent 然后reload防火墙\n\n# 设置默认接口区域，立即生效无需重启\n$ firewall-cmd --set-default-zone=public\n\n# 查看所有打开的端口：\n$ firewall-cmd --zone=dmz --list-ports\n\n# 加入一个端口到区域：\n$ firewall-cmd --zone=dmz --add-port=8080/tcp\n# 若要永久生效方法同上\n\n# 打开一个服务，类似于将端口可视化，服务需要在配置文件中添加，/etc/firewalld 目录下有services文件夹，这个不详细说了，详情参考文档\n$ firewall-cmd --zone=work --add-service=smtp\n\n# 移除服务\n$ firewall-cmd --zone=work --remove-service=smtp\n\n# 显示支持的区域列表\n$ firewall-cmd --get-zones\n\n# 设置为家庭区域\n$ firewall-cmd --set-default-zone=home\n\n# 查看当前区域\n$ firewall-cmd --get-active-zones\n\n# 设置当前区域的接口\n$ firewall-cmd --get-zone-of-interface=enp03s\n\n# 显示所有公共区域（public）\n$ firewall-cmd --zone=public --list-all\n\n# 临时修改网络接口（enp0s3）为内部区域（internal）\n$ firewall-cmd --zone=internal --change-interface=enp03s\n\n# 永久修改网络接口enp03s为内部区域（internal）\n$ firewall-cmd --permanent --zone=internal --change-interface=enp03s\n```\n##### 服务管理\n```\n# 显示服务列表  \nAmanda, FTP, Samba和TFTP等最重要的服务已经被FirewallD提供相应的服务，可以使用如下命令查看：\n\n$ firewall-cmd --get-services\n\n# 允许SSH服务通过\n$ firewall-cmd --new-service=ssh\n\n# 禁止SSH服务通过\n$ firewall-cmd --delete-service=ssh\n\n# 打开TCP的8080端口\n$ firewall-cmd --enable ports=8080/tcp\n\n# 临时允许Samba服务通过600秒\n$ firewall-cmd --enable service=samba --timeout=600\n\n# 显示当前服务\n$ firewall-cmd --list-services\n\n# 添加HTTP服务到内部区域（internal）\n$ firewall-cmd --permanent --zone=internal --add-service=http\n$ firewall-cmd --reload     # 在不改变状态的条件下重新加载防火墙\n```\n##### 端口管理\n```\n# 打开443/TCP端口\n$ firewall-cmd --add-port=443/tcp\n\n# 永久打开3690/TCP端口\n$ firewall-cmd --permanent --add-port=3690/tcp\n\n# 永久打开端口好像需要reload一下，临时打开好像不用，如果用了reload临时打开的端口就失效了\n# 其它服务也可能是这样的，这个没有测试\n$ firewall-cmd --reload\n\n# 查看防火墙，添加的端口也可以看到\n$ firewall-cmd --list-all\n```\n##### 直接模式\n```\n# FirewallD包括一种直接模式，使用它可以完成一些工作，例如打开TCP协议的9999端口\n\n$ firewall-cmd --direct -add-rule ipv4 filter INPUT 0 -p tcp --dport 9000 -j ACCEPT\n$ firewall-cmd --reload\n```\n##### 自定义服务管理\n选项\n\n（末尾带有 [P only] 的话表示该选项除了与（--permanent）之外，不能与其他选项一同使用！）\n```\n--new-service=<服务名> \n# 新建一个自定义服务 [P only]\n\n--new-service-from-file=<文件名> [--name=<服务名>]\n# 从文件中读取配置用以新建一个自定义服务 [P only]\n\n--delete-service=<服务名>\n# 删除一个已存在的服务 [P only]\n\n--load-service-defaults=<服务名>\n# Load icmptype default settings [P only]\n\n--info-service=<服务名>\n# 显示该服务的相关信息\n\n--path-service=<服务名>\n# 显示该服务的文件的相关路径 [P only]\n\n--service=<服务名> --set-description=<描述>\n# 给该服务设置描述信息 [P only]\n\n--service=<服务名> --get-description\n# 显示该服务的描述信息 [P only]\n\n--service=<服务名> --set-short=<描述>\n# 给该服务设置一个简短的描述 [P only]\n\n--service=<服务名> --get-short\n# 显示该服务的简短描述 [P only]\n\n--service=<服务名> --add-port=<端口号>[-<端口号>]/<protocol>\n# 给该服务添加一个新的端口(端口段) [P only]\n\n--service=<服务名> --remove-port=<端口号>[-<端口号>]/<protocol>\n# 从该服务上移除一个端口(端口段) [P only]\n\n--service=<服务名> --query-port=<端口号>[-<端口号>]/<protocol>\n# 查询该服务是否添加了某个端口(端口段) [P only]\n\n--service=<服务名> --get-ports\n# 显示该服务添加的所有端口 [P only]\n\n--service=<服务名> --add-protocol=<protocol>\n# 为该服务添加一个协议 [P only]\n\n--service=<服务名> --remove-protocol=<protocol>\n# 从该服务上移除一个协议 [P only]\n\n--service=<服务名> --query-protocol=<protocol>\n# 查询该服务是否添加了某个协议 [P only]\n\n--service=<服务名> --get-protocols\n# 显示该服务添加的所有协议 [P only]\n\n--service=<服务名> --add-source-port=<端口号>[-<端口号>]/<protocol>\n# 添加新的源端口(端口段)到该服务 [P only]\n\n--service=<服务名> --remove-source-port=<端口号>[-<端口号>]/<protocol>\n# 从该服务中删除源端口(端口段) [P only]\n\n--service=<服务名> --query-source-port=<端口号>[-<端口号>]/<protocol>\n# 查询该服务是否添加了某个源端口(端口段) [P only]\n\n--service=<服务名> --get-source-ports\n# 显示该服务所有源端口 [P only]\n\n--service=<服务名> --add-module=<module>\n# 为该服务添加一个模块 [P only]\n\n--service=<服务名> --remove-module=<module>\n# 为该服务移除一个模块 [P only]\n\n--service=<服务名> --query-module=<module>\n# 查询该服务是否添加了某个模块 [P only]\n\n--service=<服务名> --get-modules\n# 显示该服务添加的所有模块 [P only]\n\n--service=<服务名> --set-destination=<ipv>:<address>[/<mask>]\n# Set destination for ipv to address in service [P only]\n\n--service=<服务名> --remove-destination=<ipv>\n# Disable destination for ipv i service [P only]\n\n--service=<服务名> --query-destination=<ipv>:<address>[/<mask>]\n# Return whether destination ipv is set for service [P only]\n\n--service=<服务名> --get-destinations\n# List destinations in service [P only]\n```\n##### 控制端口 / 服务\n\n可以通过两种方式控制端口的开放，一种是指定端口号另一种是指定服务名。虽然开放 http 服务就是开放了 80 端口，但是还是不能通过端口号来关闭，也就是说通过指定服务名开放的就要通过指定服务名关闭；通过指定端口号开放的就要通过指定端口号关闭。还有一个要注意的就是指定端口的时候一定要指定是什么协议，tcp 还是 udp。知道这个之后以后就不用每次先关防火墙了，可以让防火墙真正的生效。\n```\n$ firewall-cmd --add-service=mysql        # 开放mysql端口\n$ firewall-cmd --remove-service=http      # 阻止http端口\n$ firewall-cmd --list-services            # 查看开放的服务\n$ firewall-cmd --add-port=3306/tcp        # 开放通过tcp访问3306\n$ firewall-cmd --remove-port=80tcp        # 阻止通过tcp访问3306\n$ firewall-cmd --add-port=233/udp         # 开放通过udp访问233\n$ firewall-cmd --list-ports               # 查看开放的端口\n```\n**伪装 IP**\n```\n$ firewall-cmd --query-masquerade # 检查是否允许伪装IP\n$ firewall-cmd --add-masquerade   # 允许防火墙伪装IP\n$ firewall-cmd --remove-masquerade# 禁止防火墙伪装IP\n```\n**端口转发**  \n\n端口转发可以将指定地址访问指定的端口时，将流量转发至指定地址的指定端口。转发的目的如果不指定 ip 的话就默认为本机，如果指定了 ip 却没指定端口，则默认使用来源端口。 如果配置好端口转发之后不能用，可以检查下面两个问题：\n\n1. 比如我将 80 端口转发至 8080 端口，首先检查本地的 80 端口和目标的 8080 端口是否开放监听了\n1. 其次检查是否允许伪装 IP，没允许的话要开启伪装 IP\n```\n$ firewall-cmd --add-forward-port=port=80:proto=tcp:toport=8080   \n# 将80端口的流量转发至8080\n\n$ firewall-cmd --add-forward-port=port=80:proto=tcp:toaddr=192.168.0.1 \n# 将80端口的流量转发至192.168.0.1\n\n$ firewall-cmd --add-forward-port=port=80:proto=tcp:toaddr=192.168.0.1:toport=8080 \n# 将80端口的流量转发至192.168.0.1的8080端口\n```\n当我们想把某个端口隐藏起来的时候，就可以在防火墙上阻止那个端口访问，然后再开一个不规则的端口，之后配置防火墙的端口转发，将流量转发过去。  \n\n端口转发还可以做流量分发，一个防火墙拖着好多台运行着不同服务的机器，然后用防火墙将不同端口的流量转发至不同机器。  \n \n**接下来我们来看富规则的设置，即rich rules**\n```\n# 允许192.168.2.208主机的所有流量\n$ firewall-cmd --zone=drop --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.2.208\" accept\"\n\n# 允许192.168.2.208主机的icmp协议，即允许192.168.2.208主机ping\n$ firewall-cmd --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.2.208\" protocol value=\"icmp\" accept\"\n\n# 取消允许192.168.2.208主机的所有流量\n$ firewall-cmd --zone=drop --remove-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.2.208\" accept\"\n\n# 允许192.168.2.208主机访问ssh服务\n$ firewall-cmd --zone=drop --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.2.208\" service name=\"ssh\" accept\"\n\n# 禁止192.168.2.208访问https服务，并返回错误信息\n$ firewall-cmd --zone=drop --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.2.208\" service name=\"https\" reject\"\n注：如果是drop的话是直接丢弃，会返回timeout（连接超时）\n\n# 允许192.168.2.0/24网段的主机访问22端口\n$ firewall-cmd --zone=drop --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.2.0/24\" port protocol=\"tcp\" port=\"22\" accept\"\n\n# 每分钟允许2个新连接访问ftp服务\n$ firewall-cmd --add-rich-rule=\"rule service name=ftp limit value=2/m accept\"\n\n# 允许新的ipv4和ipv6连接ftp，并使用日志和审核，每分钟允许访问一次\n$ firewall-cmd --add-rich-rule=\"rule service name=ftp log limit value=\"1/m\" audit accept\"\n\n# 拒绝来自192.168.2.0/24网段的连接，10秒后自动取消\n$ firewall-cmd --add-rich-rule=\"rule family=ipv4 source address=192.168.2.0/24 reject\" --timeout=10\n\n# 允许ipv6地址为2001:db8::/64子网的主机访问dns服务，并且每小时审核一次，300秒后自动取消\n$ firewall-cmd --add-rich-rule=\"rule family=ipv6 source address=\"2001:db8::/64\" service name=\"dns\" audit limit value=\"1/h\" reject\" --timeout=300\n\n# 将来自192.168.2.0/24网段访问本机80端口的流量转发到本机的22端口\n$ firewall-cmd --zone=drop --add-rich-rule=\"rule family=ipv4 source address=192.168.2.0/24 forward-port port=80 protocol=tcp to-port=22\"\n\n# 将来自192.168.2.0/24网段访问本地80端口的流量转发到192.168.2.208主机的22端口\n$ firewall-cmd --zone=drop --add-rich-rule=\"rule family=ipv4 source address=192.168.2.0/24 forward-port port=80 protocol=tcp to-port=22 to-addr=192.168.2.208\"\n\n# 伪装，将来自局域网192.168.2.0/24网段访问外网的流量映射为网络出口公网IP，即修改源IP地址\n$ firewall-cmd --zone=drop --add-masquerade\n$ firewall-cmd --zone=drop --add-rich-rule=\"rule family=ipv4 source address=192.168.2.0/24 masquerade\"\n```\n好了，写的差不多了，工作中基本上够用了\n","source":"_posts/firewalld指令.md","raw":"---\ntitle: firewalld指令\ndate: 2020-01-01 21:21:01\ncategories:\n- CentOS\n- 网络防火墙\ntags:\n- CentOS\n- firewalld\n---\n摘录：[shuyang](https://www.cnblogs.com/wangshuyang/)的[firewalld命令集--firewall-cmd](https://www.cnblogs.com/wangshuyang/p/11941547.html)\n\n## firewalld命令集--firewall-cmd\nfirewalld是Linux上新用的防火墙软件，跟iptables差不多的工具  \nfirewall-cmd 是 firewalld的字符界面管理工具，firewalld是centos7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念。\n\nfirewalld跟iptables比起来至少有两大好处：\n1. firewalld可以动态修改单条规则，而不需要像iptables那样，在修改了规则后必须得全部刷新才可以生效。\n1. firewalld在使用上要比iptables人性化很多，即使不明白“五张表五条链”而且对TCP/IP协议也不理解也可以实现大部分功能。  \n\nfirewalld自身并不具备防火墙的功能，而是和iptables一样需要通过内核的netfilter来实现，也就是说firewalld和 iptables一样，他们的作用都是用于维护规则，而真正使用规则干活的是内核的netfilter，只不过firewalld和iptables的结 构以及使用方法不一样罢了。\n<!-- more -->\n### 命令格式\n```\n$ firewall-cmd [选项 ... ]\n```\n#### 选项\n##### 通用选项\n```\n-h, --help    # 显示帮助信息；\n-V, --version # 显示版本信息. （这个选项不能与其他选项组合）；\n-q, --quiet   # 不打印状态消息；\n```\n##### 状态选项\n```\n--state                # 显示firewalld的状态；\n--reload               # 不中断服务的重新加载；\n--complete-reload      # 中断所有连接的重新加载；\n--runtime-to-permanent # 将当前防火墙的规则永久保存；\n--check-config         # 检查配置正确性；\n```\n##### 日志选项\n```\n--get-log-denied         # 获取记录被拒绝的日志；\n--set-log-denied=<value> # 设置记录被拒绝的日志，只能为 'all','unicast','broadcast','multicast','off' 其中的一个；\n```\n### 实例\n\n#### 安装firewalld\n```\n$ yum install firewalld firewall-config\n\n$ systemctl start  firewalld # 启动\n$ systemctl stop firewalld  # 停止\n$ systemctl enable firewalld # 启用自动启动\n$ systemctl disable firewalld # 禁用自动启动\n$ systemctl status firewalld # 或者 firewall-cmd --state 查看状态\n```\n#### 关闭服务的方法\n你也可以关闭目前还不熟悉的FirewallD防火墙，而使用iptables，命令如下：\n```\n$ systemctl stop firewalld\n$ systemctl disable firewalld\n$ yum install iptables-services\n$ systemctl start iptables\n$ systemctl enable iptables\n```\n#### 配置firewalld\n```\n$ firewall-cmd --version  # 查看版本\n$ firewall-cmd --help     # 查看帮助\n```\n##### 查看设置：\n```\n$ firewall-cmd --state  # 显示状态\n$ firewall-cmd --get-active-zones  # 查看区域信息\n$ firewall-cmd --get-zone-of-interface=eth0  # 查看指定接口所属区域\n$ firewall-cmd --panic-on  # 拒绝所有包\n$ firewall-cmd --panic-off  # 取消拒绝状态\n$ firewall-cmd --query-panic  # 查看是否拒绝\n```\n##### 更新规则\n```\n$ firewall-cmd --reload # 更新防火墙规则\n$ firewall-cmd --complete-reload\n# 两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务\n```\n##### 区域的相关设置\n```\n# 将接口添加到区域，默认接口都在public\n$ firewall-cmd --zone=public --add-interface=eth0\n# 永久生效再加上 --permanent 然后reload防火墙\n\n# 设置默认接口区域，立即生效无需重启\n$ firewall-cmd --set-default-zone=public\n\n# 查看所有打开的端口：\n$ firewall-cmd --zone=dmz --list-ports\n\n# 加入一个端口到区域：\n$ firewall-cmd --zone=dmz --add-port=8080/tcp\n# 若要永久生效方法同上\n\n# 打开一个服务，类似于将端口可视化，服务需要在配置文件中添加，/etc/firewalld 目录下有services文件夹，这个不详细说了，详情参考文档\n$ firewall-cmd --zone=work --add-service=smtp\n\n# 移除服务\n$ firewall-cmd --zone=work --remove-service=smtp\n\n# 显示支持的区域列表\n$ firewall-cmd --get-zones\n\n# 设置为家庭区域\n$ firewall-cmd --set-default-zone=home\n\n# 查看当前区域\n$ firewall-cmd --get-active-zones\n\n# 设置当前区域的接口\n$ firewall-cmd --get-zone-of-interface=enp03s\n\n# 显示所有公共区域（public）\n$ firewall-cmd --zone=public --list-all\n\n# 临时修改网络接口（enp0s3）为内部区域（internal）\n$ firewall-cmd --zone=internal --change-interface=enp03s\n\n# 永久修改网络接口enp03s为内部区域（internal）\n$ firewall-cmd --permanent --zone=internal --change-interface=enp03s\n```\n##### 服务管理\n```\n# 显示服务列表  \nAmanda, FTP, Samba和TFTP等最重要的服务已经被FirewallD提供相应的服务，可以使用如下命令查看：\n\n$ firewall-cmd --get-services\n\n# 允许SSH服务通过\n$ firewall-cmd --new-service=ssh\n\n# 禁止SSH服务通过\n$ firewall-cmd --delete-service=ssh\n\n# 打开TCP的8080端口\n$ firewall-cmd --enable ports=8080/tcp\n\n# 临时允许Samba服务通过600秒\n$ firewall-cmd --enable service=samba --timeout=600\n\n# 显示当前服务\n$ firewall-cmd --list-services\n\n# 添加HTTP服务到内部区域（internal）\n$ firewall-cmd --permanent --zone=internal --add-service=http\n$ firewall-cmd --reload     # 在不改变状态的条件下重新加载防火墙\n```\n##### 端口管理\n```\n# 打开443/TCP端口\n$ firewall-cmd --add-port=443/tcp\n\n# 永久打开3690/TCP端口\n$ firewall-cmd --permanent --add-port=3690/tcp\n\n# 永久打开端口好像需要reload一下，临时打开好像不用，如果用了reload临时打开的端口就失效了\n# 其它服务也可能是这样的，这个没有测试\n$ firewall-cmd --reload\n\n# 查看防火墙，添加的端口也可以看到\n$ firewall-cmd --list-all\n```\n##### 直接模式\n```\n# FirewallD包括一种直接模式，使用它可以完成一些工作，例如打开TCP协议的9999端口\n\n$ firewall-cmd --direct -add-rule ipv4 filter INPUT 0 -p tcp --dport 9000 -j ACCEPT\n$ firewall-cmd --reload\n```\n##### 自定义服务管理\n选项\n\n（末尾带有 [P only] 的话表示该选项除了与（--permanent）之外，不能与其他选项一同使用！）\n```\n--new-service=<服务名> \n# 新建一个自定义服务 [P only]\n\n--new-service-from-file=<文件名> [--name=<服务名>]\n# 从文件中读取配置用以新建一个自定义服务 [P only]\n\n--delete-service=<服务名>\n# 删除一个已存在的服务 [P only]\n\n--load-service-defaults=<服务名>\n# Load icmptype default settings [P only]\n\n--info-service=<服务名>\n# 显示该服务的相关信息\n\n--path-service=<服务名>\n# 显示该服务的文件的相关路径 [P only]\n\n--service=<服务名> --set-description=<描述>\n# 给该服务设置描述信息 [P only]\n\n--service=<服务名> --get-description\n# 显示该服务的描述信息 [P only]\n\n--service=<服务名> --set-short=<描述>\n# 给该服务设置一个简短的描述 [P only]\n\n--service=<服务名> --get-short\n# 显示该服务的简短描述 [P only]\n\n--service=<服务名> --add-port=<端口号>[-<端口号>]/<protocol>\n# 给该服务添加一个新的端口(端口段) [P only]\n\n--service=<服务名> --remove-port=<端口号>[-<端口号>]/<protocol>\n# 从该服务上移除一个端口(端口段) [P only]\n\n--service=<服务名> --query-port=<端口号>[-<端口号>]/<protocol>\n# 查询该服务是否添加了某个端口(端口段) [P only]\n\n--service=<服务名> --get-ports\n# 显示该服务添加的所有端口 [P only]\n\n--service=<服务名> --add-protocol=<protocol>\n# 为该服务添加一个协议 [P only]\n\n--service=<服务名> --remove-protocol=<protocol>\n# 从该服务上移除一个协议 [P only]\n\n--service=<服务名> --query-protocol=<protocol>\n# 查询该服务是否添加了某个协议 [P only]\n\n--service=<服务名> --get-protocols\n# 显示该服务添加的所有协议 [P only]\n\n--service=<服务名> --add-source-port=<端口号>[-<端口号>]/<protocol>\n# 添加新的源端口(端口段)到该服务 [P only]\n\n--service=<服务名> --remove-source-port=<端口号>[-<端口号>]/<protocol>\n# 从该服务中删除源端口(端口段) [P only]\n\n--service=<服务名> --query-source-port=<端口号>[-<端口号>]/<protocol>\n# 查询该服务是否添加了某个源端口(端口段) [P only]\n\n--service=<服务名> --get-source-ports\n# 显示该服务所有源端口 [P only]\n\n--service=<服务名> --add-module=<module>\n# 为该服务添加一个模块 [P only]\n\n--service=<服务名> --remove-module=<module>\n# 为该服务移除一个模块 [P only]\n\n--service=<服务名> --query-module=<module>\n# 查询该服务是否添加了某个模块 [P only]\n\n--service=<服务名> --get-modules\n# 显示该服务添加的所有模块 [P only]\n\n--service=<服务名> --set-destination=<ipv>:<address>[/<mask>]\n# Set destination for ipv to address in service [P only]\n\n--service=<服务名> --remove-destination=<ipv>\n# Disable destination for ipv i service [P only]\n\n--service=<服务名> --query-destination=<ipv>:<address>[/<mask>]\n# Return whether destination ipv is set for service [P only]\n\n--service=<服务名> --get-destinations\n# List destinations in service [P only]\n```\n##### 控制端口 / 服务\n\n可以通过两种方式控制端口的开放，一种是指定端口号另一种是指定服务名。虽然开放 http 服务就是开放了 80 端口，但是还是不能通过端口号来关闭，也就是说通过指定服务名开放的就要通过指定服务名关闭；通过指定端口号开放的就要通过指定端口号关闭。还有一个要注意的就是指定端口的时候一定要指定是什么协议，tcp 还是 udp。知道这个之后以后就不用每次先关防火墙了，可以让防火墙真正的生效。\n```\n$ firewall-cmd --add-service=mysql        # 开放mysql端口\n$ firewall-cmd --remove-service=http      # 阻止http端口\n$ firewall-cmd --list-services            # 查看开放的服务\n$ firewall-cmd --add-port=3306/tcp        # 开放通过tcp访问3306\n$ firewall-cmd --remove-port=80tcp        # 阻止通过tcp访问3306\n$ firewall-cmd --add-port=233/udp         # 开放通过udp访问233\n$ firewall-cmd --list-ports               # 查看开放的端口\n```\n**伪装 IP**\n```\n$ firewall-cmd --query-masquerade # 检查是否允许伪装IP\n$ firewall-cmd --add-masquerade   # 允许防火墙伪装IP\n$ firewall-cmd --remove-masquerade# 禁止防火墙伪装IP\n```\n**端口转发**  \n\n端口转发可以将指定地址访问指定的端口时，将流量转发至指定地址的指定端口。转发的目的如果不指定 ip 的话就默认为本机，如果指定了 ip 却没指定端口，则默认使用来源端口。 如果配置好端口转发之后不能用，可以检查下面两个问题：\n\n1. 比如我将 80 端口转发至 8080 端口，首先检查本地的 80 端口和目标的 8080 端口是否开放监听了\n1. 其次检查是否允许伪装 IP，没允许的话要开启伪装 IP\n```\n$ firewall-cmd --add-forward-port=port=80:proto=tcp:toport=8080   \n# 将80端口的流量转发至8080\n\n$ firewall-cmd --add-forward-port=port=80:proto=tcp:toaddr=192.168.0.1 \n# 将80端口的流量转发至192.168.0.1\n\n$ firewall-cmd --add-forward-port=port=80:proto=tcp:toaddr=192.168.0.1:toport=8080 \n# 将80端口的流量转发至192.168.0.1的8080端口\n```\n当我们想把某个端口隐藏起来的时候，就可以在防火墙上阻止那个端口访问，然后再开一个不规则的端口，之后配置防火墙的端口转发，将流量转发过去。  \n\n端口转发还可以做流量分发，一个防火墙拖着好多台运行着不同服务的机器，然后用防火墙将不同端口的流量转发至不同机器。  \n \n**接下来我们来看富规则的设置，即rich rules**\n```\n# 允许192.168.2.208主机的所有流量\n$ firewall-cmd --zone=drop --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.2.208\" accept\"\n\n# 允许192.168.2.208主机的icmp协议，即允许192.168.2.208主机ping\n$ firewall-cmd --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.2.208\" protocol value=\"icmp\" accept\"\n\n# 取消允许192.168.2.208主机的所有流量\n$ firewall-cmd --zone=drop --remove-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.2.208\" accept\"\n\n# 允许192.168.2.208主机访问ssh服务\n$ firewall-cmd --zone=drop --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.2.208\" service name=\"ssh\" accept\"\n\n# 禁止192.168.2.208访问https服务，并返回错误信息\n$ firewall-cmd --zone=drop --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.2.208\" service name=\"https\" reject\"\n注：如果是drop的话是直接丢弃，会返回timeout（连接超时）\n\n# 允许192.168.2.0/24网段的主机访问22端口\n$ firewall-cmd --zone=drop --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.2.0/24\" port protocol=\"tcp\" port=\"22\" accept\"\n\n# 每分钟允许2个新连接访问ftp服务\n$ firewall-cmd --add-rich-rule=\"rule service name=ftp limit value=2/m accept\"\n\n# 允许新的ipv4和ipv6连接ftp，并使用日志和审核，每分钟允许访问一次\n$ firewall-cmd --add-rich-rule=\"rule service name=ftp log limit value=\"1/m\" audit accept\"\n\n# 拒绝来自192.168.2.0/24网段的连接，10秒后自动取消\n$ firewall-cmd --add-rich-rule=\"rule family=ipv4 source address=192.168.2.0/24 reject\" --timeout=10\n\n# 允许ipv6地址为2001:db8::/64子网的主机访问dns服务，并且每小时审核一次，300秒后自动取消\n$ firewall-cmd --add-rich-rule=\"rule family=ipv6 source address=\"2001:db8::/64\" service name=\"dns\" audit limit value=\"1/h\" reject\" --timeout=300\n\n# 将来自192.168.2.0/24网段访问本机80端口的流量转发到本机的22端口\n$ firewall-cmd --zone=drop --add-rich-rule=\"rule family=ipv4 source address=192.168.2.0/24 forward-port port=80 protocol=tcp to-port=22\"\n\n# 将来自192.168.2.0/24网段访问本地80端口的流量转发到192.168.2.208主机的22端口\n$ firewall-cmd --zone=drop --add-rich-rule=\"rule family=ipv4 source address=192.168.2.0/24 forward-port port=80 protocol=tcp to-port=22 to-addr=192.168.2.208\"\n\n# 伪装，将来自局域网192.168.2.0/24网段访问外网的流量映射为网络出口公网IP，即修改源IP地址\n$ firewall-cmd --zone=drop --add-masquerade\n$ firewall-cmd --zone=drop --add-rich-rule=\"rule family=ipv4 source address=192.168.2.0/24 masquerade\"\n```\n好了，写的差不多了，工作中基本上够用了\n","slug":"firewalld指令","published":1,"updated":"2021-09-21T01:19:04.421Z","_id":"ckttecqzu000i1kuv4mlv9rxm","comments":1,"layout":"post","photos":[],"link":"","content":"<p>摘录：<a href=\"https://www.cnblogs.com/wangshuyang/\">shuyang</a>的<a href=\"https://www.cnblogs.com/wangshuyang/p/11941547.html\">firewalld命令集–firewall-cmd</a></p>\n<h2 id=\"firewalld命令集–firewall-cmd\"><a href=\"#firewalld命令集–firewall-cmd\" class=\"headerlink\" title=\"firewalld命令集–firewall-cmd\"></a>firewalld命令集–firewall-cmd</h2><p>firewalld是Linux上新用的防火墙软件，跟iptables差不多的工具<br>firewall-cmd 是 firewalld的字符界面管理工具，firewalld是centos7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念。</p>\n<p>firewalld跟iptables比起来至少有两大好处：</p>\n<ol>\n<li>firewalld可以动态修改单条规则，而不需要像iptables那样，在修改了规则后必须得全部刷新才可以生效。</li>\n<li>firewalld在使用上要比iptables人性化很多，即使不明白“五张表五条链”而且对TCP/IP协议也不理解也可以实现大部分功能。  </li>\n</ol>\n<p>firewalld自身并不具备防火墙的功能，而是和iptables一样需要通过内核的netfilter来实现，也就是说firewalld和 iptables一样，他们的作用都是用于维护规则，而真正使用规则干活的是内核的netfilter，只不过firewalld和iptables的结 构以及使用方法不一样罢了。</p>\n<span id=\"more\"></span>\n<h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> [选项 ... ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h4><h5 id=\"通用选项\"><a href=\"#通用选项\" class=\"headerlink\" title=\"通用选项\"></a>通用选项</h5><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"string\">h</span>, <span class=\"built_in\">--help</span>    <span class=\"comment\"># 显示帮助信息；</span></span><br><span class=\"line\">-<span class=\"string\">V</span>, <span class=\"built_in\">--version</span> <span class=\"comment\"># 显示版本信息. （这个选项不能与其他选项组合）；</span></span><br><span class=\"line\">-<span class=\"string\">q</span>, <span class=\"built_in\">--quiet</span>   <span class=\"comment\"># 不打印状态消息；</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"状态选项\"><a href=\"#状态选项\" class=\"headerlink\" title=\"状态选项\"></a>状态选项</h5><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">--state</span>                <span class=\"comment\"># 显示firewalld的状态；</span></span><br><span class=\"line\"><span class=\"built_in\">--reload</span>               <span class=\"comment\"># 不中断服务的重新加载；</span></span><br><span class=\"line\"><span class=\"built_in\">--complete-reload</span>      <span class=\"comment\"># 中断所有连接的重新加载；</span></span><br><span class=\"line\"><span class=\"built_in\">--runtime-to-permanent</span> <span class=\"comment\"># 将当前防火墙的规则永久保存；</span></span><br><span class=\"line\"><span class=\"built_in\">--check-config</span>         <span class=\"comment\"># 检查配置正确性；</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"日志选项\"><a href=\"#日志选项\" class=\"headerlink\" title=\"日志选项\"></a>日志选项</h5><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--<span class=\"built_in\">get</span>-<span class=\"built_in\">log</span>-denied         # 获取记录被拒绝的日志；</span><br><span class=\"line\">--<span class=\"keyword\">set</span>-<span class=\"built_in\">log</span>-denied=<span class=\"symbol\">&lt;value&gt;</span> # 设置记录被拒绝的日志，只能为 <span class=\"string\">&#x27;all&#x27;</span>,<span class=\"string\">&#x27;unicast&#x27;</span>,<span class=\"string\">&#x27;broadcast&#x27;</span>,<span class=\"string\">&#x27;multicast&#x27;</span>,<span class=\"string\">&#x27;off&#x27;</span> 其中的一个；</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><h4 id=\"安装firewalld\"><a href=\"#安装firewalld\" class=\"headerlink\" title=\"安装firewalld\"></a>安装firewalld</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yum install firewalld firewall-config</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl start  firewalld <span class=\"comment\"># 启动</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl stop firewalld  <span class=\"comment\"># 停止</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl <span class=\"built_in\">enable</span> firewalld <span class=\"comment\"># 启用自动启动</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl <span class=\"built_in\">disable</span> firewalld <span class=\"comment\"># 禁用自动启动</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl status firewalld <span class=\"comment\"># 或者 firewall-cmd --state 查看状态</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"关闭服务的方法\"><a href=\"#关闭服务的方法\" class=\"headerlink\" title=\"关闭服务的方法\"></a>关闭服务的方法</h4><p>你也可以关闭目前还不熟悉的FirewallD防火墙，而使用iptables，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl stop firewalld</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl <span class=\"built_in\">disable</span> firewalld</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yum install iptables-services</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl start iptables</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl <span class=\"built_in\">enable</span> iptables</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"配置firewalld\"><a href=\"#配置firewalld\" class=\"headerlink\" title=\"配置firewalld\"></a>配置firewalld</h4><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --version  <span class=\"comment\"># 查看版本</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --<span class=\"built_in\">help</span>     <span class=\"comment\"># 查看帮助</span></span></span><br></pre></td></tr></table></figure>\n<h5 id=\"查看设置：\"><a href=\"#查看设置：\" class=\"headerlink\" title=\"查看设置：\"></a>查看设置：</h5><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --state  <span class=\"comment\"># 显示状态</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --get-active-zones  <span class=\"comment\"># 查看区域信息</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --get-zone-of-interface=eth0  <span class=\"comment\"># 查看指定接口所属区域</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --panic-on  <span class=\"comment\"># 拒绝所有包</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --panic-off  <span class=\"comment\"># 取消拒绝状态</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --query-panic  <span class=\"comment\"># 查看是否拒绝</span></span></span><br></pre></td></tr></table></figure>\n<h5 id=\"更新规则\"><a href=\"#更新规则\" class=\"headerlink\" title=\"更新规则\"></a>更新规则</h5><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --reload <span class=\"comment\"># 更新防火墙规则</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --complete-reload</span></span><br><span class=\"line\"><span class=\"comment\"># 两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"区域的相关设置\"><a href=\"#区域的相关设置\" class=\"headerlink\" title=\"区域的相关设置\"></a>区域的相关设置</h5><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将接口添加到区域，默认接口都在public</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=public <span class=\"attribute\">--add-interface</span>=eth0</span><br><span class=\"line\"><span class=\"comment\"># 永久生效再加上 --permanent 然后reload防火墙</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置默认接口区域，立即生效无需重启</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--set-default-zone</span>=public</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有打开的端口：</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=dmz --list-ports</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加入一个端口到区域：</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=dmz <span class=\"attribute\">--add-port</span>=8080/tcp</span><br><span class=\"line\"><span class=\"comment\"># 若要永久生效方法同上</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开一个服务，类似于将端口可视化，服务需要在配置文件中添加，/etc/firewalld 目录下有services文件夹，这个不详细说了，详情参考文档</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=work <span class=\"attribute\">--add-service</span>=smtp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移除服务</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=work <span class=\"attribute\">--remove-service</span>=smtp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示支持的区域列表</span></span><br><span class=\"line\">$ firewall-cmd --get-zones</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置为家庭区域</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--set-default-zone</span>=home</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前区域</span></span><br><span class=\"line\">$ firewall-cmd --get-active-zones</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置当前区域的接口</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--get-zone-of-interface</span>=enp03s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有公共区域（public）</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=public --list-all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 临时修改网络接口（enp0s3）为内部区域（internal）</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=internal <span class=\"attribute\">--change-interface</span>=enp03s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 永久修改网络接口enp03s为内部区域（internal）</span></span><br><span class=\"line\">$ firewall-cmd --permanent <span class=\"attribute\">--zone</span>=internal <span class=\"attribute\">--change-interface</span>=enp03s</span><br></pre></td></tr></table></figure>\n<h5 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h5><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示服务列表  </span></span><br><span class=\"line\">Amanda, FTP, Samba和TFTP等最重要的服务已经被FirewallD提供相应的服务，可以使用如下命令查看：</span><br><span class=\"line\"></span><br><span class=\"line\">$ firewall-cmd --get-services</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 允许SSH服务通过</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--new-service</span>=ssh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 禁止SSH服务通过</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--delete-service</span>=ssh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开TCP的8080端口</span></span><br><span class=\"line\">$ firewall-cmd --<span class=\"builtin-name\">enable</span> <span class=\"attribute\">ports</span>=8080/tcp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 临时允许Samba服务通过600秒</span></span><br><span class=\"line\">$ firewall-cmd --<span class=\"builtin-name\">enable</span> <span class=\"attribute\">service</span>=samba <span class=\"attribute\">--timeout</span>=600</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前服务</span></span><br><span class=\"line\">$ firewall-cmd --list-services</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加HTTP服务到内部区域（internal）</span></span><br><span class=\"line\">$ firewall-cmd --permanent <span class=\"attribute\">--zone</span>=internal <span class=\"attribute\">--add-service</span>=http</span><br><span class=\"line\">$ firewall-cmd --reload     # 在不改变状态的条件下重新加载防火墙</span><br></pre></td></tr></table></figure>\n<h5 id=\"端口管理\"><a href=\"#端口管理\" class=\"headerlink\" title=\"端口管理\"></a>端口管理</h5><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开443/TCP端口</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"params\">--add-port=443/tcp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 永久打开3690/TCP端口</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"params\">--permanent</span> <span class=\"params\">--add-port=3690/tcp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 永久打开端口好像需要reload一下，临时打开好像不用，如果用了reload临时打开的端口就失效了</span></span><br><span class=\"line\"><span class=\"comment\"># 其它服务也可能是这样的，这个没有测试</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"params\">--reload</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看防火墙，添加的端口也可以看到</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"params\">--list-all</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"直接模式\"><a href=\"#直接模式\" class=\"headerlink\" title=\"直接模式\"></a>直接模式</h5><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># FirewallD包括一种直接模式，使用它可以完成一些工作，例如打开TCP协议的9999端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ firewall-cmd <span class=\"params\">--direct</span> -add-rule ipv4 filter INPUT 0 -p tcp <span class=\"params\">--dport</span> 9000 -j ACCEPT</span><br><span class=\"line\">$ firewall-cmd <span class=\"params\">--reload</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"自定义服务管理\"><a href=\"#自定义服务管理\" class=\"headerlink\" title=\"自定义服务管理\"></a>自定义服务管理</h5><p>选项</p>\n<p>（末尾带有 [P only] 的话表示该选项除了与（–permanent）之外，不能与其他选项一同使用！）</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">--new-service</span>=&lt;服务名&gt; </span><br><span class=\"line\"><span class=\"comment\"># 新建一个自定义服务 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--new-service-from-file</span>=&lt;文件名&gt; [<span class=\"attribute\">--name</span>=&lt;服务名&gt;]</span><br><span class=\"line\"><span class=\"comment\"># 从文件中读取配置用以新建一个自定义服务 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--delete-service</span>=&lt;服务名&gt;</span><br><span class=\"line\"><span class=\"comment\"># 删除一个已存在的服务 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--load-service-defaults</span>=&lt;服务名&gt;</span><br><span class=\"line\"><span class=\"comment\"># Load icmptype default settings [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--info-service</span>=&lt;服务名&gt;</span><br><span class=\"line\"><span class=\"comment\"># 显示该服务的相关信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--path-service</span>=&lt;服务名&gt;</span><br><span class=\"line\"><span class=\"comment\"># 显示该服务的文件的相关路径 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--set-description</span>=&lt;描述&gt;</span><br><span class=\"line\"><span class=\"comment\"># 给该服务设置描述信息 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; --get-description</span><br><span class=\"line\"><span class=\"comment\"># 显示该服务的描述信息 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--set-short</span>=&lt;描述&gt;</span><br><span class=\"line\"><span class=\"comment\"># 给该服务设置一个简短的描述 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; --get-short</span><br><span class=\"line\"><span class=\"comment\"># 显示该服务的简短描述 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--add-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 给该服务添加一个新的端口(端口段) [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--remove-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 从该服务上移除一个端口(端口段) [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--query-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 查询该服务是否添加了某个端口(端口段) [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; --get-ports</span><br><span class=\"line\"><span class=\"comment\"># 显示该服务添加的所有端口 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--add-protocol</span>=&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 为该服务添加一个协议 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--remove-protocol</span>=&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 从该服务上移除一个协议 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--query-protocol</span>=&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 查询该服务是否添加了某个协议 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; --get-protocols</span><br><span class=\"line\"><span class=\"comment\"># 显示该服务添加的所有协议 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--add-source-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 添加新的源端口(端口段)到该服务 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--remove-source-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 从该服务中删除源端口(端口段) [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--query-source-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 查询该服务是否添加了某个源端口(端口段) [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; --get-source-ports</span><br><span class=\"line\"><span class=\"comment\"># 显示该服务所有源端口 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--add-module</span>=&lt;module&gt;</span><br><span class=\"line\"><span class=\"comment\"># 为该服务添加一个模块 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--remove-module</span>=&lt;module&gt;</span><br><span class=\"line\"><span class=\"comment\"># 为该服务移除一个模块 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--query-module</span>=&lt;module&gt;</span><br><span class=\"line\"><span class=\"comment\"># 查询该服务是否添加了某个模块 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; --get-modules</span><br><span class=\"line\"><span class=\"comment\"># 显示该服务添加的所有模块 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--set-destination</span>=&lt;ipv&gt;:&lt;address&gt;[/&lt;mask&gt;]</span><br><span class=\"line\"><span class=\"comment\"># Set destination for ipv to address in service [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--remove-destination</span>=&lt;ipv&gt;</span><br><span class=\"line\"><span class=\"comment\"># Disable destination for ipv i service [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--query-destination</span>=&lt;ipv&gt;:&lt;address&gt;[/&lt;mask&gt;]</span><br><span class=\"line\"><span class=\"comment\"># Return whether destination ipv is set for service [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; --get-destinations</span><br><span class=\"line\"><span class=\"comment\"># List destinations in service [P only]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"控制端口-服务\"><a href=\"#控制端口-服务\" class=\"headerlink\" title=\"控制端口 / 服务\"></a>控制端口 / 服务</h5><p>可以通过两种方式控制端口的开放，一种是指定端口号另一种是指定服务名。虽然开放 http 服务就是开放了 80 端口，但是还是不能通过端口号来关闭，也就是说通过指定服务名开放的就要通过指定服务名关闭；通过指定端口号开放的就要通过指定端口号关闭。还有一个要注意的就是指定端口的时候一定要指定是什么协议，tcp 还是 udp。知道这个之后以后就不用每次先关防火墙了，可以让防火墙真正的生效。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --add-service=mysql        <span class=\"comment\"># 开放mysql端口</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --remove-service=http      <span class=\"comment\"># 阻止http端口</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --list-services            <span class=\"comment\"># 查看开放的服务</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --add-port=3306/tcp        <span class=\"comment\"># 开放通过tcp访问3306</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --remove-port=80tcp        <span class=\"comment\"># 阻止通过tcp访问3306</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --add-port=233/udp         <span class=\"comment\"># 开放通过udp访问233</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --list-ports               <span class=\"comment\"># 查看开放的端口</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>伪装 IP</strong></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --query-masquerade <span class=\"comment\"># 检查是否允许伪装IP</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --add-masquerade   <span class=\"comment\"># 允许防火墙伪装IP</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --remove-masquerade<span class=\"comment\"># 禁止防火墙伪装IP</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>端口转发</strong>  </p>\n<p>端口转发可以将指定地址访问指定的端口时，将流量转发至指定地址的指定端口。转发的目的如果不指定 ip 的话就默认为本机，如果指定了 ip 却没指定端口，则默认使用来源端口。 如果配置好端口转发之后不能用，可以检查下面两个问题：</p>\n<ol>\n<li>比如我将 80 端口转发至 8080 端口，首先检查本地的 80 端口和目标的 8080 端口是否开放监听了</li>\n<li>其次检查是否允许伪装 IP，没允许的话要开启伪装 IP<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>firewall-cmd --add-forward-port=port=<span class=\"number\">80</span><span class=\"symbol\">:proto=tcp</span><span class=\"symbol\">:toport=</span><span class=\"number\">8080</span>   </span><br><span class=\"line\"><span class=\"comment\"># 将80端口的流量转发至8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ </span>firewall-cmd --add-forward-port=port=<span class=\"number\">80</span><span class=\"symbol\">:proto=tcp</span><span class=\"symbol\">:toaddr=</span><span class=\"number\">192.168</span>.0.<span class=\"number\">1</span> </span><br><span class=\"line\"><span class=\"comment\"># 将80端口的流量转发至192.168.0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ </span>firewall-cmd --add-forward-port=port=<span class=\"number\">80</span><span class=\"symbol\">:proto=tcp</span><span class=\"symbol\">:toaddr=</span><span class=\"number\">192.168</span>.0.<span class=\"number\">1</span><span class=\"symbol\">:toport=</span><span class=\"number\">8080</span> </span><br><span class=\"line\"><span class=\"comment\"># 将80端口的流量转发至192.168.0.1的8080端口</span></span><br></pre></td></tr></table></figure>\n当我们想把某个端口隐藏起来的时候，就可以在防火墙上阻止那个端口访问，然后再开一个不规则的端口，之后配置防火墙的端口转发，将流量转发过去。  </li>\n</ol>\n<p>端口转发还可以做流量分发，一个防火墙拖着好多台运行着不同服务的机器，然后用防火墙将不同端口的流量转发至不同机器。  </p>\n<p><strong>接下来我们来看富规则的设置，即rich rules</strong></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 允许192.168.2.208主机的所有流量</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=drop <span class=\"attribute\">--add-rich-rule</span>=<span class=\"string\">&quot;rule family=&quot;</span>ipv4&quot; source <span class=\"attribute\">address</span>=<span class=\"string\">&quot;192.168.2.208&quot;</span> accept<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 允许192.168.2.208主机的icmp协议，即允许192.168.2.208主机ping</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --add-rich-rule=&quot;</span>rule <span class=\"attribute\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span> source <span class=\"attribute\">address</span>=<span class=\"string\">&quot;192.168.2.208&quot;</span> protocol <span class=\"attribute\">value</span>=<span class=\"string\">&quot;icmp&quot;</span> accept<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 取消允许192.168.2.208主机的所有流量</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --zone=drop --remove-rich-rule=&quot;</span>rule <span class=\"attribute\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span> source <span class=\"attribute\">address</span>=<span class=\"string\">&quot;192.168.2.208&quot;</span> accept<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 允许192.168.2.208主机访问ssh服务</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --zone=drop --add-rich-rule=&quot;</span>rule <span class=\"attribute\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span> source <span class=\"attribute\">address</span>=<span class=\"string\">&quot;192.168.2.208&quot;</span><span class=\"built_in\"> service </span><span class=\"attribute\">name</span>=<span class=\"string\">&quot;ssh&quot;</span> accept<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 禁止192.168.2.208访问https服务，并返回错误信息</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --zone=drop --add-rich-rule=&quot;</span>rule <span class=\"attribute\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span> source <span class=\"attribute\">address</span>=<span class=\"string\">&quot;192.168.2.208&quot;</span><span class=\"built_in\"> service </span><span class=\"attribute\">name</span>=<span class=\"string\">&quot;https&quot;</span> reject<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">注：如果是drop的话是直接丢弃，会返回timeout（连接超时）</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 允许192.168.2.0/24网段的主机访问22端口</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --zone=drop --add-rich-rule=&quot;</span>rule <span class=\"attribute\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span> source <span class=\"attribute\">address</span>=<span class=\"string\">&quot;192.168.2.0/24&quot;</span><span class=\"built_in\"> port </span><span class=\"attribute\">protocol</span>=<span class=\"string\">&quot;tcp&quot;</span> <span class=\"attribute\">port</span>=<span class=\"string\">&quot;22&quot;</span> accept<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 每分钟允许2个新连接访问ftp服务</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --add-rich-rule=&quot;</span>rule<span class=\"built_in\"> service </span><span class=\"attribute\">name</span>=ftp limit <span class=\"attribute\">value</span>=2/m accept<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 允许新的ipv4和ipv6连接ftp，并使用日志和审核，每分钟允许访问一次</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --add-rich-rule=&quot;</span>rule<span class=\"built_in\"> service </span><span class=\"attribute\">name</span>=ftp log limit <span class=\"attribute\">value</span>=<span class=\"string\">&quot;1/m&quot;</span> audit accept<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 拒绝来自192.168.2.0/24网段的连接，10秒后自动取消</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --add-rich-rule=&quot;</span>rule <span class=\"attribute\">family</span>=ipv4 source <span class=\"attribute\">address</span>=192.168.2.0/24 reject<span class=\"string\">&quot; --timeout=10</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 允许ipv6地址为2001:db8::/64子网的主机访问dns服务，并且每小时审核一次，300秒后自动取消</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --add-rich-rule=&quot;</span>rule <span class=\"attribute\">family</span>=ipv6 source <span class=\"attribute\">address</span>=<span class=\"string\">&quot;2001:db8::/64&quot;</span><span class=\"built_in\"> service </span><span class=\"attribute\">name</span>=<span class=\"string\">&quot;dns&quot;</span> audit limit <span class=\"attribute\">value</span>=<span class=\"string\">&quot;1/h&quot;</span> reject<span class=\"string\">&quot; --timeout=300</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 将来自192.168.2.0/24网段访问本机80端口的流量转发到本机的22端口</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --zone=drop --add-rich-rule=&quot;</span>rule <span class=\"attribute\">family</span>=ipv4 source <span class=\"attribute\">address</span>=192.168.2.0/24 forward-port <span class=\"attribute\">port</span>=80 <span class=\"attribute\">protocol</span>=tcp <span class=\"attribute\">to-port</span>=22&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将来自192.168.2.0/24网段访问本地80端口的流量转发到192.168.2.208主机的22端口</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=drop <span class=\"attribute\">--add-rich-rule</span>=<span class=\"string\">&quot;rule family=ipv4 source address=192.168.2.0/24 forward-port port=80 protocol=tcp to-port=22 to-addr=192.168.2.208&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 伪装，将来自局域网192.168.2.0/24网段访问外网的流量映射为网络出口公网IP，即修改源IP地址</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=drop --add-masquerade</span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=drop <span class=\"attribute\">--add-rich-rule</span>=<span class=\"string\">&quot;rule family=ipv4 source address=192.168.2.0/24 masquerade&quot;</span></span><br></pre></td></tr></table></figure>\n<p>好了，写的差不多了，工作中基本上够用了</p>\n","site":{"data":{}},"excerpt":"<p>摘录：<a href=\"https://www.cnblogs.com/wangshuyang/\">shuyang</a>的<a href=\"https://www.cnblogs.com/wangshuyang/p/11941547.html\">firewalld命令集–firewall-cmd</a></p>\n<h2 id=\"firewalld命令集–firewall-cmd\"><a href=\"#firewalld命令集–firewall-cmd\" class=\"headerlink\" title=\"firewalld命令集–firewall-cmd\"></a>firewalld命令集–firewall-cmd</h2><p>firewalld是Linux上新用的防火墙软件，跟iptables差不多的工具<br>firewall-cmd 是 firewalld的字符界面管理工具，firewalld是centos7的一大特性，最大的好处有两个：支持动态更新，不用重启服务；第二个就是加入了防火墙的“zone”概念。</p>\n<p>firewalld跟iptables比起来至少有两大好处：</p>\n<ol>\n<li>firewalld可以动态修改单条规则，而不需要像iptables那样，在修改了规则后必须得全部刷新才可以生效。</li>\n<li>firewalld在使用上要比iptables人性化很多，即使不明白“五张表五条链”而且对TCP/IP协议也不理解也可以实现大部分功能。  </li>\n</ol>\n<p>firewalld自身并不具备防火墙的功能，而是和iptables一样需要通过内核的netfilter来实现，也就是说firewalld和 iptables一样，他们的作用都是用于维护规则，而真正使用规则干活的是内核的netfilter，只不过firewalld和iptables的结 构以及使用方法不一样罢了。</p>","more":"<h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> [选项 ... ]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h4><h5 id=\"通用选项\"><a href=\"#通用选项\" class=\"headerlink\" title=\"通用选项\"></a>通用选项</h5><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-<span class=\"string\">h</span>, <span class=\"built_in\">--help</span>    <span class=\"comment\"># 显示帮助信息；</span></span><br><span class=\"line\">-<span class=\"string\">V</span>, <span class=\"built_in\">--version</span> <span class=\"comment\"># 显示版本信息. （这个选项不能与其他选项组合）；</span></span><br><span class=\"line\">-<span class=\"string\">q</span>, <span class=\"built_in\">--quiet</span>   <span class=\"comment\"># 不打印状态消息；</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"状态选项\"><a href=\"#状态选项\" class=\"headerlink\" title=\"状态选项\"></a>状态选项</h5><figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">--state</span>                <span class=\"comment\"># 显示firewalld的状态；</span></span><br><span class=\"line\"><span class=\"built_in\">--reload</span>               <span class=\"comment\"># 不中断服务的重新加载；</span></span><br><span class=\"line\"><span class=\"built_in\">--complete-reload</span>      <span class=\"comment\"># 中断所有连接的重新加载；</span></span><br><span class=\"line\"><span class=\"built_in\">--runtime-to-permanent</span> <span class=\"comment\"># 将当前防火墙的规则永久保存；</span></span><br><span class=\"line\"><span class=\"built_in\">--check-config</span>         <span class=\"comment\"># 检查配置正确性；</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"日志选项\"><a href=\"#日志选项\" class=\"headerlink\" title=\"日志选项\"></a>日志选项</h5><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--<span class=\"built_in\">get</span>-<span class=\"built_in\">log</span>-denied         # 获取记录被拒绝的日志；</span><br><span class=\"line\">--<span class=\"keyword\">set</span>-<span class=\"built_in\">log</span>-denied=<span class=\"symbol\">&lt;value&gt;</span> # 设置记录被拒绝的日志，只能为 <span class=\"string\">&#x27;all&#x27;</span>,<span class=\"string\">&#x27;unicast&#x27;</span>,<span class=\"string\">&#x27;broadcast&#x27;</span>,<span class=\"string\">&#x27;multicast&#x27;</span>,<span class=\"string\">&#x27;off&#x27;</span> 其中的一个；</span><br></pre></td></tr></table></figure>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><h4 id=\"安装firewalld\"><a href=\"#安装firewalld\" class=\"headerlink\" title=\"安装firewalld\"></a>安装firewalld</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yum install firewalld firewall-config</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl start  firewalld <span class=\"comment\"># 启动</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl stop firewalld  <span class=\"comment\"># 停止</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl <span class=\"built_in\">enable</span> firewalld <span class=\"comment\"># 启用自动启动</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl <span class=\"built_in\">disable</span> firewalld <span class=\"comment\"># 禁用自动启动</span></span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl status firewalld <span class=\"comment\"># 或者 firewall-cmd --state 查看状态</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"关闭服务的方法\"><a href=\"#关闭服务的方法\" class=\"headerlink\" title=\"关闭服务的方法\"></a>关闭服务的方法</h4><p>你也可以关闭目前还不熟悉的FirewallD防火墙，而使用iptables，命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl stop firewalld</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl <span class=\"built_in\">disable</span> firewalld</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yum install iptables-services</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl start iptables</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> systemctl <span class=\"built_in\">enable</span> iptables</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"配置firewalld\"><a href=\"#配置firewalld\" class=\"headerlink\" title=\"配置firewalld\"></a>配置firewalld</h4><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --version  <span class=\"comment\"># 查看版本</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --<span class=\"built_in\">help</span>     <span class=\"comment\"># 查看帮助</span></span></span><br></pre></td></tr></table></figure>\n<h5 id=\"查看设置：\"><a href=\"#查看设置：\" class=\"headerlink\" title=\"查看设置：\"></a>查看设置：</h5><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --state  <span class=\"comment\"># 显示状态</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --get-active-zones  <span class=\"comment\"># 查看区域信息</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --get-zone-of-interface=eth0  <span class=\"comment\"># 查看指定接口所属区域</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --panic-on  <span class=\"comment\"># 拒绝所有包</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --panic-off  <span class=\"comment\"># 取消拒绝状态</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --query-panic  <span class=\"comment\"># 查看是否拒绝</span></span></span><br></pre></td></tr></table></figure>\n<h5 id=\"更新规则\"><a href=\"#更新规则\" class=\"headerlink\" title=\"更新规则\"></a>更新规则</h5><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --reload <span class=\"comment\"># 更新防火墙规则</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --complete-reload</span></span><br><span class=\"line\"><span class=\"comment\"># 两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"区域的相关设置\"><a href=\"#区域的相关设置\" class=\"headerlink\" title=\"区域的相关设置\"></a>区域的相关设置</h5><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将接口添加到区域，默认接口都在public</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=public <span class=\"attribute\">--add-interface</span>=eth0</span><br><span class=\"line\"><span class=\"comment\"># 永久生效再加上 --permanent 然后reload防火墙</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置默认接口区域，立即生效无需重启</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--set-default-zone</span>=public</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有打开的端口：</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=dmz --list-ports</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 加入一个端口到区域：</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=dmz <span class=\"attribute\">--add-port</span>=8080/tcp</span><br><span class=\"line\"><span class=\"comment\"># 若要永久生效方法同上</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开一个服务，类似于将端口可视化，服务需要在配置文件中添加，/etc/firewalld 目录下有services文件夹，这个不详细说了，详情参考文档</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=work <span class=\"attribute\">--add-service</span>=smtp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移除服务</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=work <span class=\"attribute\">--remove-service</span>=smtp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示支持的区域列表</span></span><br><span class=\"line\">$ firewall-cmd --get-zones</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置为家庭区域</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--set-default-zone</span>=home</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前区域</span></span><br><span class=\"line\">$ firewall-cmd --get-active-zones</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置当前区域的接口</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--get-zone-of-interface</span>=enp03s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有公共区域（public）</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=public --list-all</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 临时修改网络接口（enp0s3）为内部区域（internal）</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=internal <span class=\"attribute\">--change-interface</span>=enp03s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 永久修改网络接口enp03s为内部区域（internal）</span></span><br><span class=\"line\">$ firewall-cmd --permanent <span class=\"attribute\">--zone</span>=internal <span class=\"attribute\">--change-interface</span>=enp03s</span><br></pre></td></tr></table></figure>\n<h5 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h5><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示服务列表  </span></span><br><span class=\"line\">Amanda, FTP, Samba和TFTP等最重要的服务已经被FirewallD提供相应的服务，可以使用如下命令查看：</span><br><span class=\"line\"></span><br><span class=\"line\">$ firewall-cmd --get-services</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 允许SSH服务通过</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--new-service</span>=ssh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 禁止SSH服务通过</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--delete-service</span>=ssh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开TCP的8080端口</span></span><br><span class=\"line\">$ firewall-cmd --<span class=\"builtin-name\">enable</span> <span class=\"attribute\">ports</span>=8080/tcp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 临时允许Samba服务通过600秒</span></span><br><span class=\"line\">$ firewall-cmd --<span class=\"builtin-name\">enable</span> <span class=\"attribute\">service</span>=samba <span class=\"attribute\">--timeout</span>=600</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示当前服务</span></span><br><span class=\"line\">$ firewall-cmd --list-services</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加HTTP服务到内部区域（internal）</span></span><br><span class=\"line\">$ firewall-cmd --permanent <span class=\"attribute\">--zone</span>=internal <span class=\"attribute\">--add-service</span>=http</span><br><span class=\"line\">$ firewall-cmd --reload     # 在不改变状态的条件下重新加载防火墙</span><br></pre></td></tr></table></figure>\n<h5 id=\"端口管理\"><a href=\"#端口管理\" class=\"headerlink\" title=\"端口管理\"></a>端口管理</h5><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打开443/TCP端口</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"params\">--add-port=443/tcp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 永久打开3690/TCP端口</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"params\">--permanent</span> <span class=\"params\">--add-port=3690/tcp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 永久打开端口好像需要reload一下，临时打开好像不用，如果用了reload临时打开的端口就失效了</span></span><br><span class=\"line\"><span class=\"comment\"># 其它服务也可能是这样的，这个没有测试</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"params\">--reload</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看防火墙，添加的端口也可以看到</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"params\">--list-all</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"直接模式\"><a href=\"#直接模式\" class=\"headerlink\" title=\"直接模式\"></a>直接模式</h5><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># FirewallD包括一种直接模式，使用它可以完成一些工作，例如打开TCP协议的9999端口</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ firewall-cmd <span class=\"params\">--direct</span> -add-rule ipv4 filter INPUT 0 -p tcp <span class=\"params\">--dport</span> 9000 -j ACCEPT</span><br><span class=\"line\">$ firewall-cmd <span class=\"params\">--reload</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"自定义服务管理\"><a href=\"#自定义服务管理\" class=\"headerlink\" title=\"自定义服务管理\"></a>自定义服务管理</h5><p>选项</p>\n<p>（末尾带有 [P only] 的话表示该选项除了与（–permanent）之外，不能与其他选项一同使用！）</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">--new-service</span>=&lt;服务名&gt; </span><br><span class=\"line\"><span class=\"comment\"># 新建一个自定义服务 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--new-service-from-file</span>=&lt;文件名&gt; [<span class=\"attribute\">--name</span>=&lt;服务名&gt;]</span><br><span class=\"line\"><span class=\"comment\"># 从文件中读取配置用以新建一个自定义服务 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--delete-service</span>=&lt;服务名&gt;</span><br><span class=\"line\"><span class=\"comment\"># 删除一个已存在的服务 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--load-service-defaults</span>=&lt;服务名&gt;</span><br><span class=\"line\"><span class=\"comment\"># Load icmptype default settings [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--info-service</span>=&lt;服务名&gt;</span><br><span class=\"line\"><span class=\"comment\"># 显示该服务的相关信息</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--path-service</span>=&lt;服务名&gt;</span><br><span class=\"line\"><span class=\"comment\"># 显示该服务的文件的相关路径 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--set-description</span>=&lt;描述&gt;</span><br><span class=\"line\"><span class=\"comment\"># 给该服务设置描述信息 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; --get-description</span><br><span class=\"line\"><span class=\"comment\"># 显示该服务的描述信息 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--set-short</span>=&lt;描述&gt;</span><br><span class=\"line\"><span class=\"comment\"># 给该服务设置一个简短的描述 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; --get-short</span><br><span class=\"line\"><span class=\"comment\"># 显示该服务的简短描述 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--add-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 给该服务添加一个新的端口(端口段) [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--remove-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 从该服务上移除一个端口(端口段) [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--query-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 查询该服务是否添加了某个端口(端口段) [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; --get-ports</span><br><span class=\"line\"><span class=\"comment\"># 显示该服务添加的所有端口 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--add-protocol</span>=&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 为该服务添加一个协议 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--remove-protocol</span>=&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 从该服务上移除一个协议 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--query-protocol</span>=&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 查询该服务是否添加了某个协议 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; --get-protocols</span><br><span class=\"line\"><span class=\"comment\"># 显示该服务添加的所有协议 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--add-source-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 添加新的源端口(端口段)到该服务 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--remove-source-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 从该服务中删除源端口(端口段) [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--query-source-port</span>=&lt;端口号&gt;[-&lt;端口号&gt;]/&lt;protocol&gt;</span><br><span class=\"line\"><span class=\"comment\"># 查询该服务是否添加了某个源端口(端口段) [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; --get-source-ports</span><br><span class=\"line\"><span class=\"comment\"># 显示该服务所有源端口 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--add-module</span>=&lt;module&gt;</span><br><span class=\"line\"><span class=\"comment\"># 为该服务添加一个模块 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--remove-module</span>=&lt;module&gt;</span><br><span class=\"line\"><span class=\"comment\"># 为该服务移除一个模块 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--query-module</span>=&lt;module&gt;</span><br><span class=\"line\"><span class=\"comment\"># 查询该服务是否添加了某个模块 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; --get-modules</span><br><span class=\"line\"><span class=\"comment\"># 显示该服务添加的所有模块 [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--set-destination</span>=&lt;ipv&gt;:&lt;address&gt;[/&lt;mask&gt;]</span><br><span class=\"line\"><span class=\"comment\"># Set destination for ipv to address in service [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--remove-destination</span>=&lt;ipv&gt;</span><br><span class=\"line\"><span class=\"comment\"># Disable destination for ipv i service [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; <span class=\"attribute\">--query-destination</span>=&lt;ipv&gt;:&lt;address&gt;[/&lt;mask&gt;]</span><br><span class=\"line\"><span class=\"comment\"># Return whether destination ipv is set for service [P only]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--service</span>=&lt;服务名&gt; --get-destinations</span><br><span class=\"line\"><span class=\"comment\"># List destinations in service [P only]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"控制端口-服务\"><a href=\"#控制端口-服务\" class=\"headerlink\" title=\"控制端口 / 服务\"></a>控制端口 / 服务</h5><p>可以通过两种方式控制端口的开放，一种是指定端口号另一种是指定服务名。虽然开放 http 服务就是开放了 80 端口，但是还是不能通过端口号来关闭，也就是说通过指定服务名开放的就要通过指定服务名关闭；通过指定端口号开放的就要通过指定端口号关闭。还有一个要注意的就是指定端口的时候一定要指定是什么协议，tcp 还是 udp。知道这个之后以后就不用每次先关防火墙了，可以让防火墙真正的生效。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --add-service=mysql        <span class=\"comment\"># 开放mysql端口</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --remove-service=http      <span class=\"comment\"># 阻止http端口</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --list-services            <span class=\"comment\"># 查看开放的服务</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --add-port=3306/tcp        <span class=\"comment\"># 开放通过tcp访问3306</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --remove-port=80tcp        <span class=\"comment\"># 阻止通过tcp访问3306</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --add-port=233/udp         <span class=\"comment\"># 开放通过udp访问233</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --list-ports               <span class=\"comment\"># 查看开放的端口</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>伪装 IP</strong></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --query-masquerade <span class=\"comment\"># 检查是否允许伪装IP</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --add-masquerade   <span class=\"comment\"># 允许防火墙伪装IP</span></span></span><br><span class=\"line\">$ firewall-<span class=\"keyword\">cmd</span><span class=\"bash\"> --remove-masquerade<span class=\"comment\"># 禁止防火墙伪装IP</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>端口转发</strong>  </p>\n<p>端口转发可以将指定地址访问指定的端口时，将流量转发至指定地址的指定端口。转发的目的如果不指定 ip 的话就默认为本机，如果指定了 ip 却没指定端口，则默认使用来源端口。 如果配置好端口转发之后不能用，可以检查下面两个问题：</p>\n<ol>\n<li>比如我将 80 端口转发至 8080 端口，首先检查本地的 80 端口和目标的 8080 端口是否开放监听了</li>\n<li>其次检查是否允许伪装 IP，没允许的话要开启伪装 IP<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>firewall-cmd --add-forward-port=port=<span class=\"number\">80</span><span class=\"symbol\">:proto=tcp</span><span class=\"symbol\">:toport=</span><span class=\"number\">8080</span>   </span><br><span class=\"line\"><span class=\"comment\"># 将80端口的流量转发至8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ </span>firewall-cmd --add-forward-port=port=<span class=\"number\">80</span><span class=\"symbol\">:proto=tcp</span><span class=\"symbol\">:toaddr=</span><span class=\"number\">192.168</span>.0.<span class=\"number\">1</span> </span><br><span class=\"line\"><span class=\"comment\"># 将80端口的流量转发至192.168.0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ </span>firewall-cmd --add-forward-port=port=<span class=\"number\">80</span><span class=\"symbol\">:proto=tcp</span><span class=\"symbol\">:toaddr=</span><span class=\"number\">192.168</span>.0.<span class=\"number\">1</span><span class=\"symbol\">:toport=</span><span class=\"number\">8080</span> </span><br><span class=\"line\"><span class=\"comment\"># 将80端口的流量转发至192.168.0.1的8080端口</span></span><br></pre></td></tr></table></figure>\n当我们想把某个端口隐藏起来的时候，就可以在防火墙上阻止那个端口访问，然后再开一个不规则的端口，之后配置防火墙的端口转发，将流量转发过去。  </li>\n</ol>\n<p>端口转发还可以做流量分发，一个防火墙拖着好多台运行着不同服务的机器，然后用防火墙将不同端口的流量转发至不同机器。  </p>\n<p><strong>接下来我们来看富规则的设置，即rich rules</strong></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 允许192.168.2.208主机的所有流量</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=drop <span class=\"attribute\">--add-rich-rule</span>=<span class=\"string\">&quot;rule family=&quot;</span>ipv4&quot; source <span class=\"attribute\">address</span>=<span class=\"string\">&quot;192.168.2.208&quot;</span> accept<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 允许192.168.2.208主机的icmp协议，即允许192.168.2.208主机ping</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --add-rich-rule=&quot;</span>rule <span class=\"attribute\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span> source <span class=\"attribute\">address</span>=<span class=\"string\">&quot;192.168.2.208&quot;</span> protocol <span class=\"attribute\">value</span>=<span class=\"string\">&quot;icmp&quot;</span> accept<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 取消允许192.168.2.208主机的所有流量</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --zone=drop --remove-rich-rule=&quot;</span>rule <span class=\"attribute\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span> source <span class=\"attribute\">address</span>=<span class=\"string\">&quot;192.168.2.208&quot;</span> accept<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 允许192.168.2.208主机访问ssh服务</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --zone=drop --add-rich-rule=&quot;</span>rule <span class=\"attribute\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span> source <span class=\"attribute\">address</span>=<span class=\"string\">&quot;192.168.2.208&quot;</span><span class=\"built_in\"> service </span><span class=\"attribute\">name</span>=<span class=\"string\">&quot;ssh&quot;</span> accept<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 禁止192.168.2.208访问https服务，并返回错误信息</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --zone=drop --add-rich-rule=&quot;</span>rule <span class=\"attribute\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span> source <span class=\"attribute\">address</span>=<span class=\"string\">&quot;192.168.2.208&quot;</span><span class=\"built_in\"> service </span><span class=\"attribute\">name</span>=<span class=\"string\">&quot;https&quot;</span> reject<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">注：如果是drop的话是直接丢弃，会返回timeout（连接超时）</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 允许192.168.2.0/24网段的主机访问22端口</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --zone=drop --add-rich-rule=&quot;</span>rule <span class=\"attribute\">family</span>=<span class=\"string\">&quot;ipv4&quot;</span> source <span class=\"attribute\">address</span>=<span class=\"string\">&quot;192.168.2.0/24&quot;</span><span class=\"built_in\"> port </span><span class=\"attribute\">protocol</span>=<span class=\"string\">&quot;tcp&quot;</span> <span class=\"attribute\">port</span>=<span class=\"string\">&quot;22&quot;</span> accept<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 每分钟允许2个新连接访问ftp服务</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --add-rich-rule=&quot;</span>rule<span class=\"built_in\"> service </span><span class=\"attribute\">name</span>=ftp limit <span class=\"attribute\">value</span>=2/m accept<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 允许新的ipv4和ipv6连接ftp，并使用日志和审核，每分钟允许访问一次</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --add-rich-rule=&quot;</span>rule<span class=\"built_in\"> service </span><span class=\"attribute\">name</span>=ftp log limit <span class=\"attribute\">value</span>=<span class=\"string\">&quot;1/m&quot;</span> audit accept<span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 拒绝来自192.168.2.0/24网段的连接，10秒后自动取消</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --add-rich-rule=&quot;</span>rule <span class=\"attribute\">family</span>=ipv4 source <span class=\"attribute\">address</span>=192.168.2.0/24 reject<span class=\"string\">&quot; --timeout=10</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 允许ipv6地址为2001:db8::/64子网的主机访问dns服务，并且每小时审核一次，300秒后自动取消</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --add-rich-rule=&quot;</span>rule <span class=\"attribute\">family</span>=ipv6 source <span class=\"attribute\">address</span>=<span class=\"string\">&quot;2001:db8::/64&quot;</span><span class=\"built_in\"> service </span><span class=\"attribute\">name</span>=<span class=\"string\">&quot;dns&quot;</span> audit limit <span class=\"attribute\">value</span>=<span class=\"string\">&quot;1/h&quot;</span> reject<span class=\"string\">&quot; --timeout=300</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"># 将来自192.168.2.0/24网段访问本机80端口的流量转发到本机的22端口</span></span><br><span class=\"line\"><span class=\"string\">$ firewall-cmd --zone=drop --add-rich-rule=&quot;</span>rule <span class=\"attribute\">family</span>=ipv4 source <span class=\"attribute\">address</span>=192.168.2.0/24 forward-port <span class=\"attribute\">port</span>=80 <span class=\"attribute\">protocol</span>=tcp <span class=\"attribute\">to-port</span>=22&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将来自192.168.2.0/24网段访问本地80端口的流量转发到192.168.2.208主机的22端口</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=drop <span class=\"attribute\">--add-rich-rule</span>=<span class=\"string\">&quot;rule family=ipv4 source address=192.168.2.0/24 forward-port port=80 protocol=tcp to-port=22 to-addr=192.168.2.208&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 伪装，将来自局域网192.168.2.0/24网段访问外网的流量映射为网络出口公网IP，即修改源IP地址</span></span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=drop --add-masquerade</span><br><span class=\"line\">$ firewall-cmd <span class=\"attribute\">--zone</span>=drop <span class=\"attribute\">--add-rich-rule</span>=<span class=\"string\">&quot;rule family=ipv4 source address=192.168.2.0/24 masquerade&quot;</span></span><br></pre></td></tr></table></figure>\n<p>好了，写的差不多了，工作中基本上够用了</p>"},{"title":"JavaScript执行机制之event loop","date":"2020-01-01T23:37:41.000Z","_content":"摘录自[ssssyoki](https://juejin.im/user/57a999616be3ff00654e34cc)的 [这一次，彻底弄懂 JavaScript 执行机制](https://juejin.im/post/59e85eebf265da430d571f89)\n\n## 这一次，彻底弄懂 JavaScript 执行机制\n本文的目的就是要保证你彻底弄懂javascript的执行机制，如果读完本文还不懂，可以揍我。\n\n不论你是javascript新手还是老鸟，不论是面试求职，还是日常开发工作，我们经常会遇到这样的情况：给定的几行代码，我们需要知道其输出内容和顺序。因为javascript是一门单线程语言，所以我们可以得出结论：\n\n* javascript是按照语句出现的顺序执行的\n\n看到这里读者要打人了：我难道不知道js是一行一行执行的？还用你说？稍安勿躁，正因为js是一行一行执行的，所以我们以为js都是这样的：\n```javascript\nlet a = '1';\nconsole.log(a);\n\nlet b = '2';\nconsole.log(b);\n```\n<!-- more -->\n然而实际上js是这样的：\n```javascript\nsetTimeout(function(){\n    console.log('定时器开始啦')\n});\n\nnew Promise(function(resolve){\n    console.log('马上执行for循环啦');\n    for(var i = 0; i < 10000; i++){\n        i == 99 && resolve();\n    }\n}).then(function(){\n    console.log('执行then函数啦')\n});\n\nconsole.log('代码执行结束');\n```\n依照**js是按照语句出现的顺序执行**这个理念，我自信的写下输出结果：\n```\n//\"定时器开始啦\"\n//\"马上执行for循环啦\"\n//\"执行then函数啦\"\n//\"代码执行结束\"\n```\n去chrome上验证下，结果完全不对，瞬间懵了，说好的一行一行执行的呢？\n\n\n我们真的要彻底弄明白javascript的执行机制了。\n\n### 关于javascript\njavascript是一门**单线程**语言，在最新的HTML5中提出了Web-Worker，但javascript是单线程这一核心仍未改变。所以一切javascript版的\"多线程\"都是用单线程模拟出来的，一切javascript多线程都是纸老虎！\n\n### javascript事件循环\n既然js是单线程，那就像只有一个窗口的银行，客户需要排队一个一个办理业务，同理js任务也要一个一个顺序执行。如果一个任务耗时过长，那么后一个任务也必须等着。那么问题来了，假如我们想浏览新闻，但是新闻包含的超清图片加载很慢，难道我们的网页要一直卡着直到图片完全显示出来？因此聪明的程序员将任务分为两类：\n\n* 同步任务\n* 异步任务\n\n当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染。而像加载图片音乐之类占用资源大耗时久的任务，就是异步任务。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：\n![1](/img/1.jpg)\n\n\n导图要表达的内容用文字来表述的话：\n\n* 同步和异步任务分别进入不同的执行\"场所\"，同步的进入主线程，异步的进入Event Table并注册函数。\n* 当指定的事情完成时，Event Table会将这个函数移入Event Queue。\n* 主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。\n*上述过程会不断重复，也就是常说的Event Loop(事件循环)。\n\n我们不禁要问了，那怎么知道主线程执行栈为空啊？js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。\n\n说了这么多文字，不如直接一段代码更直白：\n```javascript\nlet data = [];\n$.ajax({\n    url:www.javascript.com,\n    data:data,\n    success:() => {\n        console.log('发送成功!');\n    }\n})\nconsole.log('代码执行结束');\n```\n上面是一段简易的`ajax`请求代码：\n\n* ajax进入Event Table，注册回调函数`success`。\n* 执行`console.log('代码执行结束')`。\n* ajax事件完成，回调函数`success`进入Event Queue。\n* 主线程从Event Queue读取回调函数`success`并执行。\n相信通过上面的文字和代码，你已经对js的执行顺序有了初步了解。接下来我们来研究进阶话题：setTimeout。\n\n### 又爱又恨的setTimeout\n大名鼎鼎的`setTimeout`无需再多言，大家对他的第一印象就是异步可以延时执行，我们经常这么实现延时3秒执行：\n```javascript\nsetTimeout(() => {\n    console.log('延时3秒');\n},3000)\n```\n渐渐的`setTimeout`用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？\n\n先看一个例子：\n```javascript\nsetTimeout(() => {\n    task();\n},3000)\nconsole.log('执行console');\n```\n根据前面我们的结论，`setTimeout`是异步的，应该先执行`console.log`这个同步任务，所以我们的结论是：\n```\n//执行console\n//task()复制代码\n```\n去验证一下，结果正确！\n然后我们修改一下前面的代码：\n```javascript\nsetTimeout(() => {\n    task()\n},3000)\n\nsleep(10000000)\n```\n乍一看其实差不多嘛，但我们把这段代码在chrome执行一下，却发现控制台执行`task()`需要的时间远远超过3秒，说好的延时三秒，为啥现在需要这么长时间啊？\n\n这时候我们需要重新理解`setTimeout`的定义。我们先说上述代码是怎么执行的：\n\n* `task()`进入Event Table并注册,计时开始。\n* 执行`sleep`函数，很慢，非常慢，计时仍在继续。\n* 3秒到了，计时事件`timeout`完成，`task()`进入Event Queue，但是`sleep`也太慢了吧，还没执行完，只好等着。\n* `sleep`终于执行完了，`task()`终于从Event Queue进入了主线程执行。\n\n上述的流程走完，我们知道`setTimeout`这个函数，是经过指定时间后，把要执行的任务(本例中为`task()`)加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。\n\n我们还经常遇到`setTimeout(fn,0)`这样的代码，0秒后执行又是什么意思呢？是不是可以立即执行呢？\n\n答案是不会的，`setTimeout(fn,0)`的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。举例说明：\n```javascript\n//代码1\nconsole.log('先执行这里');\nsetTimeout(() => {\n    console.log('执行啦')\n},0);\n```\n```javascript\n//代码2\nconsole.log('先执行这里');\nsetTimeout(() => {\n    console.log('执行啦')\n},3000);\n```\n代码1的输出结果是：\n```\n//先执行这里\n//执行啦复制代码\n```\n代码2的输出结果是：\n```\n//先执行这里\n// ... 3s later\n// 执行啦复制代码\n```\n关于`setTimeout`要补充的是，即便主线程为空，0毫秒实际上也是达不到的。根据HTML的标准，最低是4毫秒。有兴趣的同学可以自行了解。\n\n### 又恨又爱的setInterval\n上面说完了`setTimeout`，当然不能错过它的孪生兄弟`setInterval`。他俩差不多，只不过后者是循环的执行。对于执行顺序来说，`setInterval`会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待。\n\n唯一需要注意的一点是，对于`setInterval(fn,ms)`来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。**一旦`setInterval`的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了**。这句话请读者仔细品味。\n\n### Promise与process.nextTick(callback)\n传统的定时器我们已经研究过了，接着我们探究`Promise`与`process.nextTick(callback)`的表现。\n\n`Promise`的定义和功能本文不再赘述，不了解的读者可以学习一下阮一峰老师的[Promise](http://es6.ruanyifeng.com/#docs/promise)。而`process.nextTick(callback)`类似node.js版的\"setTimeout\"，在事件循环的下一次循环中调用 callback 回调函数。\n\n我们进入正题，除了广义的同步任务和异步任务，我们对任务有更精细的定义：\n\n* macro-task(宏任务)：包括整体代码script，setTimeout，setInterval\n* micro-task(微任务)：Promise，process.nextTick\n\n不同类型的任务会进入对应的Event Queue，比如`setTimeout`和`setInterval`会进入相同的Event Queue。\n\n事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。听起来有点绕，我们用文章最开始的一段代码说明：\n```javascript\nsetTimeout(function() {\n    console.log('setTimeout');\n})\n\nnew Promise(function(resolve) {\n    console.log('promise');\n}).then(function() {\n    console.log('then');\n})\n\nconsole.log('console');\n```\n* 这段代码作为宏任务，进入主线程。\n* 先遇到`setTimeout`，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)\n* 接下来遇到了`Promise`，`new Promise`立即执行，`then`函数分发到微任务Event Queue。\n* 遇到`console.log()`，立即执行。\n* 好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了`then`在微任务Event Queue里面，执行。\n* ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中`setTimeout`对应的回调函数，立即执行。\n* 结束。\n\n事件循环，宏任务，微任务的关系如图所示：\n![2](/img/2.jpg)\n\n我们来分析一段较复杂的代码，看看你是否真的掌握了js的执行机制：\n```javascript\nconsole.log('1');\n\nsetTimeout(function() {\n    console.log('2');\n    process.nextTick(function() {\n        console.log('3');\n    })\n    new Promise(function(resolve) {\n        console.log('4');\n        resolve();\n    }).then(function() {\n        console.log('5')\n    })\n})\nprocess.nextTick(function() {\n    console.log('6');\n})\nnew Promise(function(resolve) {\n    console.log('7');\n    resolve();\n}).then(function() {\n    console.log('8')\n})\n\nsetTimeout(function() {\n    console.log('9');\n    process.nextTick(function() {\n        console.log('10');\n    })\n    new Promise(function(resolve) {\n        console.log('11');\n        resolve();\n    }).then(function() {\n        console.log('12')\n    })\n})\n```\n第一轮事件循环流程分析如下：\n\n* 整体script作为第一个宏任务进入主线程，遇到`console.log`，输出1。\n* 遇到`setTimeout`，其回调函数被分发到宏任务Event Queue中。我们暂且记为`setTimeout1`。\n* 遇到`process.nextTick()`，其回调函数被分发到微任务Event Queue中。我们记为`process1`。\n* 遇到`Promise`，`new Promise`直接执行，输出7。`then`被分发到微任务Event Queue中。我们记为`then1`。\n* 又遇到了`setTimeout`，其回调函数被分发到宏任务Event Queue中，我们记为`setTimeout2`。\n\n宏任务Event Queue|微任务Event Queue\n--------|--------\nsetTimeout1|process1\nsetTimeout2|then1\n\n* 上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。\n* 我们发现了`process1`和`then1`两个微任务。\n* 执行`process1`,输出6。\n* 执行`then1`，输出8。\n\n好了，第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。\n* 那么第二轮时间循环从`setTimeout1`宏任务开始：\n* 首先输出2。\n* 接下来遇到了`process.nextTick()`，同样将其分发到微任务Event Queue中，记为`process2`。\n* `new Promise`立即执行输出4，`then`也分发到微任务Event Queue中，记为`then2`。\n\n宏任务Event Queue|微任务Event Queue\n--|--\nsetTimeout2|process2\n|then2\n\n* 第二轮事件循环宏任务结束，我们发现有`process2`和`then2`两个微任务可以执行。\n* 输出3。\n* 输出5。\n* 第二轮事件循环结束，第二轮输出2，4，3，5。\n* 第三轮事件循环开始，此时只剩`setTimeout2`了，执行。\n* 直接输出9。\n* 将`process.nextTick()`分发到微任务Event Queue中。记为`process3`。\n* 直接执行`new Promise`，输出11。\n* 将`then`分发到微任务Event Queue中，记为`then3`。\n\n宏任务Event Queue|微任务Event Queue\n--------|--------\n|process3\n|then3\n\n* 第三轮事件循环宏任务执行结束，执行两个微任务`process3`和`then3`。\n* 输出10。\n* 输出12。\n* 第三轮事件循环结束，第三轮输出9，11，10，12。\n\n整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。\n(请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)\n\n### 写在最后\n#### js的异步\n我们从最开头就说javascript是一门单线程语言，不管是什么新框架新语法糖实现的所谓异步，其实都是用同步的方法去模拟的，牢牢把握住单线程这点非常重要。\n\n#### 事件循环Event Loop\n事件循环是js实现异步的一种方法，也是js的执行机制。\n\n#### javascript的执行和运行\n执行和运行有很大的区别，javascript在不同的环境下，比如node，浏览器，Ringo等等，执行方式是不同的。而运行大多指javascript解析引擎，是统一的。\n\n#### setImmediate\n微任务和宏任务还有很多种类，比如setImmediate等等，执行都是有共同点的，有兴趣的同学可以自行了解。\n\n#### 最后的最后\njavascript是一门单线程语言\nEvent Loop是javascript的执行机制\n牢牢把握两个基本点，以认真学习javascript为中心，早日实现成为前端高手的伟大梦想！\n\n","source":"_posts/JavaScript执行机制之event-loop.md","raw":"---\ntitle: JavaScript执行机制之event loop\ndate: 2020-01-02 07:37:41\ncategories:\n- javascript\ntags:\n- javascript\n- event\n---\n摘录自[ssssyoki](https://juejin.im/user/57a999616be3ff00654e34cc)的 [这一次，彻底弄懂 JavaScript 执行机制](https://juejin.im/post/59e85eebf265da430d571f89)\n\n## 这一次，彻底弄懂 JavaScript 执行机制\n本文的目的就是要保证你彻底弄懂javascript的执行机制，如果读完本文还不懂，可以揍我。\n\n不论你是javascript新手还是老鸟，不论是面试求职，还是日常开发工作，我们经常会遇到这样的情况：给定的几行代码，我们需要知道其输出内容和顺序。因为javascript是一门单线程语言，所以我们可以得出结论：\n\n* javascript是按照语句出现的顺序执行的\n\n看到这里读者要打人了：我难道不知道js是一行一行执行的？还用你说？稍安勿躁，正因为js是一行一行执行的，所以我们以为js都是这样的：\n```javascript\nlet a = '1';\nconsole.log(a);\n\nlet b = '2';\nconsole.log(b);\n```\n<!-- more -->\n然而实际上js是这样的：\n```javascript\nsetTimeout(function(){\n    console.log('定时器开始啦')\n});\n\nnew Promise(function(resolve){\n    console.log('马上执行for循环啦');\n    for(var i = 0; i < 10000; i++){\n        i == 99 && resolve();\n    }\n}).then(function(){\n    console.log('执行then函数啦')\n});\n\nconsole.log('代码执行结束');\n```\n依照**js是按照语句出现的顺序执行**这个理念，我自信的写下输出结果：\n```\n//\"定时器开始啦\"\n//\"马上执行for循环啦\"\n//\"执行then函数啦\"\n//\"代码执行结束\"\n```\n去chrome上验证下，结果完全不对，瞬间懵了，说好的一行一行执行的呢？\n\n\n我们真的要彻底弄明白javascript的执行机制了。\n\n### 关于javascript\njavascript是一门**单线程**语言，在最新的HTML5中提出了Web-Worker，但javascript是单线程这一核心仍未改变。所以一切javascript版的\"多线程\"都是用单线程模拟出来的，一切javascript多线程都是纸老虎！\n\n### javascript事件循环\n既然js是单线程，那就像只有一个窗口的银行，客户需要排队一个一个办理业务，同理js任务也要一个一个顺序执行。如果一个任务耗时过长，那么后一个任务也必须等着。那么问题来了，假如我们想浏览新闻，但是新闻包含的超清图片加载很慢，难道我们的网页要一直卡着直到图片完全显示出来？因此聪明的程序员将任务分为两类：\n\n* 同步任务\n* 异步任务\n\n当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染。而像加载图片音乐之类占用资源大耗时久的任务，就是异步任务。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：\n![1](/img/1.jpg)\n\n\n导图要表达的内容用文字来表述的话：\n\n* 同步和异步任务分别进入不同的执行\"场所\"，同步的进入主线程，异步的进入Event Table并注册函数。\n* 当指定的事情完成时，Event Table会将这个函数移入Event Queue。\n* 主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。\n*上述过程会不断重复，也就是常说的Event Loop(事件循环)。\n\n我们不禁要问了，那怎么知道主线程执行栈为空啊？js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。\n\n说了这么多文字，不如直接一段代码更直白：\n```javascript\nlet data = [];\n$.ajax({\n    url:www.javascript.com,\n    data:data,\n    success:() => {\n        console.log('发送成功!');\n    }\n})\nconsole.log('代码执行结束');\n```\n上面是一段简易的`ajax`请求代码：\n\n* ajax进入Event Table，注册回调函数`success`。\n* 执行`console.log('代码执行结束')`。\n* ajax事件完成，回调函数`success`进入Event Queue。\n* 主线程从Event Queue读取回调函数`success`并执行。\n相信通过上面的文字和代码，你已经对js的执行顺序有了初步了解。接下来我们来研究进阶话题：setTimeout。\n\n### 又爱又恨的setTimeout\n大名鼎鼎的`setTimeout`无需再多言，大家对他的第一印象就是异步可以延时执行，我们经常这么实现延时3秒执行：\n```javascript\nsetTimeout(() => {\n    console.log('延时3秒');\n},3000)\n```\n渐渐的`setTimeout`用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？\n\n先看一个例子：\n```javascript\nsetTimeout(() => {\n    task();\n},3000)\nconsole.log('执行console');\n```\n根据前面我们的结论，`setTimeout`是异步的，应该先执行`console.log`这个同步任务，所以我们的结论是：\n```\n//执行console\n//task()复制代码\n```\n去验证一下，结果正确！\n然后我们修改一下前面的代码：\n```javascript\nsetTimeout(() => {\n    task()\n},3000)\n\nsleep(10000000)\n```\n乍一看其实差不多嘛，但我们把这段代码在chrome执行一下，却发现控制台执行`task()`需要的时间远远超过3秒，说好的延时三秒，为啥现在需要这么长时间啊？\n\n这时候我们需要重新理解`setTimeout`的定义。我们先说上述代码是怎么执行的：\n\n* `task()`进入Event Table并注册,计时开始。\n* 执行`sleep`函数，很慢，非常慢，计时仍在继续。\n* 3秒到了，计时事件`timeout`完成，`task()`进入Event Queue，但是`sleep`也太慢了吧，还没执行完，只好等着。\n* `sleep`终于执行完了，`task()`终于从Event Queue进入了主线程执行。\n\n上述的流程走完，我们知道`setTimeout`这个函数，是经过指定时间后，把要执行的任务(本例中为`task()`)加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。\n\n我们还经常遇到`setTimeout(fn,0)`这样的代码，0秒后执行又是什么意思呢？是不是可以立即执行呢？\n\n答案是不会的，`setTimeout(fn,0)`的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。举例说明：\n```javascript\n//代码1\nconsole.log('先执行这里');\nsetTimeout(() => {\n    console.log('执行啦')\n},0);\n```\n```javascript\n//代码2\nconsole.log('先执行这里');\nsetTimeout(() => {\n    console.log('执行啦')\n},3000);\n```\n代码1的输出结果是：\n```\n//先执行这里\n//执行啦复制代码\n```\n代码2的输出结果是：\n```\n//先执行这里\n// ... 3s later\n// 执行啦复制代码\n```\n关于`setTimeout`要补充的是，即便主线程为空，0毫秒实际上也是达不到的。根据HTML的标准，最低是4毫秒。有兴趣的同学可以自行了解。\n\n### 又恨又爱的setInterval\n上面说完了`setTimeout`，当然不能错过它的孪生兄弟`setInterval`。他俩差不多，只不过后者是循环的执行。对于执行顺序来说，`setInterval`会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待。\n\n唯一需要注意的一点是，对于`setInterval(fn,ms)`来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。**一旦`setInterval`的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了**。这句话请读者仔细品味。\n\n### Promise与process.nextTick(callback)\n传统的定时器我们已经研究过了，接着我们探究`Promise`与`process.nextTick(callback)`的表现。\n\n`Promise`的定义和功能本文不再赘述，不了解的读者可以学习一下阮一峰老师的[Promise](http://es6.ruanyifeng.com/#docs/promise)。而`process.nextTick(callback)`类似node.js版的\"setTimeout\"，在事件循环的下一次循环中调用 callback 回调函数。\n\n我们进入正题，除了广义的同步任务和异步任务，我们对任务有更精细的定义：\n\n* macro-task(宏任务)：包括整体代码script，setTimeout，setInterval\n* micro-task(微任务)：Promise，process.nextTick\n\n不同类型的任务会进入对应的Event Queue，比如`setTimeout`和`setInterval`会进入相同的Event Queue。\n\n事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。听起来有点绕，我们用文章最开始的一段代码说明：\n```javascript\nsetTimeout(function() {\n    console.log('setTimeout');\n})\n\nnew Promise(function(resolve) {\n    console.log('promise');\n}).then(function() {\n    console.log('then');\n})\n\nconsole.log('console');\n```\n* 这段代码作为宏任务，进入主线程。\n* 先遇到`setTimeout`，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)\n* 接下来遇到了`Promise`，`new Promise`立即执行，`then`函数分发到微任务Event Queue。\n* 遇到`console.log()`，立即执行。\n* 好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了`then`在微任务Event Queue里面，执行。\n* ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中`setTimeout`对应的回调函数，立即执行。\n* 结束。\n\n事件循环，宏任务，微任务的关系如图所示：\n![2](/img/2.jpg)\n\n我们来分析一段较复杂的代码，看看你是否真的掌握了js的执行机制：\n```javascript\nconsole.log('1');\n\nsetTimeout(function() {\n    console.log('2');\n    process.nextTick(function() {\n        console.log('3');\n    })\n    new Promise(function(resolve) {\n        console.log('4');\n        resolve();\n    }).then(function() {\n        console.log('5')\n    })\n})\nprocess.nextTick(function() {\n    console.log('6');\n})\nnew Promise(function(resolve) {\n    console.log('7');\n    resolve();\n}).then(function() {\n    console.log('8')\n})\n\nsetTimeout(function() {\n    console.log('9');\n    process.nextTick(function() {\n        console.log('10');\n    })\n    new Promise(function(resolve) {\n        console.log('11');\n        resolve();\n    }).then(function() {\n        console.log('12')\n    })\n})\n```\n第一轮事件循环流程分析如下：\n\n* 整体script作为第一个宏任务进入主线程，遇到`console.log`，输出1。\n* 遇到`setTimeout`，其回调函数被分发到宏任务Event Queue中。我们暂且记为`setTimeout1`。\n* 遇到`process.nextTick()`，其回调函数被分发到微任务Event Queue中。我们记为`process1`。\n* 遇到`Promise`，`new Promise`直接执行，输出7。`then`被分发到微任务Event Queue中。我们记为`then1`。\n* 又遇到了`setTimeout`，其回调函数被分发到宏任务Event Queue中，我们记为`setTimeout2`。\n\n宏任务Event Queue|微任务Event Queue\n--------|--------\nsetTimeout1|process1\nsetTimeout2|then1\n\n* 上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。\n* 我们发现了`process1`和`then1`两个微任务。\n* 执行`process1`,输出6。\n* 执行`then1`，输出8。\n\n好了，第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。\n* 那么第二轮时间循环从`setTimeout1`宏任务开始：\n* 首先输出2。\n* 接下来遇到了`process.nextTick()`，同样将其分发到微任务Event Queue中，记为`process2`。\n* `new Promise`立即执行输出4，`then`也分发到微任务Event Queue中，记为`then2`。\n\n宏任务Event Queue|微任务Event Queue\n--|--\nsetTimeout2|process2\n|then2\n\n* 第二轮事件循环宏任务结束，我们发现有`process2`和`then2`两个微任务可以执行。\n* 输出3。\n* 输出5。\n* 第二轮事件循环结束，第二轮输出2，4，3，5。\n* 第三轮事件循环开始，此时只剩`setTimeout2`了，执行。\n* 直接输出9。\n* 将`process.nextTick()`分发到微任务Event Queue中。记为`process3`。\n* 直接执行`new Promise`，输出11。\n* 将`then`分发到微任务Event Queue中，记为`then3`。\n\n宏任务Event Queue|微任务Event Queue\n--------|--------\n|process3\n|then3\n\n* 第三轮事件循环宏任务执行结束，执行两个微任务`process3`和`then3`。\n* 输出10。\n* 输出12。\n* 第三轮事件循环结束，第三轮输出9，11，10，12。\n\n整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。\n(请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)\n\n### 写在最后\n#### js的异步\n我们从最开头就说javascript是一门单线程语言，不管是什么新框架新语法糖实现的所谓异步，其实都是用同步的方法去模拟的，牢牢把握住单线程这点非常重要。\n\n#### 事件循环Event Loop\n事件循环是js实现异步的一种方法，也是js的执行机制。\n\n#### javascript的执行和运行\n执行和运行有很大的区别，javascript在不同的环境下，比如node，浏览器，Ringo等等，执行方式是不同的。而运行大多指javascript解析引擎，是统一的。\n\n#### setImmediate\n微任务和宏任务还有很多种类，比如setImmediate等等，执行都是有共同点的，有兴趣的同学可以自行了解。\n\n#### 最后的最后\njavascript是一门单线程语言\nEvent Loop是javascript的执行机制\n牢牢把握两个基本点，以认真学习javascript为中心，早日实现成为前端高手的伟大梦想！\n\n","slug":"JavaScript执行机制之event-loop","published":1,"updated":"2021-09-21T01:19:04.421Z","_id":"ckttecqzx000r1kuvczlj9crj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>摘录自<a href=\"https://juejin.im/user/57a999616be3ff00654e34cc\">ssssyoki</a>的 <a href=\"https://juejin.im/post/59e85eebf265da430d571f89\">这一次，彻底弄懂 JavaScript 执行机制</a></p>\n<h2 id=\"这一次，彻底弄懂-JavaScript-执行机制\"><a href=\"#这一次，彻底弄懂-JavaScript-执行机制\" class=\"headerlink\" title=\"这一次，彻底弄懂 JavaScript 执行机制\"></a>这一次，彻底弄懂 JavaScript 执行机制</h2><p>本文的目的就是要保证你彻底弄懂javascript的执行机制，如果读完本文还不懂，可以揍我。</p>\n<p>不论你是javascript新手还是老鸟，不论是面试求职，还是日常开发工作，我们经常会遇到这样的情况：给定的几行代码，我们需要知道其输出内容和顺序。因为javascript是一门单线程语言，所以我们可以得出结论：</p>\n<ul>\n<li>javascript是按照语句出现的顺序执行的</li>\n</ul>\n<p>看到这里读者要打人了：我难道不知道js是一行一行执行的？还用你说？稍安勿躁，正因为js是一行一行执行的，所以我们以为js都是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>然而实际上js是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;定时器开始啦&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;马上执行for循环啦&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++)&#123;</span><br><span class=\"line\">        i == <span class=\"number\">99</span> &amp;&amp; resolve();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;执行then函数啦&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;代码执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>依照<strong>js是按照语句出现的顺序执行</strong>这个理念，我自信的写下输出结果：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span><span class=\"string\">&quot;定时器开始啦&quot;</span></span><br><span class=\"line\"><span class=\"regexp\">//</span><span class=\"string\">&quot;马上执行for循环啦&quot;</span></span><br><span class=\"line\"><span class=\"regexp\">//</span><span class=\"string\">&quot;执行then函数啦&quot;</span></span><br><span class=\"line\"><span class=\"regexp\">//</span><span class=\"string\">&quot;代码执行结束&quot;</span></span><br></pre></td></tr></table></figure>\n<p>去chrome上验证下，结果完全不对，瞬间懵了，说好的一行一行执行的呢？</p>\n<p>我们真的要彻底弄明白javascript的执行机制了。</p>\n<h3 id=\"关于javascript\"><a href=\"#关于javascript\" class=\"headerlink\" title=\"关于javascript\"></a>关于javascript</h3><p>javascript是一门<strong>单线程</strong>语言，在最新的HTML5中提出了Web-Worker，但javascript是单线程这一核心仍未改变。所以一切javascript版的”多线程”都是用单线程模拟出来的，一切javascript多线程都是纸老虎！</p>\n<h3 id=\"javascript事件循环\"><a href=\"#javascript事件循环\" class=\"headerlink\" title=\"javascript事件循环\"></a>javascript事件循环</h3><p>既然js是单线程，那就像只有一个窗口的银行，客户需要排队一个一个办理业务，同理js任务也要一个一个顺序执行。如果一个任务耗时过长，那么后一个任务也必须等着。那么问题来了，假如我们想浏览新闻，但是新闻包含的超清图片加载很慢，难道我们的网页要一直卡着直到图片完全显示出来？因此聪明的程序员将任务分为两类：</p>\n<ul>\n<li>同步任务</li>\n<li>异步任务</li>\n</ul>\n<p>当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染。而像加载图片音乐之类占用资源大耗时久的任务，就是异步任务。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：<br><img src=\"/img/1.jpg\" alt=\"1\"></p>\n<p>导图要表达的内容用文字来表述的话：</p>\n<ul>\n<li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。</li>\n<li>当指定的事情完成时，Event Table会将这个函数移入Event Queue。</li>\n<li>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</li>\n<li>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</li>\n</ul>\n<p>我们不禁要问了，那怎么知道主线程执行栈为空啊？js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。</p>\n<p>说了这么多文字，不如直接一段代码更直白：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = [];</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>:www.javascript.com,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:data,</span><br><span class=\"line\">    <span class=\"attr\">success</span>:<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;发送成功!&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;代码执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>上面是一段简易的<code>ajax</code>请求代码：</p>\n<ul>\n<li>ajax进入Event Table，注册回调函数<code>success</code>。</li>\n<li>执行<code>console.log(&#39;代码执行结束&#39;)</code>。</li>\n<li>ajax事件完成，回调函数<code>success</code>进入Event Queue。</li>\n<li>主线程从Event Queue读取回调函数<code>success</code>并执行。<br>相信通过上面的文字和代码，你已经对js的执行顺序有了初步了解。接下来我们来研究进阶话题：setTimeout。</li>\n</ul>\n<h3 id=\"又爱又恨的setTimeout\"><a href=\"#又爱又恨的setTimeout\" class=\"headerlink\" title=\"又爱又恨的setTimeout\"></a>又爱又恨的setTimeout</h3><p>大名鼎鼎的<code>setTimeout</code>无需再多言，大家对他的第一印象就是异步可以延时执行，我们经常这么实现延时3秒执行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;延时3秒&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n<p>渐渐的<code>setTimeout</code>用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？</p>\n<p>先看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    task();</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;执行console&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>根据前面我们的结论，<code>setTimeout</code>是异步的，应该先执行<code>console.log</code>这个同步任务，所以我们的结论是：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>执行console</span><br><span class=\"line\"><span class=\"regexp\">//</span>task()复制代码</span><br></pre></td></tr></table></figure>\n<p>去验证一下，结果正确！<br>然后我们修改一下前面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    task()</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sleep(<span class=\"number\">10000000</span>)</span><br></pre></td></tr></table></figure>\n<p>乍一看其实差不多嘛，但我们把这段代码在chrome执行一下，却发现控制台执行<code>task()</code>需要的时间远远超过3秒，说好的延时三秒，为啥现在需要这么长时间啊？</p>\n<p>这时候我们需要重新理解<code>setTimeout</code>的定义。我们先说上述代码是怎么执行的：</p>\n<ul>\n<li><code>task()</code>进入Event Table并注册,计时开始。</li>\n<li>执行<code>sleep</code>函数，很慢，非常慢，计时仍在继续。</li>\n<li>3秒到了，计时事件<code>timeout</code>完成，<code>task()</code>进入Event Queue，但是<code>sleep</code>也太慢了吧，还没执行完，只好等着。</li>\n<li><code>sleep</code>终于执行完了，<code>task()</code>终于从Event Queue进入了主线程执行。</li>\n</ul>\n<p>上述的流程走完，我们知道<code>setTimeout</code>这个函数，是经过指定时间后，把要执行的任务(本例中为<code>task()</code>)加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。</p>\n<p>我们还经常遇到<code>setTimeout(fn,0)</code>这样的代码，0秒后执行又是什么意思呢？是不是可以立即执行呢？</p>\n<p>答案是不会的，<code>setTimeout(fn,0)</code>的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。举例说明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;先执行这里&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;执行啦&#x27;</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;先执行这里&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;执行啦&#x27;</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>代码1的输出结果是：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>先执行这里</span><br><span class=\"line\"><span class=\"regexp\">//</span>执行啦复制代码</span><br></pre></td></tr></table></figure>\n<p>代码2的输出结果是：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>先执行这里</span><br><span class=\"line\"><span class=\"regexp\">//</span> ... <span class=\"number\">3</span>s later</span><br><span class=\"line\"><span class=\"regexp\">//</span> 执行啦复制代码</span><br></pre></td></tr></table></figure>\n<p>关于<code>setTimeout</code>要补充的是，即便主线程为空，0毫秒实际上也是达不到的。根据HTML的标准，最低是4毫秒。有兴趣的同学可以自行了解。</p>\n<h3 id=\"又恨又爱的setInterval\"><a href=\"#又恨又爱的setInterval\" class=\"headerlink\" title=\"又恨又爱的setInterval\"></a>又恨又爱的setInterval</h3><p>上面说完了<code>setTimeout</code>，当然不能错过它的孪生兄弟<code>setInterval</code>。他俩差不多，只不过后者是循环的执行。对于执行顺序来说，<code>setInterval</code>会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待。</p>\n<p>唯一需要注意的一点是，对于<code>setInterval(fn,ms)</code>来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。<strong>一旦<code>setInterval</code>的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了</strong>。这句话请读者仔细品味。</p>\n<h3 id=\"Promise与process-nextTick-callback\"><a href=\"#Promise与process-nextTick-callback\" class=\"headerlink\" title=\"Promise与process.nextTick(callback)\"></a>Promise与process.nextTick(callback)</h3><p>传统的定时器我们已经研究过了，接着我们探究<code>Promise</code>与<code>process.nextTick(callback)</code>的表现。</p>\n<p><code>Promise</code>的定义和功能本文不再赘述，不了解的读者可以学习一下阮一峰老师的<a href=\"http://es6.ruanyifeng.com/#docs/promise\">Promise</a>。而<code>process.nextTick(callback)</code>类似node.js版的”setTimeout”，在事件循环的下一次循环中调用 callback 回调函数。</p>\n<p>我们进入正题，除了广义的同步任务和异步任务，我们对任务有更精细的定义：</p>\n<ul>\n<li>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval</li>\n<li>micro-task(微任务)：Promise，process.nextTick</li>\n</ul>\n<p>不同类型的任务会进入对应的Event Queue，比如<code>setTimeout</code>和<code>setInterval</code>会进入相同的Event Queue。</p>\n<p>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。听起来有点绕，我们用文章最开始的一段代码说明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setTimeout&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise&#x27;</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;then&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;console&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这段代码作为宏任务，进入主线程。</li>\n<li>先遇到<code>setTimeout</code>，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)</li>\n<li>接下来遇到了<code>Promise</code>，<code>new Promise</code>立即执行，<code>then</code>函数分发到微任务Event Queue。</li>\n<li>遇到<code>console.log()</code>，立即执行。</li>\n<li>好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了<code>then</code>在微任务Event Queue里面，执行。</li>\n<li>ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中<code>setTimeout</code>对应的回调函数，立即执行。</li>\n<li>结束。</li>\n</ul>\n<p>事件循环，宏任务，微任务的关系如图所示：<br><img src=\"/img/2.jpg\" alt=\"2\"></p>\n<p>我们来分析一段较复杂的代码，看看你是否真的掌握了js的执行机制：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;4&#x27;</span>);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;6&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;7&#x27;</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;8&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;9&#x27;</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;10&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;11&#x27;</span>);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;12&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>第一轮事件循环流程分析如下：</p>\n<ul>\n<li>整体script作为第一个宏任务进入主线程，遇到<code>console.log</code>，输出1。</li>\n<li>遇到<code>setTimeout</code>，其回调函数被分发到宏任务Event Queue中。我们暂且记为<code>setTimeout1</code>。</li>\n<li>遇到<code>process.nextTick()</code>，其回调函数被分发到微任务Event Queue中。我们记为<code>process1</code>。</li>\n<li>遇到<code>Promise</code>，<code>new Promise</code>直接执行，输出7。<code>then</code>被分发到微任务Event Queue中。我们记为<code>then1</code>。</li>\n<li>又遇到了<code>setTimeout</code>，其回调函数被分发到宏任务Event Queue中，我们记为<code>setTimeout2</code>。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务Event Queue</th>\n<th>微任务Event Queue</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>setTimeout1</td>\n<td>process1</td>\n</tr>\n<tr>\n<td>setTimeout2</td>\n<td>then1</td>\n</tr>\n</tbody></table>\n<ul>\n<li>上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。</li>\n<li>我们发现了<code>process1</code>和<code>then1</code>两个微任务。</li>\n<li>执行<code>process1</code>,输出6。</li>\n<li>执行<code>then1</code>，输出8。</li>\n</ul>\n<p>好了，第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。</p>\n<ul>\n<li>那么第二轮时间循环从<code>setTimeout1</code>宏任务开始：</li>\n<li>首先输出2。</li>\n<li>接下来遇到了<code>process.nextTick()</code>，同样将其分发到微任务Event Queue中，记为<code>process2</code>。</li>\n<li><code>new Promise</code>立即执行输出4，<code>then</code>也分发到微任务Event Queue中，记为<code>then2</code>。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务Event Queue</th>\n<th>微任务Event Queue</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>setTimeout2</td>\n<td>process2</td>\n</tr>\n<tr>\n<td></td>\n<td>then2</td>\n</tr>\n</tbody></table>\n<ul>\n<li>第二轮事件循环宏任务结束，我们发现有<code>process2</code>和<code>then2</code>两个微任务可以执行。</li>\n<li>输出3。</li>\n<li>输出5。</li>\n<li>第二轮事件循环结束，第二轮输出2，4，3，5。</li>\n<li>第三轮事件循环开始，此时只剩<code>setTimeout2</code>了，执行。</li>\n<li>直接输出9。</li>\n<li>将<code>process.nextTick()</code>分发到微任务Event Queue中。记为<code>process3</code>。</li>\n<li>直接执行<code>new Promise</code>，输出11。</li>\n<li>将<code>then</code>分发到微任务Event Queue中，记为<code>then3</code>。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务Event Queue</th>\n<th>微任务Event Queue</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>process3</td>\n</tr>\n<tr>\n<td></td>\n<td>then3</td>\n</tr>\n</tbody></table>\n<ul>\n<li>第三轮事件循环宏任务执行结束，执行两个微任务<code>process3</code>和<code>then3</code>。</li>\n<li>输出10。</li>\n<li>输出12。</li>\n<li>第三轮事件循环结束，第三轮输出9，11，10，12。</li>\n</ul>\n<p>整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。<br>(请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)</p>\n<h3 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h3><h4 id=\"js的异步\"><a href=\"#js的异步\" class=\"headerlink\" title=\"js的异步\"></a>js的异步</h4><p>我们从最开头就说javascript是一门单线程语言，不管是什么新框架新语法糖实现的所谓异步，其实都是用同步的方法去模拟的，牢牢把握住单线程这点非常重要。</p>\n<h4 id=\"事件循环Event-Loop\"><a href=\"#事件循环Event-Loop\" class=\"headerlink\" title=\"事件循环Event Loop\"></a>事件循环Event Loop</h4><p>事件循环是js实现异步的一种方法，也是js的执行机制。</p>\n<h4 id=\"javascript的执行和运行\"><a href=\"#javascript的执行和运行\" class=\"headerlink\" title=\"javascript的执行和运行\"></a>javascript的执行和运行</h4><p>执行和运行有很大的区别，javascript在不同的环境下，比如node，浏览器，Ringo等等，执行方式是不同的。而运行大多指javascript解析引擎，是统一的。</p>\n<h4 id=\"setImmediate\"><a href=\"#setImmediate\" class=\"headerlink\" title=\"setImmediate\"></a>setImmediate</h4><p>微任务和宏任务还有很多种类，比如setImmediate等等，执行都是有共同点的，有兴趣的同学可以自行了解。</p>\n<h4 id=\"最后的最后\"><a href=\"#最后的最后\" class=\"headerlink\" title=\"最后的最后\"></a>最后的最后</h4><p>javascript是一门单线程语言<br>Event Loop是javascript的执行机制<br>牢牢把握两个基本点，以认真学习javascript为中心，早日实现成为前端高手的伟大梦想！</p>\n","site":{"data":{}},"excerpt":"<p>摘录自<a href=\"https://juejin.im/user/57a999616be3ff00654e34cc\">ssssyoki</a>的 <a href=\"https://juejin.im/post/59e85eebf265da430d571f89\">这一次，彻底弄懂 JavaScript 执行机制</a></p>\n<h2 id=\"这一次，彻底弄懂-JavaScript-执行机制\"><a href=\"#这一次，彻底弄懂-JavaScript-执行机制\" class=\"headerlink\" title=\"这一次，彻底弄懂 JavaScript 执行机制\"></a>这一次，彻底弄懂 JavaScript 执行机制</h2><p>本文的目的就是要保证你彻底弄懂javascript的执行机制，如果读完本文还不懂，可以揍我。</p>\n<p>不论你是javascript新手还是老鸟，不论是面试求职，还是日常开发工作，我们经常会遇到这样的情况：给定的几行代码，我们需要知道其输出内容和顺序。因为javascript是一门单线程语言，所以我们可以得出结论：</p>\n<ul>\n<li>javascript是按照语句出现的顺序执行的</li>\n</ul>\n<p>看到这里读者要打人了：我难道不知道js是一行一行执行的？还用你说？稍安勿躁，正因为js是一行一行执行的，所以我们以为js都是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure>","more":"<p>然而实际上js是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;定时器开始啦&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;马上执行for循环啦&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++)&#123;</span><br><span class=\"line\">        i == <span class=\"number\">99</span> &amp;&amp; resolve();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;执行then函数啦&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;代码执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>依照<strong>js是按照语句出现的顺序执行</strong>这个理念，我自信的写下输出结果：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span><span class=\"string\">&quot;定时器开始啦&quot;</span></span><br><span class=\"line\"><span class=\"regexp\">//</span><span class=\"string\">&quot;马上执行for循环啦&quot;</span></span><br><span class=\"line\"><span class=\"regexp\">//</span><span class=\"string\">&quot;执行then函数啦&quot;</span></span><br><span class=\"line\"><span class=\"regexp\">//</span><span class=\"string\">&quot;代码执行结束&quot;</span></span><br></pre></td></tr></table></figure>\n<p>去chrome上验证下，结果完全不对，瞬间懵了，说好的一行一行执行的呢？</p>\n<p>我们真的要彻底弄明白javascript的执行机制了。</p>\n<h3 id=\"关于javascript\"><a href=\"#关于javascript\" class=\"headerlink\" title=\"关于javascript\"></a>关于javascript</h3><p>javascript是一门<strong>单线程</strong>语言，在最新的HTML5中提出了Web-Worker，但javascript是单线程这一核心仍未改变。所以一切javascript版的”多线程”都是用单线程模拟出来的，一切javascript多线程都是纸老虎！</p>\n<h3 id=\"javascript事件循环\"><a href=\"#javascript事件循环\" class=\"headerlink\" title=\"javascript事件循环\"></a>javascript事件循环</h3><p>既然js是单线程，那就像只有一个窗口的银行，客户需要排队一个一个办理业务，同理js任务也要一个一个顺序执行。如果一个任务耗时过长，那么后一个任务也必须等着。那么问题来了，假如我们想浏览新闻，但是新闻包含的超清图片加载很慢，难道我们的网页要一直卡着直到图片完全显示出来？因此聪明的程序员将任务分为两类：</p>\n<ul>\n<li>同步任务</li>\n<li>异步任务</li>\n</ul>\n<p>当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染。而像加载图片音乐之类占用资源大耗时久的任务，就是异步任务。关于这部分有严格的文字定义，但本文的目的是用最小的学习成本彻底弄懂执行机制，所以我们用导图来说明：<br><img src=\"/img/1.jpg\" alt=\"1\"></p>\n<p>导图要表达的内容用文字来表述的话：</p>\n<ul>\n<li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。</li>\n<li>当指定的事情完成时，Event Table会将这个函数移入Event Queue。</li>\n<li>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</li>\n<li>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</li>\n</ul>\n<p>我们不禁要问了，那怎么知道主线程执行栈为空啊？js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。</p>\n<p>说了这么多文字，不如直接一段代码更直白：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = [];</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>:www.javascript.com,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:data,</span><br><span class=\"line\">    <span class=\"attr\">success</span>:<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;发送成功!&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;代码执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>上面是一段简易的<code>ajax</code>请求代码：</p>\n<ul>\n<li>ajax进入Event Table，注册回调函数<code>success</code>。</li>\n<li>执行<code>console.log(&#39;代码执行结束&#39;)</code>。</li>\n<li>ajax事件完成，回调函数<code>success</code>进入Event Queue。</li>\n<li>主线程从Event Queue读取回调函数<code>success</code>并执行。<br>相信通过上面的文字和代码，你已经对js的执行顺序有了初步了解。接下来我们来研究进阶话题：setTimeout。</li>\n</ul>\n<h3 id=\"又爱又恨的setTimeout\"><a href=\"#又爱又恨的setTimeout\" class=\"headerlink\" title=\"又爱又恨的setTimeout\"></a>又爱又恨的setTimeout</h3><p>大名鼎鼎的<code>setTimeout</code>无需再多言，大家对他的第一印象就是异步可以延时执行，我们经常这么实现延时3秒执行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;延时3秒&#x27;</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n<p>渐渐的<code>setTimeout</code>用的地方多了，问题也出现了，有时候明明写的延时3秒，实际却5，6秒才执行函数，这又咋回事啊？</p>\n<p>先看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    task();</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;执行console&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>根据前面我们的结论，<code>setTimeout</code>是异步的，应该先执行<code>console.log</code>这个同步任务，所以我们的结论是：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>执行console</span><br><span class=\"line\"><span class=\"regexp\">//</span>task()复制代码</span><br></pre></td></tr></table></figure>\n<p>去验证一下，结果正确！<br>然后我们修改一下前面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    task()</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sleep(<span class=\"number\">10000000</span>)</span><br></pre></td></tr></table></figure>\n<p>乍一看其实差不多嘛，但我们把这段代码在chrome执行一下，却发现控制台执行<code>task()</code>需要的时间远远超过3秒，说好的延时三秒，为啥现在需要这么长时间啊？</p>\n<p>这时候我们需要重新理解<code>setTimeout</code>的定义。我们先说上述代码是怎么执行的：</p>\n<ul>\n<li><code>task()</code>进入Event Table并注册,计时开始。</li>\n<li>执行<code>sleep</code>函数，很慢，非常慢，计时仍在继续。</li>\n<li>3秒到了，计时事件<code>timeout</code>完成，<code>task()</code>进入Event Queue，但是<code>sleep</code>也太慢了吧，还没执行完，只好等着。</li>\n<li><code>sleep</code>终于执行完了，<code>task()</code>终于从Event Queue进入了主线程执行。</li>\n</ul>\n<p>上述的流程走完，我们知道<code>setTimeout</code>这个函数，是经过指定时间后，把要执行的任务(本例中为<code>task()</code>)加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒。</p>\n<p>我们还经常遇到<code>setTimeout(fn,0)</code>这样的代码，0秒后执行又是什么意思呢？是不是可以立即执行呢？</p>\n<p>答案是不会的，<code>setTimeout(fn,0)</code>的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。举例说明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;先执行这里&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;执行啦&#x27;</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;先执行这里&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;执行啦&#x27;</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>代码1的输出结果是：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>先执行这里</span><br><span class=\"line\"><span class=\"regexp\">//</span>执行啦复制代码</span><br></pre></td></tr></table></figure>\n<p>代码2的输出结果是：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>先执行这里</span><br><span class=\"line\"><span class=\"regexp\">//</span> ... <span class=\"number\">3</span>s later</span><br><span class=\"line\"><span class=\"regexp\">//</span> 执行啦复制代码</span><br></pre></td></tr></table></figure>\n<p>关于<code>setTimeout</code>要补充的是，即便主线程为空，0毫秒实际上也是达不到的。根据HTML的标准，最低是4毫秒。有兴趣的同学可以自行了解。</p>\n<h3 id=\"又恨又爱的setInterval\"><a href=\"#又恨又爱的setInterval\" class=\"headerlink\" title=\"又恨又爱的setInterval\"></a>又恨又爱的setInterval</h3><p>上面说完了<code>setTimeout</code>，当然不能错过它的孪生兄弟<code>setInterval</code>。他俩差不多，只不过后者是循环的执行。对于执行顺序来说，<code>setInterval</code>会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待。</p>\n<p>唯一需要注意的一点是，对于<code>setInterval(fn,ms)</code>来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。<strong>一旦<code>setInterval</code>的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了</strong>。这句话请读者仔细品味。</p>\n<h3 id=\"Promise与process-nextTick-callback\"><a href=\"#Promise与process-nextTick-callback\" class=\"headerlink\" title=\"Promise与process.nextTick(callback)\"></a>Promise与process.nextTick(callback)</h3><p>传统的定时器我们已经研究过了，接着我们探究<code>Promise</code>与<code>process.nextTick(callback)</code>的表现。</p>\n<p><code>Promise</code>的定义和功能本文不再赘述，不了解的读者可以学习一下阮一峰老师的<a href=\"http://es6.ruanyifeng.com/#docs/promise\">Promise</a>。而<code>process.nextTick(callback)</code>类似node.js版的”setTimeout”，在事件循环的下一次循环中调用 callback 回调函数。</p>\n<p>我们进入正题，除了广义的同步任务和异步任务，我们对任务有更精细的定义：</p>\n<ul>\n<li>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval</li>\n<li>micro-task(微任务)：Promise，process.nextTick</li>\n</ul>\n<p>不同类型的任务会进入对应的Event Queue，比如<code>setTimeout</code>和<code>setInterval</code>会进入相同的Event Queue。</p>\n<p>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。听起来有点绕，我们用文章最开始的一段代码说明：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setTimeout&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise&#x27;</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;then&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;console&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这段代码作为宏任务，进入主线程。</li>\n<li>先遇到<code>setTimeout</code>，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)</li>\n<li>接下来遇到了<code>Promise</code>，<code>new Promise</code>立即执行，<code>then</code>函数分发到微任务Event Queue。</li>\n<li>遇到<code>console.log()</code>，立即执行。</li>\n<li>好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了<code>then</code>在微任务Event Queue里面，执行。</li>\n<li>ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中<code>setTimeout</code>对应的回调函数，立即执行。</li>\n<li>结束。</li>\n</ul>\n<p>事件循环，宏任务，微任务的关系如图所示：<br><img src=\"/img/2.jpg\" alt=\"2\"></p>\n<p>我们来分析一段较复杂的代码，看看你是否真的掌握了js的执行机制：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;4&#x27;</span>);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;6&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;7&#x27;</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;8&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;9&#x27;</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;10&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;11&#x27;</span>);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;12&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>第一轮事件循环流程分析如下：</p>\n<ul>\n<li>整体script作为第一个宏任务进入主线程，遇到<code>console.log</code>，输出1。</li>\n<li>遇到<code>setTimeout</code>，其回调函数被分发到宏任务Event Queue中。我们暂且记为<code>setTimeout1</code>。</li>\n<li>遇到<code>process.nextTick()</code>，其回调函数被分发到微任务Event Queue中。我们记为<code>process1</code>。</li>\n<li>遇到<code>Promise</code>，<code>new Promise</code>直接执行，输出7。<code>then</code>被分发到微任务Event Queue中。我们记为<code>then1</code>。</li>\n<li>又遇到了<code>setTimeout</code>，其回调函数被分发到宏任务Event Queue中，我们记为<code>setTimeout2</code>。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务Event Queue</th>\n<th>微任务Event Queue</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>setTimeout1</td>\n<td>process1</td>\n</tr>\n<tr>\n<td>setTimeout2</td>\n<td>then1</td>\n</tr>\n</tbody></table>\n<ul>\n<li>上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。</li>\n<li>我们发现了<code>process1</code>和<code>then1</code>两个微任务。</li>\n<li>执行<code>process1</code>,输出6。</li>\n<li>执行<code>then1</code>，输出8。</li>\n</ul>\n<p>好了，第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。</p>\n<ul>\n<li>那么第二轮时间循环从<code>setTimeout1</code>宏任务开始：</li>\n<li>首先输出2。</li>\n<li>接下来遇到了<code>process.nextTick()</code>，同样将其分发到微任务Event Queue中，记为<code>process2</code>。</li>\n<li><code>new Promise</code>立即执行输出4，<code>then</code>也分发到微任务Event Queue中，记为<code>then2</code>。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务Event Queue</th>\n<th>微任务Event Queue</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>setTimeout2</td>\n<td>process2</td>\n</tr>\n<tr>\n<td></td>\n<td>then2</td>\n</tr>\n</tbody></table>\n<ul>\n<li>第二轮事件循环宏任务结束，我们发现有<code>process2</code>和<code>then2</code>两个微任务可以执行。</li>\n<li>输出3。</li>\n<li>输出5。</li>\n<li>第二轮事件循环结束，第二轮输出2，4，3，5。</li>\n<li>第三轮事件循环开始，此时只剩<code>setTimeout2</code>了，执行。</li>\n<li>直接输出9。</li>\n<li>将<code>process.nextTick()</code>分发到微任务Event Queue中。记为<code>process3</code>。</li>\n<li>直接执行<code>new Promise</code>，输出11。</li>\n<li>将<code>then</code>分发到微任务Event Queue中，记为<code>then3</code>。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>宏任务Event Queue</th>\n<th>微任务Event Queue</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>process3</td>\n</tr>\n<tr>\n<td></td>\n<td>then3</td>\n</tr>\n</tbody></table>\n<ul>\n<li>第三轮事件循环宏任务执行结束，执行两个微任务<code>process3</code>和<code>then3</code>。</li>\n<li>输出10。</li>\n<li>输出12。</li>\n<li>第三轮事件循环结束，第三轮输出9，11，10，12。</li>\n</ul>\n<p>整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。<br>(请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)</p>\n<h3 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h3><h4 id=\"js的异步\"><a href=\"#js的异步\" class=\"headerlink\" title=\"js的异步\"></a>js的异步</h4><p>我们从最开头就说javascript是一门单线程语言，不管是什么新框架新语法糖实现的所谓异步，其实都是用同步的方法去模拟的，牢牢把握住单线程这点非常重要。</p>\n<h4 id=\"事件循环Event-Loop\"><a href=\"#事件循环Event-Loop\" class=\"headerlink\" title=\"事件循环Event Loop\"></a>事件循环Event Loop</h4><p>事件循环是js实现异步的一种方法，也是js的执行机制。</p>\n<h4 id=\"javascript的执行和运行\"><a href=\"#javascript的执行和运行\" class=\"headerlink\" title=\"javascript的执行和运行\"></a>javascript的执行和运行</h4><p>执行和运行有很大的区别，javascript在不同的环境下，比如node，浏览器，Ringo等等，执行方式是不同的。而运行大多指javascript解析引擎，是统一的。</p>\n<h4 id=\"setImmediate\"><a href=\"#setImmediate\" class=\"headerlink\" title=\"setImmediate\"></a>setImmediate</h4><p>微任务和宏任务还有很多种类，比如setImmediate等等，执行都是有共同点的，有兴趣的同学可以自行了解。</p>\n<h4 id=\"最后的最后\"><a href=\"#最后的最后\" class=\"headerlink\" title=\"最后的最后\"></a>最后的最后</h4><p>javascript是一门单线程语言<br>Event Loop是javascript的执行机制<br>牢牢把握两个基本点，以认真学习javascript为中心，早日实现成为前端高手的伟大梦想！</p>"},{"title":"npm摘录","date":"2019-12-30T23:30:25.000Z","_content":"摘录自： [Node学习(1)--NPM](https://www.jianshu.com/p/30ef3c874c1e?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=weixin)\n\n## 简介\n`npm`有两层含义。一层含义是Node的开放式模块登记和管理系统，网址为[npmjs.org](https://www.npmjs.com/)。另一层含义是Node默认的模块管理器，是一个命令行下的软件，用来安装和管理Node模块。\n\n`npm`不需要单独安装。在安装Node的时候，会连带一起安装`npm`。但是，Node附带的`npm`可能不是最新版本，最好用下面的命令，更新到最新版本。\n```\n$ npm install npm@latest -g\n```\n上面的命令中，`@latest`表示最新版本，`-g`表示全局安装。所以，命令的主干是`npm install npm`，也就是使用`npm`安装自己。之所以可以这样，是因为`npm`本身与Node的其他模块没有区别。\n\n然后，运行下面的命令，查看各种信息。\n```\n# 查看 npm 命令列表\n$ npm help\n\n# 查看各个命令的简单用法\n$ npm -l\n\n# 查看 npm 的版本\n$ npm -v\n\n# 查看 npm 的配置\n$ npm config list -l\n```\n<!-- more -->\n## npm init\n`npm init`用来初始化生成一个新的`package.json`文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。\n\n如果使用了`-f`（代表force）、`-y`（代表yes），则跳过提问阶段，直接生成一个新的`package.json`文件。\n```\n$ npm init -y\n```\n## npm set\n`npm set`用来设置环境变量。\n```\n$ npm set init-author-name 'Your name'\n$ npm set init-author-email 'Your email'\n$ npm set init-author-url 'http://yourdomain.com'\n$ npm set init-license 'MIT'\n```\n上面命令等于为`npm init`设置了默认值，以后执行`npm init`的时候，`package.json`的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的`~/.npmrc`文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行`npm config`。\n```\n$ npm set save-exact true\n```\n上面命令设置加入模块时，`package.json`将记录模块的确切版本，而不是一个可选的版本范围。\n\n## npm config\n```\n$ npm config set prefix $dir\n```\n上面的命令将指定的`$dir`目录，设为模块的全局安装目录。如果当前有这个目录的写权限，那么运行`npm install`的时候，就不再需要`sudo`命令授权了。\n```\n$ npm config set save-prefix ~\n```\n上面的命令使得`npm install --save`和`npm install --save-dev`安装新模块时，允许的版本范围从克拉符号（`^`）改成波浪号（`~`），即从允许小版本升级，变成只允许补丁包的升级。\n```\n$ npm config set init.author.name $name\n$ npm config set init.author.email $email\n```\n上面命令指定使用`npm init`时，生成的`package.json`文件的字段默认值。\n\n## npm info\n`npm info`命令可以查看每个模块的具体信息。比如，查看`underscore`模块的信息。\n```javascript \n$ npm info underscore\n{ name: 'underscore',\n  description: 'JavaScript\\'s functional programming helper library.',\n  'dist-tags': { latest: '1.5.2', stable: '1.5.2' },\n  repository:\n   { type: 'git',\n     url: 'git://github.com/jashkenas/underscore.git' },\n  homepage: 'http://underscorejs.org',\n  main: 'underscore.js',\n  version: '1.5.2',\n  devDependencies: { phantomjs: '1.9.0-1' },\n  licenses:\n   { type: 'MIT',\n     url: 'https://raw.github.com/jashkenas/underscore/master/LICENSE' },\n  files:\n   [ 'underscore.js',\n     'underscore-min.js',\n     'LICENSE' ],\n  readmeFilename: 'README.md'}\n```\n上面命令返回一个JavaScript对象，包含了underscore模块的详细信息。这个对象的每个成员，都可以直接从info命令查询。\n```\n$ npm info underscore description\nJavaScript's functional programming helper library.\n\n$ npm info underscore homepage\nhttp://underscorejs.org\n\n$ npm info underscore version\n1.5.2\n```\n## npm search\n`npm search`命令用于搜索npm仓库，它后面可以跟字符串，也可以跟正则表达式。\n```\n$ npm search <搜索词>\n```\n下面是一个例子。\n```\n$ npm search node-gyp\n// NAME                  DESCRIPTION\n// autogypi              Autogypi handles dependencies for node-gyp projects.\n// grunt-node-gyp        Run node-gyp commands from Grunt.\n// gyp-io                Temporary solution to let node-gyp run `rebuild` under…\n// ...\n```\n## npm list\n`npm list`命令以树型结构列出当前项目安装的所有模块，以及它们依赖的模块。\n```\n$ npm list\n```\n加上global参数，会列出全局安装的模块。\n```\n$ npm list -global\n```\nnpm list命令也可以列出单个模块。\n```\n$ npm list underscore\n```\n## npm install\n### 基本用法\nNode模块采用`npm install`命令安装。\n\n每个模块可以“全局安装”，也可以“本地安装”。“全局安装”指的是将一个模块安装到系统目录中，各个项目都可以调用。一般来说，全局安装只适用于工具模块，比如`eslint`和`gulp`。“本地安装”指的是将一个模块下载到当前项目的`node_modules`子目录，然后只有在项目目录之中，才能调用这个模块。\n```\n# 本地安装\n$ npm install <package name>\n\n# 全局安装\n$ sudo npm install -global <package name>\n$ sudo npm install -g <package name>\n```\n`npm install`也支持直接输入Github代码库地址。\n```\n$ npm install git://github.com/package/path.git\n$ npm install git://github.com/package/path.git#0.1.0\n```\n安装之前，`npm install`会先检查，`node_modules`目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。\n\n如果你希望，一个模块不管是否安装过，npm 都要强制重新安装，可以使用`-f`或`--force`参数。\n```\n$ npm install <packageName> --force\n```\n如果你希望，所有模块都要强制重新安装，那就删除`node_modules`目录，重新执行`npm install`。\n```\n$ rm -rf node_modules\n$ npm install\n```\n### 安装不同版本\ninstall命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上@和版本号。\n```\n$ npm install sax@latest\n$ npm install sax@0.1.1\n$ npm install sax@\">=0.1.0 <0.2.0\"\n```\n如果使用`--save-exact`参数，会在`package.json`文件指定安装模块的确切版本。\n```\n$ npm install readable-stream --save --save-exact\n```\ninstall命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在packages.json文件的哪一项中。\n\n–save：模块名将被添加到dependencies，可以简化为参数`-S`。  \n–save-dev: 模块名将被添加到devDependencies，可以简化为参数`-D`。\n```\n$ npm install sax --save\n$ npm install node-tap --save-dev\n# 或者\n$ npm install sax -S\n$ npm install node-tap -D\n```\n如果要安装beta版本的模块，需要使用下面的命令。\n```\n# 安装最新的beta版\n$ npm install <module-name>@beta (latest beta)\n\n# 安装指定的beta版\n$ npm install <module-name>@1.3.1-beta.3\n```\n`npm install`默认会安装`dependencies`字段和`devDependencies`字段中的所有模块，如果使用`--production`参数，可以只安装`dependencies`字段的模块。\n```\n$ npm install --production\n# 或者\n$ NODE_ENV=production npm install\n```\n一旦安装了某个模块，就可以在代码中用`require`命令加载这个模块。\n```javascript\nvar backbone = require('backbone')\nconsole.log(backbone.VERSION)\n```\n### 避免系统权限\n默认情况下，Npm全局模块都安装在系统目录（比如`/usr/local/lib/`），普通用户没有写入权限，需要用到`sudo`命令。这不是很方便，我们可以在没有root权限的情况下，安装全局模块。\n\n首先，在主目录下新建配置文件`.npmrc`，然后在该文件中将`prefix`变量定义到主目录下面。\n```\nprefix = /home/yourUsername/npm\n```\n然后在主目录下新建`npm`子目录。\n```\n$ mkdir ~/npm\n```\n此后，全局安装的模块都会安装在这个子目录中，npm也会到`~/npm/bin`目录去寻找命令。\n\n最后，将这个路径在`.bash_profile`文件（或`.bashrc`文件）中加入PATH变量。\n```\nexport PATH=~/npm/bin:$PATH\n```\n## npm update，npm uninstall\n`npm update`命令可以更新本地安装的模块。\n```\n# 升级当前项目的指定模块\n$ npm update [package name]\n\n# 升级全局安装的模块\n$ npm update -global [package name]\n```\n它会先到远程仓库查询最新版本，然后查询本地版本。如果本地版本不存在，或者远程版本较新，就会安装。\n\n使用`-S`或`--save`参数，可以在安装的时候更新`package.json`里面模块的版本号。\n```\n// 更新之前的package.json\ndependencies: {\n  dep1: \"^1.1.1\"\n}\n\n// 更新之后的package.json\ndependencies: {\n  dep1: \"^1.2.2\"\n}\n```\n注意，从npm v2.6.1 开始，`npm update`只更新顶层模块，而不更新依赖的依赖，以前版本是递归更新的。如果想取到老版本的效果，要使用下面的命令。\n```\n$ npm --depth 9999 update\n```\n`npm uninstall`命令，卸载已安装的模块。\n```\n$ npm uninstall [package name]\n\n# 卸载全局模块\n$ npm uninstall [package name] -global\n```\n## npm run\n`npm`不仅可以用于模块管理，还可以用于执行脚本。`package.json`文件有一个`scripts`字段，可以用于指定脚本命令，供`npm`直接调用。\n```javascript\n{\n  \"name\": \"myproject\",\n  \"devDependencies\": {\n    \"jshint\": \"latest\",\n    \"browserify\": \"latest\",\n    \"mocha\": \"latest\"\n  },\n  \"scripts\": {\n    \"lint\": \"jshint **.js\",\n    \"test\": \"mocha test/\"\n  }\n}\n```\n上面代码中，`scripts`字段指定了两项命令`lint`和`test`。命令行输入`npm run-script lint`或者`npm run lint`，就会执行`jshint **.js`，输入`npm run-script test`或者`npm run test`，就会执行`mocha test/`。`npm run`是`npm run-script`的缩写，一般都使用前者，但是后者可以更好地反应这个命令的本质。\n\n`npm run`命令会自动在环境变量`$PATH`添加`node_modules/.bin`目录，所以`scripts`字段里面调用命令时不用加上路径，这就避免了全局安装NPM模块。\n\n`npm run`如果不加任何参数，直接运行，会列出`package.json`里面所有可以执行的脚本命令。\n\nnpm内置了两个命令简写，`npm test`等同于执行`npm run test`，`npm start`等同于执行`npm run start`。\n\n`npm run`会创建一个Shell，执行指定的命令，并临时将`node_modules/.bin`加入PATH变量，这意味着本地模块可以直接运行。\n\n举例来说，你执行ESLint的安装命令。\n```\n$ npm i eslint --save-dev\n```\n运行上面的命令以后，会产生两个结果。首先，ESLint被安装到当前目录的`node_modules`子目录；其次，`node_modules/.bin`目录会生成一个符号链接`node_modules/.bin/eslint`，指向ESLint模块的可执行脚本。\n\n然后，你就可以在`package.json`的`script`属性里面，不带路径的引用`eslint`这个脚本。\n```javascript\n{\n  \"name\": \"Test Project\",\n  \"devDependencies\": {\n    \"eslint\": \"^1.10.3\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint .\"\n  }\n}\n```\n等到运行`npm run lint`的时候，它会自动执行`./node_modules/.bin/eslint .`。\n\n如果直接运行`npm run`不给出任何参数，就会列出`scripts`属性下所有命令。\n```\n$ npm run\nAvailable scripts in the user-service package:\n  lint\n     jshint **.js\n  test\n    mocha test/\n```\n下面是另一个`package.json`文件的例子。\n```\n\"scripts\": {\n  \"watch\": \"watchify client/main.js -o public/app.js -v\",\n  \"build\": \"browserify client/main.js -o public/app.js\",\n  \"start\": \"npm run watch & nodemon server.js\",\n  \"test\": \"node test/all.js\"\n},\n```\n上面代码在`scripts`项，定义了四个别名，每个别名都有对应的脚本命令。\n```\n$ npm run watch\n$ npm run build\n$ npm run start\n$ npm run test\n```\n其中，`start`和`test`属于特殊命令，可以省略`run`。\n```\n$ npm start\n$ npm test\n```\n如果希望一个操作的输出，是另一个操作的输入，可以借用Linux系统的管道命令，将两个操作连在一起。\n```\n\"build-js\": \"browserify browser/main.js | uglifyjs -mc > static/bundle.js\"\n```\n但是，更方便的写法是引用其他npm run命令。\n```\n\"build\": \"npm run build-js && npm run build-css\"\n```\n上面的写法是先运行`npm run build-js`，然后再运行`npm run build-css`，两个命令中间用`&&`连接。如果希望两个命令同时平行执行，它们中间可以用`&`连接。\n\n下面是一个流操作的例子。\n```\n\"devDependencies\": {\n  \"autoprefixer\": \"latest\",\n  \"cssmin\": \"latest\"\n},\n\n\"scripts\": {\n  \"build:css\": \"autoprefixer -b 'last 2 versions' < assets/styles/main.css | cssmin > dist/main.css\"\n}\n```\n写在`scripts`属性中的命令，也可以在`node_modules/.bin`目录中直接写成bash脚本。下面是一个bash脚本。\n```\n#!/bin/bash\n\ncd site/main\nbrowserify browser/main.js | uglifyjs -mc > static/bundle.js\n```\n假定上面的脚本文件名为build.sh，并且权限为可执行，就可以在scripts属性中引用该文件。\n```\n\"build-js\": \"bin/build.sh\"\n```\n### 参数\n`npm run`命令还可以添加参数。\n```\n\"scripts\": {\n  \"test\": \"mocha test/\"\n}\n```\n上面代码指定`npm test`，实际运行`mocha test/`。如果要通过`npm test`命令，将参数传到mocha，则参数之前要加上两个连词线。\n```\n$ npm run test -- anothertest.js\n# 等同于\n$ mocha test/ anothertest.js\n```\n上面命令表示，mocha要运行所有`test`子目录的测试脚本，以及另外一个测试脚本[anothertest.js](http://anothertest.js/)。\n\n`npm run`本身有一个参数`-s`，表示关闭npm本身的输出，只输出脚本产生的结果。\n```\n// 输出npm命令头\n$ npm run test\n\n// 不输出npm命令头\n$ npm run -s test\n```\n## scripts脚本命令最佳实践\n`scripts`字段的脚本命令，有一些最佳实践，可以方便开发。首先，安装`npm-run-all`模块。\n```\n$ npm install npm-run-all --save-dev\n```\n这个模块用于运行多个`scripts`脚本命令。\n```\n# 继发执行\n$ npm-run-all build:html build:js\n# 等同于\n$ npm run build:html && npm run build:js\n\n# 并行执行\n$ npm-run-all --parallel watch:html watch:js\n# 等同于\n$ npm run watch:html & npm run watch:js\n\n# 混合执行\n$ npm-run-all clean lint --parallel watch:html watch:js\n# 等同于\n$ npm-run-all clean lint\n$ npm-run-all --parallel watch:html watch:js\n\n# 通配符\n$ npm-run-all --parallel watch:*\n```\n### start脚本命令\n\n`start`脚本命令，用于启动应用程序。\n```\n\"start\": \"npm-run-all --parallel dev serve\"\n```\n上面命令并行执行`dev`脚本命令和`serve`\n脚本命令，等同于下面的形式。\n```\n$ npm run dev & npm run serve\n```\n如果start脚本没有配置，`npm start`命令默认执行下面的脚本，前提是模块的根目录存在一个server.js文件。\n```\n$ node server.js\n```\n### dev脚本命令\n\n`dev`脚本命令，规定开发阶段所要做的处理，比如构建网页资源。\n```\n\"dev\": \"npm-run-all dev:*\"\n```\n上面命令用于继发执行所有`dev`的子命令。\n```\n\"predev:sass\": \"node-sass --source-map src/css/hoodie.css.map --output-style nested src/sass/base.scss src/css/hoodie.css\"\n```\n上面命令将sass文件编译为css文件，并生成source map文件。\n```\n\"dev:sass\": \"node-sass --source-map src/css/hoodie.css.map --watch --output-style nested src/sass/base.scss src/css/hoodie.css\"\n```\n上面命令会监视sass文件的变动，只要有变动，就自动将其编译为css文件。\n```\n\"dev:autoprefix\": \"postcss --use autoprefixer --autoprefixer.browsers \\\"> 5%\\\" --output src/css/hoodie.css src/css/hoodie.css\"\n```\n上面命令为css文件加上浏览器前缀，限制条件是只考虑市场份额大于5%的浏览器。\n\n### serve脚本命令\n\n`serve`脚本命令用于启动服务。\n```\n\"serve\": \"live-server dist/ --port=9090\"\n```\n上面命令启动服务，用的是`live-server`模块，将服务启动在9090端口，展示`dist`子目录。\n\n`live-server`模块有三个功能。\n\n* 启动一个HTTP服务器，展示指定目录的`index.html`文件，通过该文件加载各种网络资源，这是`file://`协议做不到的。\n* 添加自动刷新功能。只要指定目录之中，文件有任何变化，它就会刷新页面。\n* `npm run serve`命令执行以后，自动打开浏览器。  \n以前，上面三个功能需要三个模块来完成：`http-server`、`live-reload`和`opener`，现在只要`live-server`一个模块就够了。\n\n### test脚本命令\n\n`test`脚本命令用于执行测试。\n```\n\"test\": \"npm-run-all test:*\",\n\"test:lint\": \"sass-lint --verbose --config .sass-lint.yml src/sass/*\"\n```\n上面命令规定，执行测试时，运行`lint`脚本，检查脚本之中的语法错误。\n\n### prod脚本命令\n\n`prod`脚本命令，规定进入生产环境时需要做的处理。\n```\n\"prod\": \"npm-run-all prod:*\",\n\"prod:sass\": \"node-sass --output-style compressed src/sass/base.scss src/css/prod/hoodie.min.css\",\n\"prod:autoprefix\": \"postcss --use autoprefixer --autoprefixer.browsers \"> 5%\" --output src/css/prod/hoodie.min.css src/css/prod/hoodie.min.css\"\n```\n上面命令将sass文件转为css文件，并加上浏览器前缀。\n\n### help脚本命令\n\n`help`脚本命令用于展示帮助信息。\n```\n\"help\": \"markdown-chalk --input DEVELOPMENT.md\"\n```\n上面命令之中，`markdown-chalk`模块用于将指定的markdown文件，转为彩色文本显示在终端之中。\n\n### docs脚本命令\n\n`docs`脚本命令用于生成文档。\n```\n\"docs\": \"kss-node --source src/sass --homepage ../../styleguide.md\"\n```\n上面命令使用`kss-node`模块，提供源码的注释生成markdown格式的文档。\n\n### pre- 和 post- 脚本\n`npm run`为每条命令提供了`pre-`和`post-`两个钩子（hook）。以`npm run lint`为例，执行这条命令之前，npm会先查看有没有定义prelint和postlint两个钩子，如果有的话，就会先执行`npm run prelint`，然后执行`npm run lint`，最后执行`npm run postlint`。\n```javascript\n{\n  \"name\": \"myproject\",\n  \"devDependencies\": {\n    \"eslint\": \"latest\"\n    \"karma\": \"latest\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint --cache --ext .js --ext .jsx src\",\n    \"test\": \"karma start --log-leve=error karma.config.js --single-run=true\",\n    \"pretest\": \"npm run lint\",\n    \"posttest\": \"echo 'Finished running tests'\"\n  }\n}\n```\n上面代码是一个`package.json`文件的例子。如果执行`npm test`，会按下面的顺序执行相应的命令。\n\n    1. `pretest`\n    1. `test`\n    1. `posttest`\n如果执行过程出错，就不会执行排在后面的脚本，即如果prelint脚本执行出错，就不会接着执行lint和postlint脚本。\n\n下面是一个例子。\n```javascript\n{\n  \"test\": \"karma start\",\n  \"test:lint\": \"eslint . --ext .js --ext .jsx\",\n  \"pretest\": \"npm run test:lint\"\n}\n```\n上面代码中，在运行`npm run test`之前，会自动检查代码，即运行`npm run test:lint`命令。\n\n下面是一些常见的`pre-`和`post-`脚本。\n\n* `prepublish`：发布一个模块前执行。\n* `postpublish`：发布一个模块后执行。\n* `preinstall`：用户执行`npm install`命令时，先执行该脚本。\n* `postinstall`：用户执行`npm install`命令时，安装结束后执行该脚本，通常用于将下载的源码编译成用户需要的格式，比如有些模块需要在用户机器上跟本地的C++模块一起编译。\n* `preuninstall`：卸载一个模块前执行。\n* `postuninstall`：卸载一个模块后执行。\n* `preversion`：更改模块版本前执行。\n* `postversion`：更改模块版本后执行。\n* `pretest`：运行`npm test`命令前执行。\n* `posttest`：运行`npm test`命令后执行。\n* `prestop`：运行`npm stop`命令前执行。\n* `poststop`：运行`npm stop`命令后执行。\n* `prestart`：运行`npm start`命令前执行。\n* `poststart`：运行`npm start`命令后执行。\n* `prerestart`：运行`npm restart`命令前执行。\n* `postrestart`：运行`npm restart`命令后执行。\n对于最后一个`npm restart`命令，如果没有设置`restart`脚本，`prerestart`和`postrestart`会依次执行stop和start脚本。\n\n另外，不能在`pre`脚本之前再加`pre`，即`prepretest`脚本不起作用。\n\n注意，即使Npm可以自动运行`pre`和`post`脚本，也可以手动执行它们。\n```\n$ npm run prepublish\n```\n下面是`post install`的例子。\n```javascript\n{\n  \"postinstall\": \"node lib/post_install.js\"\n}\n```\n上面的这个命令，主要用于处理从Git仓库拉下来的源码。比如，有些源码是用TypeScript写的，可能需要转换一下。\n\n下面是`publish`钩子的一个例子。\n```javascript\n{\n  \"dist:modules\": \"babel ./src --out-dir ./dist-modules\",\n  \"gh-pages\": \"webpack\",\n  \"gh-pages:deploy\": \"gh-pages -d gh-pages\",\n  \"prepublish\": \"npm run dist:modules\",\n  \"postpublish\": \"npm run gh-pages && npm run gh-pages:deploy\"\n}\n```\n上面命令在运行`npm run publish`时，会先执行Babel编译，然后调用Webpack构建，最后发到Github Pages上面。\n\n以上都是npm相关操作的钩子，如果安装某些模块，还能支持Git相关的钩子。下面以husky模块为例。\n```\n$ npm install husky --save-dev\n```\n安装以后，就能在`package.json`添加`precommit`、`prepush`等钩子。\n```javascript\n{\n    \"scripts\": {\n        \"lint\": \"eslint yourJsFiles.js\",\n        \"precommit\": \"npm run test && npm run lint\",\n        \"prepush\": \"npm run test && npm run lint\",\n        \"...\": \"...\"\n    }\n}\n```\n类似作用的模块还有`pre-commit`、`precommit-hook`等。\n\n## 内部变量\nscripts字段可以使用一些内部变量，主要是package.json的各种字段。\n\n比如，package.json的内容是`{\"name\":\"foo\", \"version\":\"1.2.5\"}`，那么变量`npm_package_name`的值是foo，变量`npm_package_version`的值是1.2.5。\n```javascript\n{\n  \"scripts\":{\n    \"bundle\": \"mkdir -p build/$npm_package_version/\"\n  }\n}\n```\n运行`npm run bundle`以后，将会生成`build/1.2.5/`子目录。\n\n`config`字段也可以用于设置内部字段。\n```\n  \"name\": \"fooproject\",\n  \"config\": {\n    \"reporter\": \"xunit\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha test/ --reporter $npm_package_config_reporter\"\n  }\n```\n上面代码中，变量`npm_package_config_reporter`对应的就是reporter。\n\n## 通配符\nnpm的通配符的规则如下。\n\n* `*` 匹配0个或多个字符\n* `?` 匹配1个字符\n* `[...]` 匹配某个范围的字符。如果该范围的第一个字符是!或^，则匹配不在该范围的字符。\n* `!(pattern|pattern|pattern)` 匹配任何不符合给定的模式\n* `?(pattern|pattern|pattern)` 匹配0个或1个给定的模式\n* `+(pattern|pattern|pattern)` 匹配1个或多个给定的模式\n* `*(a|b|c)` 匹配0个或多个给定的模式\n* `@(pattern|pat*|pat?erN)` 只匹配给定模式之一\n* `**` 如果出现在路径部分，表示0个或多个子目录。\n\n## npm link\n开发NPM模块的时候，有时我们会希望，边开发边试用，比如本地调试的时候，`require('myModule')`会自动加载本机开发中的模块。Node规定，使用一个模块时，需要将其安装到全局的或项目的`node_modules`目录之中。对于开发中的模块，解决方法就是在全局的`node_modules`目录之中，生成一个符号链接，指向模块的本地目录。\n\n`npm link`就能起到这个作用，会自动建立这个符号链接。\n\n请设想这样一个场景，你开发了一个模块`myModule`，目录为`src/myModule`，你自己的项目`myProject`要用到这个模块，项目目录为`src/myProject`。首先，在模块目录`（src/myModule）`下运行`npm link`命令。\n```\nsrc/myModule$ npm link\n```\n上面的命令会在NPM的全局模块目录内，生成一个符号链接文件，该文件的名字就是`package.json`文件中指定的模块名。\n```\n/path/to/global/node_modules/myModule -> src/myModule\n```\n这个时候，已经可以全局调用`myModule`模块了。但是，如果我们要让这个模块安装在项目内，还要进行下面的步骤。\n\n切换到项目目录，再次运行`npm link`命令，并指定模块名。\n```\nsrc/myProject$ npm link myModule\n```\n上面命令等同于生成了本地模块的符号链接。\n```\nsrc/myProject/node_modules/myModule -> /path/to/global/node_modules/myModule\n```\n然后，就可以在你的项目中，加载该模块了。\n```javascript\nvar myModule = require('myModule');\n```\n这样一来，`myModule`的任何变化，都可以直接反映在`myProject`项目之中。但是，这样也出现了风险，任何在`myProject`目录中对`myModule`的修改，都会反映到模块的源码中。\n\n如果你的项目不再需要该模块，可以在项目目录内使用`npm unlink`命令，删除符号链接。\n```\nsrc/myProject$ npm unlink myModule\n```\n## npm bin\n`npm bin`命令显示相对于当前目录的，Node模块的可执行脚本所在的目录（即`.bin`目录）。\n```\n# 项目根目录下执行\n$ npm bin\n./node_modules/.bin\n```\n## npm adduser\n`npm adduser`用于在npmjs.com注册一个用户。\n```javascript\n$ npm adduser\nUsername: YOUR_USER_NAME\nPassword: YOUR_PASSWORD\nEmail: YOUR_EMAIL@domain.com\n```\n## npm publish\n`npm publish`用于将当前模块发布到[npmjs.com](http://npmjs.com/)。执行之前，需要向[npmjs.com](http://npmjs.com/)申请用户名。\n```\n$ npm adduser\n```\n如果已经注册过，就使用下面的命令登录。\n```\n$ npm login\n```\n登录以后，就可以使用`npm publish`命令发布。\n```\n$ npm publish\n```\n如果当前模块是一个beta版，比如`1.3.1-beta.3`，那么发布的时候需要使用tag参数，将其发布到指定标签，默认的发布标签是`latest`。\n```\n$ npm publish --tag beta\n```\n如果发布私有模块，模块初始化的时候，需要加上`scope`参数。只有npm的付费用户才能发布私有模块。\n```\n$ npm init --scope=<yourscope>\n```\n如果你的模块是用ES6写的，那么发布的时候，最好转成ES5。首先，需要安装Babel。\n```\n$ npm install --save-dev babel-cli@6 babel-preset-es2015@6\n```\n然后，在`package.json`里面写入`build`脚本。\n```\n\"scripts\": {\n  \"build\": \"babel source --presets babel-preset-es2015 --out-dir distribution\",\n  \"prepublish\": \"npm run build\"\n}\n```\n运行上面的脚本，会将`source`目录里面的ES6源码文件，转为`distribution`目录里面的ES5源码文件。然后，在项目根目录下面创建两个文件`.npmignore`和`.gitignore`，分别写入以下内容。\n```\n// .npmignore\nsource\n\n// .gitignore\nnode_modules\ndistribution\n```\n## npm deprecate\n如果想废弃某个版本的模块，可以使用npm deprecate命令。\n```\n$ npm deprecate my-thing@\"< 0.2.3\" \"critical bug fixed in v0.2.3\"\n```\n运行上面的命令以后，小于`0.2.3`版本的模块的`package.json`都会写入一行警告，用户安装这些版本时，这行警告就会在命令行显示。\n\n## npm owner\n模块的维护者可以发布新版本。`npm owner`命令用于管理模块的维护者。\n```\n# 列出指定模块的维护者\n$ npm owner ls <package name>\n\n# 新增维护者\n$ npm owner add <user> <package name>\n\n# 删除维护者\n$ npm owner rm <user> <package name>\n```\n## 其他命令\n### npm home，npm repo\n`npm home`命令可以打开一个模块的主页，`npm repo`命令则是打开一个模块的代码仓库。\n```\n$ npm home $package\n$ npm repo $package\n```\n这两个命令不需要模块先安装。\n\n### npm outdated\n`npm outdated`命令检查当前项目所依赖的模块，是否已经有新版本。\n```\n$ npm outdated\n```\n它会输出当前版本（current version）、应当安装的版本（wanted version）和最新发布的版本（latest version）。\n\n### npm prune\n`npm prune`检查当前项目的`node_modules`目录中，是否有`package.json`里面没有提到的模块，然后将所有这些模块输出在命令行。\n```\n$ npm prune\n```\n### npm shrinkwrap\n`npm shrinkwrap`的作用是锁定当前项目的依赖模块的版本。\n```\n$ npm shrinkwrap\n```\n运行该命令后，会在当前项目的根目录下生成一个`npm-shrinkwrap.json`文件，内容是`node_modules`目录下所有已经安装的模块，以及它们的精确版本。\n\n下次运行`npm install`命令时，`npm`发现当前目录下有`npm-shrinkwrap.json`文件，就会只安装里面提到的模块，且版本也会保持一致。\n\n\n作者：majun00\n链接：https://www.jianshu.com/p/30ef3c874c1e\n\n","source":"_posts/npm摘录.md","raw":"---\ntitle: npm摘录\ndate: 2019-12-31 07:30:25\ncategories:\n- npm\n- 摘录\ntags:\n- npm\n---\n摘录自： [Node学习(1)--NPM](https://www.jianshu.com/p/30ef3c874c1e?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=weixin)\n\n## 简介\n`npm`有两层含义。一层含义是Node的开放式模块登记和管理系统，网址为[npmjs.org](https://www.npmjs.com/)。另一层含义是Node默认的模块管理器，是一个命令行下的软件，用来安装和管理Node模块。\n\n`npm`不需要单独安装。在安装Node的时候，会连带一起安装`npm`。但是，Node附带的`npm`可能不是最新版本，最好用下面的命令，更新到最新版本。\n```\n$ npm install npm@latest -g\n```\n上面的命令中，`@latest`表示最新版本，`-g`表示全局安装。所以，命令的主干是`npm install npm`，也就是使用`npm`安装自己。之所以可以这样，是因为`npm`本身与Node的其他模块没有区别。\n\n然后，运行下面的命令，查看各种信息。\n```\n# 查看 npm 命令列表\n$ npm help\n\n# 查看各个命令的简单用法\n$ npm -l\n\n# 查看 npm 的版本\n$ npm -v\n\n# 查看 npm 的配置\n$ npm config list -l\n```\n<!-- more -->\n## npm init\n`npm init`用来初始化生成一个新的`package.json`文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。\n\n如果使用了`-f`（代表force）、`-y`（代表yes），则跳过提问阶段，直接生成一个新的`package.json`文件。\n```\n$ npm init -y\n```\n## npm set\n`npm set`用来设置环境变量。\n```\n$ npm set init-author-name 'Your name'\n$ npm set init-author-email 'Your email'\n$ npm set init-author-url 'http://yourdomain.com'\n$ npm set init-license 'MIT'\n```\n上面命令等于为`npm init`设置了默认值，以后执行`npm init`的时候，`package.json`的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的`~/.npmrc`文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行`npm config`。\n```\n$ npm set save-exact true\n```\n上面命令设置加入模块时，`package.json`将记录模块的确切版本，而不是一个可选的版本范围。\n\n## npm config\n```\n$ npm config set prefix $dir\n```\n上面的命令将指定的`$dir`目录，设为模块的全局安装目录。如果当前有这个目录的写权限，那么运行`npm install`的时候，就不再需要`sudo`命令授权了。\n```\n$ npm config set save-prefix ~\n```\n上面的命令使得`npm install --save`和`npm install --save-dev`安装新模块时，允许的版本范围从克拉符号（`^`）改成波浪号（`~`），即从允许小版本升级，变成只允许补丁包的升级。\n```\n$ npm config set init.author.name $name\n$ npm config set init.author.email $email\n```\n上面命令指定使用`npm init`时，生成的`package.json`文件的字段默认值。\n\n## npm info\n`npm info`命令可以查看每个模块的具体信息。比如，查看`underscore`模块的信息。\n```javascript \n$ npm info underscore\n{ name: 'underscore',\n  description: 'JavaScript\\'s functional programming helper library.',\n  'dist-tags': { latest: '1.5.2', stable: '1.5.2' },\n  repository:\n   { type: 'git',\n     url: 'git://github.com/jashkenas/underscore.git' },\n  homepage: 'http://underscorejs.org',\n  main: 'underscore.js',\n  version: '1.5.2',\n  devDependencies: { phantomjs: '1.9.0-1' },\n  licenses:\n   { type: 'MIT',\n     url: 'https://raw.github.com/jashkenas/underscore/master/LICENSE' },\n  files:\n   [ 'underscore.js',\n     'underscore-min.js',\n     'LICENSE' ],\n  readmeFilename: 'README.md'}\n```\n上面命令返回一个JavaScript对象，包含了underscore模块的详细信息。这个对象的每个成员，都可以直接从info命令查询。\n```\n$ npm info underscore description\nJavaScript's functional programming helper library.\n\n$ npm info underscore homepage\nhttp://underscorejs.org\n\n$ npm info underscore version\n1.5.2\n```\n## npm search\n`npm search`命令用于搜索npm仓库，它后面可以跟字符串，也可以跟正则表达式。\n```\n$ npm search <搜索词>\n```\n下面是一个例子。\n```\n$ npm search node-gyp\n// NAME                  DESCRIPTION\n// autogypi              Autogypi handles dependencies for node-gyp projects.\n// grunt-node-gyp        Run node-gyp commands from Grunt.\n// gyp-io                Temporary solution to let node-gyp run `rebuild` under…\n// ...\n```\n## npm list\n`npm list`命令以树型结构列出当前项目安装的所有模块，以及它们依赖的模块。\n```\n$ npm list\n```\n加上global参数，会列出全局安装的模块。\n```\n$ npm list -global\n```\nnpm list命令也可以列出单个模块。\n```\n$ npm list underscore\n```\n## npm install\n### 基本用法\nNode模块采用`npm install`命令安装。\n\n每个模块可以“全局安装”，也可以“本地安装”。“全局安装”指的是将一个模块安装到系统目录中，各个项目都可以调用。一般来说，全局安装只适用于工具模块，比如`eslint`和`gulp`。“本地安装”指的是将一个模块下载到当前项目的`node_modules`子目录，然后只有在项目目录之中，才能调用这个模块。\n```\n# 本地安装\n$ npm install <package name>\n\n# 全局安装\n$ sudo npm install -global <package name>\n$ sudo npm install -g <package name>\n```\n`npm install`也支持直接输入Github代码库地址。\n```\n$ npm install git://github.com/package/path.git\n$ npm install git://github.com/package/path.git#0.1.0\n```\n安装之前，`npm install`会先检查，`node_modules`目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。\n\n如果你希望，一个模块不管是否安装过，npm 都要强制重新安装，可以使用`-f`或`--force`参数。\n```\n$ npm install <packageName> --force\n```\n如果你希望，所有模块都要强制重新安装，那就删除`node_modules`目录，重新执行`npm install`。\n```\n$ rm -rf node_modules\n$ npm install\n```\n### 安装不同版本\ninstall命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上@和版本号。\n```\n$ npm install sax@latest\n$ npm install sax@0.1.1\n$ npm install sax@\">=0.1.0 <0.2.0\"\n```\n如果使用`--save-exact`参数，会在`package.json`文件指定安装模块的确切版本。\n```\n$ npm install readable-stream --save --save-exact\n```\ninstall命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在packages.json文件的哪一项中。\n\n–save：模块名将被添加到dependencies，可以简化为参数`-S`。  \n–save-dev: 模块名将被添加到devDependencies，可以简化为参数`-D`。\n```\n$ npm install sax --save\n$ npm install node-tap --save-dev\n# 或者\n$ npm install sax -S\n$ npm install node-tap -D\n```\n如果要安装beta版本的模块，需要使用下面的命令。\n```\n# 安装最新的beta版\n$ npm install <module-name>@beta (latest beta)\n\n# 安装指定的beta版\n$ npm install <module-name>@1.3.1-beta.3\n```\n`npm install`默认会安装`dependencies`字段和`devDependencies`字段中的所有模块，如果使用`--production`参数，可以只安装`dependencies`字段的模块。\n```\n$ npm install --production\n# 或者\n$ NODE_ENV=production npm install\n```\n一旦安装了某个模块，就可以在代码中用`require`命令加载这个模块。\n```javascript\nvar backbone = require('backbone')\nconsole.log(backbone.VERSION)\n```\n### 避免系统权限\n默认情况下，Npm全局模块都安装在系统目录（比如`/usr/local/lib/`），普通用户没有写入权限，需要用到`sudo`命令。这不是很方便，我们可以在没有root权限的情况下，安装全局模块。\n\n首先，在主目录下新建配置文件`.npmrc`，然后在该文件中将`prefix`变量定义到主目录下面。\n```\nprefix = /home/yourUsername/npm\n```\n然后在主目录下新建`npm`子目录。\n```\n$ mkdir ~/npm\n```\n此后，全局安装的模块都会安装在这个子目录中，npm也会到`~/npm/bin`目录去寻找命令。\n\n最后，将这个路径在`.bash_profile`文件（或`.bashrc`文件）中加入PATH变量。\n```\nexport PATH=~/npm/bin:$PATH\n```\n## npm update，npm uninstall\n`npm update`命令可以更新本地安装的模块。\n```\n# 升级当前项目的指定模块\n$ npm update [package name]\n\n# 升级全局安装的模块\n$ npm update -global [package name]\n```\n它会先到远程仓库查询最新版本，然后查询本地版本。如果本地版本不存在，或者远程版本较新，就会安装。\n\n使用`-S`或`--save`参数，可以在安装的时候更新`package.json`里面模块的版本号。\n```\n// 更新之前的package.json\ndependencies: {\n  dep1: \"^1.1.1\"\n}\n\n// 更新之后的package.json\ndependencies: {\n  dep1: \"^1.2.2\"\n}\n```\n注意，从npm v2.6.1 开始，`npm update`只更新顶层模块，而不更新依赖的依赖，以前版本是递归更新的。如果想取到老版本的效果，要使用下面的命令。\n```\n$ npm --depth 9999 update\n```\n`npm uninstall`命令，卸载已安装的模块。\n```\n$ npm uninstall [package name]\n\n# 卸载全局模块\n$ npm uninstall [package name] -global\n```\n## npm run\n`npm`不仅可以用于模块管理，还可以用于执行脚本。`package.json`文件有一个`scripts`字段，可以用于指定脚本命令，供`npm`直接调用。\n```javascript\n{\n  \"name\": \"myproject\",\n  \"devDependencies\": {\n    \"jshint\": \"latest\",\n    \"browserify\": \"latest\",\n    \"mocha\": \"latest\"\n  },\n  \"scripts\": {\n    \"lint\": \"jshint **.js\",\n    \"test\": \"mocha test/\"\n  }\n}\n```\n上面代码中，`scripts`字段指定了两项命令`lint`和`test`。命令行输入`npm run-script lint`或者`npm run lint`，就会执行`jshint **.js`，输入`npm run-script test`或者`npm run test`，就会执行`mocha test/`。`npm run`是`npm run-script`的缩写，一般都使用前者，但是后者可以更好地反应这个命令的本质。\n\n`npm run`命令会自动在环境变量`$PATH`添加`node_modules/.bin`目录，所以`scripts`字段里面调用命令时不用加上路径，这就避免了全局安装NPM模块。\n\n`npm run`如果不加任何参数，直接运行，会列出`package.json`里面所有可以执行的脚本命令。\n\nnpm内置了两个命令简写，`npm test`等同于执行`npm run test`，`npm start`等同于执行`npm run start`。\n\n`npm run`会创建一个Shell，执行指定的命令，并临时将`node_modules/.bin`加入PATH变量，这意味着本地模块可以直接运行。\n\n举例来说，你执行ESLint的安装命令。\n```\n$ npm i eslint --save-dev\n```\n运行上面的命令以后，会产生两个结果。首先，ESLint被安装到当前目录的`node_modules`子目录；其次，`node_modules/.bin`目录会生成一个符号链接`node_modules/.bin/eslint`，指向ESLint模块的可执行脚本。\n\n然后，你就可以在`package.json`的`script`属性里面，不带路径的引用`eslint`这个脚本。\n```javascript\n{\n  \"name\": \"Test Project\",\n  \"devDependencies\": {\n    \"eslint\": \"^1.10.3\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint .\"\n  }\n}\n```\n等到运行`npm run lint`的时候，它会自动执行`./node_modules/.bin/eslint .`。\n\n如果直接运行`npm run`不给出任何参数，就会列出`scripts`属性下所有命令。\n```\n$ npm run\nAvailable scripts in the user-service package:\n  lint\n     jshint **.js\n  test\n    mocha test/\n```\n下面是另一个`package.json`文件的例子。\n```\n\"scripts\": {\n  \"watch\": \"watchify client/main.js -o public/app.js -v\",\n  \"build\": \"browserify client/main.js -o public/app.js\",\n  \"start\": \"npm run watch & nodemon server.js\",\n  \"test\": \"node test/all.js\"\n},\n```\n上面代码在`scripts`项，定义了四个别名，每个别名都有对应的脚本命令。\n```\n$ npm run watch\n$ npm run build\n$ npm run start\n$ npm run test\n```\n其中，`start`和`test`属于特殊命令，可以省略`run`。\n```\n$ npm start\n$ npm test\n```\n如果希望一个操作的输出，是另一个操作的输入，可以借用Linux系统的管道命令，将两个操作连在一起。\n```\n\"build-js\": \"browserify browser/main.js | uglifyjs -mc > static/bundle.js\"\n```\n但是，更方便的写法是引用其他npm run命令。\n```\n\"build\": \"npm run build-js && npm run build-css\"\n```\n上面的写法是先运行`npm run build-js`，然后再运行`npm run build-css`，两个命令中间用`&&`连接。如果希望两个命令同时平行执行，它们中间可以用`&`连接。\n\n下面是一个流操作的例子。\n```\n\"devDependencies\": {\n  \"autoprefixer\": \"latest\",\n  \"cssmin\": \"latest\"\n},\n\n\"scripts\": {\n  \"build:css\": \"autoprefixer -b 'last 2 versions' < assets/styles/main.css | cssmin > dist/main.css\"\n}\n```\n写在`scripts`属性中的命令，也可以在`node_modules/.bin`目录中直接写成bash脚本。下面是一个bash脚本。\n```\n#!/bin/bash\n\ncd site/main\nbrowserify browser/main.js | uglifyjs -mc > static/bundle.js\n```\n假定上面的脚本文件名为build.sh，并且权限为可执行，就可以在scripts属性中引用该文件。\n```\n\"build-js\": \"bin/build.sh\"\n```\n### 参数\n`npm run`命令还可以添加参数。\n```\n\"scripts\": {\n  \"test\": \"mocha test/\"\n}\n```\n上面代码指定`npm test`，实际运行`mocha test/`。如果要通过`npm test`命令，将参数传到mocha，则参数之前要加上两个连词线。\n```\n$ npm run test -- anothertest.js\n# 等同于\n$ mocha test/ anothertest.js\n```\n上面命令表示，mocha要运行所有`test`子目录的测试脚本，以及另外一个测试脚本[anothertest.js](http://anothertest.js/)。\n\n`npm run`本身有一个参数`-s`，表示关闭npm本身的输出，只输出脚本产生的结果。\n```\n// 输出npm命令头\n$ npm run test\n\n// 不输出npm命令头\n$ npm run -s test\n```\n## scripts脚本命令最佳实践\n`scripts`字段的脚本命令，有一些最佳实践，可以方便开发。首先，安装`npm-run-all`模块。\n```\n$ npm install npm-run-all --save-dev\n```\n这个模块用于运行多个`scripts`脚本命令。\n```\n# 继发执行\n$ npm-run-all build:html build:js\n# 等同于\n$ npm run build:html && npm run build:js\n\n# 并行执行\n$ npm-run-all --parallel watch:html watch:js\n# 等同于\n$ npm run watch:html & npm run watch:js\n\n# 混合执行\n$ npm-run-all clean lint --parallel watch:html watch:js\n# 等同于\n$ npm-run-all clean lint\n$ npm-run-all --parallel watch:html watch:js\n\n# 通配符\n$ npm-run-all --parallel watch:*\n```\n### start脚本命令\n\n`start`脚本命令，用于启动应用程序。\n```\n\"start\": \"npm-run-all --parallel dev serve\"\n```\n上面命令并行执行`dev`脚本命令和`serve`\n脚本命令，等同于下面的形式。\n```\n$ npm run dev & npm run serve\n```\n如果start脚本没有配置，`npm start`命令默认执行下面的脚本，前提是模块的根目录存在一个server.js文件。\n```\n$ node server.js\n```\n### dev脚本命令\n\n`dev`脚本命令，规定开发阶段所要做的处理，比如构建网页资源。\n```\n\"dev\": \"npm-run-all dev:*\"\n```\n上面命令用于继发执行所有`dev`的子命令。\n```\n\"predev:sass\": \"node-sass --source-map src/css/hoodie.css.map --output-style nested src/sass/base.scss src/css/hoodie.css\"\n```\n上面命令将sass文件编译为css文件，并生成source map文件。\n```\n\"dev:sass\": \"node-sass --source-map src/css/hoodie.css.map --watch --output-style nested src/sass/base.scss src/css/hoodie.css\"\n```\n上面命令会监视sass文件的变动，只要有变动，就自动将其编译为css文件。\n```\n\"dev:autoprefix\": \"postcss --use autoprefixer --autoprefixer.browsers \\\"> 5%\\\" --output src/css/hoodie.css src/css/hoodie.css\"\n```\n上面命令为css文件加上浏览器前缀，限制条件是只考虑市场份额大于5%的浏览器。\n\n### serve脚本命令\n\n`serve`脚本命令用于启动服务。\n```\n\"serve\": \"live-server dist/ --port=9090\"\n```\n上面命令启动服务，用的是`live-server`模块，将服务启动在9090端口，展示`dist`子目录。\n\n`live-server`模块有三个功能。\n\n* 启动一个HTTP服务器，展示指定目录的`index.html`文件，通过该文件加载各种网络资源，这是`file://`协议做不到的。\n* 添加自动刷新功能。只要指定目录之中，文件有任何变化，它就会刷新页面。\n* `npm run serve`命令执行以后，自动打开浏览器。  \n以前，上面三个功能需要三个模块来完成：`http-server`、`live-reload`和`opener`，现在只要`live-server`一个模块就够了。\n\n### test脚本命令\n\n`test`脚本命令用于执行测试。\n```\n\"test\": \"npm-run-all test:*\",\n\"test:lint\": \"sass-lint --verbose --config .sass-lint.yml src/sass/*\"\n```\n上面命令规定，执行测试时，运行`lint`脚本，检查脚本之中的语法错误。\n\n### prod脚本命令\n\n`prod`脚本命令，规定进入生产环境时需要做的处理。\n```\n\"prod\": \"npm-run-all prod:*\",\n\"prod:sass\": \"node-sass --output-style compressed src/sass/base.scss src/css/prod/hoodie.min.css\",\n\"prod:autoprefix\": \"postcss --use autoprefixer --autoprefixer.browsers \"> 5%\" --output src/css/prod/hoodie.min.css src/css/prod/hoodie.min.css\"\n```\n上面命令将sass文件转为css文件，并加上浏览器前缀。\n\n### help脚本命令\n\n`help`脚本命令用于展示帮助信息。\n```\n\"help\": \"markdown-chalk --input DEVELOPMENT.md\"\n```\n上面命令之中，`markdown-chalk`模块用于将指定的markdown文件，转为彩色文本显示在终端之中。\n\n### docs脚本命令\n\n`docs`脚本命令用于生成文档。\n```\n\"docs\": \"kss-node --source src/sass --homepage ../../styleguide.md\"\n```\n上面命令使用`kss-node`模块，提供源码的注释生成markdown格式的文档。\n\n### pre- 和 post- 脚本\n`npm run`为每条命令提供了`pre-`和`post-`两个钩子（hook）。以`npm run lint`为例，执行这条命令之前，npm会先查看有没有定义prelint和postlint两个钩子，如果有的话，就会先执行`npm run prelint`，然后执行`npm run lint`，最后执行`npm run postlint`。\n```javascript\n{\n  \"name\": \"myproject\",\n  \"devDependencies\": {\n    \"eslint\": \"latest\"\n    \"karma\": \"latest\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint --cache --ext .js --ext .jsx src\",\n    \"test\": \"karma start --log-leve=error karma.config.js --single-run=true\",\n    \"pretest\": \"npm run lint\",\n    \"posttest\": \"echo 'Finished running tests'\"\n  }\n}\n```\n上面代码是一个`package.json`文件的例子。如果执行`npm test`，会按下面的顺序执行相应的命令。\n\n    1. `pretest`\n    1. `test`\n    1. `posttest`\n如果执行过程出错，就不会执行排在后面的脚本，即如果prelint脚本执行出错，就不会接着执行lint和postlint脚本。\n\n下面是一个例子。\n```javascript\n{\n  \"test\": \"karma start\",\n  \"test:lint\": \"eslint . --ext .js --ext .jsx\",\n  \"pretest\": \"npm run test:lint\"\n}\n```\n上面代码中，在运行`npm run test`之前，会自动检查代码，即运行`npm run test:lint`命令。\n\n下面是一些常见的`pre-`和`post-`脚本。\n\n* `prepublish`：发布一个模块前执行。\n* `postpublish`：发布一个模块后执行。\n* `preinstall`：用户执行`npm install`命令时，先执行该脚本。\n* `postinstall`：用户执行`npm install`命令时，安装结束后执行该脚本，通常用于将下载的源码编译成用户需要的格式，比如有些模块需要在用户机器上跟本地的C++模块一起编译。\n* `preuninstall`：卸载一个模块前执行。\n* `postuninstall`：卸载一个模块后执行。\n* `preversion`：更改模块版本前执行。\n* `postversion`：更改模块版本后执行。\n* `pretest`：运行`npm test`命令前执行。\n* `posttest`：运行`npm test`命令后执行。\n* `prestop`：运行`npm stop`命令前执行。\n* `poststop`：运行`npm stop`命令后执行。\n* `prestart`：运行`npm start`命令前执行。\n* `poststart`：运行`npm start`命令后执行。\n* `prerestart`：运行`npm restart`命令前执行。\n* `postrestart`：运行`npm restart`命令后执行。\n对于最后一个`npm restart`命令，如果没有设置`restart`脚本，`prerestart`和`postrestart`会依次执行stop和start脚本。\n\n另外，不能在`pre`脚本之前再加`pre`，即`prepretest`脚本不起作用。\n\n注意，即使Npm可以自动运行`pre`和`post`脚本，也可以手动执行它们。\n```\n$ npm run prepublish\n```\n下面是`post install`的例子。\n```javascript\n{\n  \"postinstall\": \"node lib/post_install.js\"\n}\n```\n上面的这个命令，主要用于处理从Git仓库拉下来的源码。比如，有些源码是用TypeScript写的，可能需要转换一下。\n\n下面是`publish`钩子的一个例子。\n```javascript\n{\n  \"dist:modules\": \"babel ./src --out-dir ./dist-modules\",\n  \"gh-pages\": \"webpack\",\n  \"gh-pages:deploy\": \"gh-pages -d gh-pages\",\n  \"prepublish\": \"npm run dist:modules\",\n  \"postpublish\": \"npm run gh-pages && npm run gh-pages:deploy\"\n}\n```\n上面命令在运行`npm run publish`时，会先执行Babel编译，然后调用Webpack构建，最后发到Github Pages上面。\n\n以上都是npm相关操作的钩子，如果安装某些模块，还能支持Git相关的钩子。下面以husky模块为例。\n```\n$ npm install husky --save-dev\n```\n安装以后，就能在`package.json`添加`precommit`、`prepush`等钩子。\n```javascript\n{\n    \"scripts\": {\n        \"lint\": \"eslint yourJsFiles.js\",\n        \"precommit\": \"npm run test && npm run lint\",\n        \"prepush\": \"npm run test && npm run lint\",\n        \"...\": \"...\"\n    }\n}\n```\n类似作用的模块还有`pre-commit`、`precommit-hook`等。\n\n## 内部变量\nscripts字段可以使用一些内部变量，主要是package.json的各种字段。\n\n比如，package.json的内容是`{\"name\":\"foo\", \"version\":\"1.2.5\"}`，那么变量`npm_package_name`的值是foo，变量`npm_package_version`的值是1.2.5。\n```javascript\n{\n  \"scripts\":{\n    \"bundle\": \"mkdir -p build/$npm_package_version/\"\n  }\n}\n```\n运行`npm run bundle`以后，将会生成`build/1.2.5/`子目录。\n\n`config`字段也可以用于设置内部字段。\n```\n  \"name\": \"fooproject\",\n  \"config\": {\n    \"reporter\": \"xunit\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha test/ --reporter $npm_package_config_reporter\"\n  }\n```\n上面代码中，变量`npm_package_config_reporter`对应的就是reporter。\n\n## 通配符\nnpm的通配符的规则如下。\n\n* `*` 匹配0个或多个字符\n* `?` 匹配1个字符\n* `[...]` 匹配某个范围的字符。如果该范围的第一个字符是!或^，则匹配不在该范围的字符。\n* `!(pattern|pattern|pattern)` 匹配任何不符合给定的模式\n* `?(pattern|pattern|pattern)` 匹配0个或1个给定的模式\n* `+(pattern|pattern|pattern)` 匹配1个或多个给定的模式\n* `*(a|b|c)` 匹配0个或多个给定的模式\n* `@(pattern|pat*|pat?erN)` 只匹配给定模式之一\n* `**` 如果出现在路径部分，表示0个或多个子目录。\n\n## npm link\n开发NPM模块的时候，有时我们会希望，边开发边试用，比如本地调试的时候，`require('myModule')`会自动加载本机开发中的模块。Node规定，使用一个模块时，需要将其安装到全局的或项目的`node_modules`目录之中。对于开发中的模块，解决方法就是在全局的`node_modules`目录之中，生成一个符号链接，指向模块的本地目录。\n\n`npm link`就能起到这个作用，会自动建立这个符号链接。\n\n请设想这样一个场景，你开发了一个模块`myModule`，目录为`src/myModule`，你自己的项目`myProject`要用到这个模块，项目目录为`src/myProject`。首先，在模块目录`（src/myModule）`下运行`npm link`命令。\n```\nsrc/myModule$ npm link\n```\n上面的命令会在NPM的全局模块目录内，生成一个符号链接文件，该文件的名字就是`package.json`文件中指定的模块名。\n```\n/path/to/global/node_modules/myModule -> src/myModule\n```\n这个时候，已经可以全局调用`myModule`模块了。但是，如果我们要让这个模块安装在项目内，还要进行下面的步骤。\n\n切换到项目目录，再次运行`npm link`命令，并指定模块名。\n```\nsrc/myProject$ npm link myModule\n```\n上面命令等同于生成了本地模块的符号链接。\n```\nsrc/myProject/node_modules/myModule -> /path/to/global/node_modules/myModule\n```\n然后，就可以在你的项目中，加载该模块了。\n```javascript\nvar myModule = require('myModule');\n```\n这样一来，`myModule`的任何变化，都可以直接反映在`myProject`项目之中。但是，这样也出现了风险，任何在`myProject`目录中对`myModule`的修改，都会反映到模块的源码中。\n\n如果你的项目不再需要该模块，可以在项目目录内使用`npm unlink`命令，删除符号链接。\n```\nsrc/myProject$ npm unlink myModule\n```\n## npm bin\n`npm bin`命令显示相对于当前目录的，Node模块的可执行脚本所在的目录（即`.bin`目录）。\n```\n# 项目根目录下执行\n$ npm bin\n./node_modules/.bin\n```\n## npm adduser\n`npm adduser`用于在npmjs.com注册一个用户。\n```javascript\n$ npm adduser\nUsername: YOUR_USER_NAME\nPassword: YOUR_PASSWORD\nEmail: YOUR_EMAIL@domain.com\n```\n## npm publish\n`npm publish`用于将当前模块发布到[npmjs.com](http://npmjs.com/)。执行之前，需要向[npmjs.com](http://npmjs.com/)申请用户名。\n```\n$ npm adduser\n```\n如果已经注册过，就使用下面的命令登录。\n```\n$ npm login\n```\n登录以后，就可以使用`npm publish`命令发布。\n```\n$ npm publish\n```\n如果当前模块是一个beta版，比如`1.3.1-beta.3`，那么发布的时候需要使用tag参数，将其发布到指定标签，默认的发布标签是`latest`。\n```\n$ npm publish --tag beta\n```\n如果发布私有模块，模块初始化的时候，需要加上`scope`参数。只有npm的付费用户才能发布私有模块。\n```\n$ npm init --scope=<yourscope>\n```\n如果你的模块是用ES6写的，那么发布的时候，最好转成ES5。首先，需要安装Babel。\n```\n$ npm install --save-dev babel-cli@6 babel-preset-es2015@6\n```\n然后，在`package.json`里面写入`build`脚本。\n```\n\"scripts\": {\n  \"build\": \"babel source --presets babel-preset-es2015 --out-dir distribution\",\n  \"prepublish\": \"npm run build\"\n}\n```\n运行上面的脚本，会将`source`目录里面的ES6源码文件，转为`distribution`目录里面的ES5源码文件。然后，在项目根目录下面创建两个文件`.npmignore`和`.gitignore`，分别写入以下内容。\n```\n// .npmignore\nsource\n\n// .gitignore\nnode_modules\ndistribution\n```\n## npm deprecate\n如果想废弃某个版本的模块，可以使用npm deprecate命令。\n```\n$ npm deprecate my-thing@\"< 0.2.3\" \"critical bug fixed in v0.2.3\"\n```\n运行上面的命令以后，小于`0.2.3`版本的模块的`package.json`都会写入一行警告，用户安装这些版本时，这行警告就会在命令行显示。\n\n## npm owner\n模块的维护者可以发布新版本。`npm owner`命令用于管理模块的维护者。\n```\n# 列出指定模块的维护者\n$ npm owner ls <package name>\n\n# 新增维护者\n$ npm owner add <user> <package name>\n\n# 删除维护者\n$ npm owner rm <user> <package name>\n```\n## 其他命令\n### npm home，npm repo\n`npm home`命令可以打开一个模块的主页，`npm repo`命令则是打开一个模块的代码仓库。\n```\n$ npm home $package\n$ npm repo $package\n```\n这两个命令不需要模块先安装。\n\n### npm outdated\n`npm outdated`命令检查当前项目所依赖的模块，是否已经有新版本。\n```\n$ npm outdated\n```\n它会输出当前版本（current version）、应当安装的版本（wanted version）和最新发布的版本（latest version）。\n\n### npm prune\n`npm prune`检查当前项目的`node_modules`目录中，是否有`package.json`里面没有提到的模块，然后将所有这些模块输出在命令行。\n```\n$ npm prune\n```\n### npm shrinkwrap\n`npm shrinkwrap`的作用是锁定当前项目的依赖模块的版本。\n```\n$ npm shrinkwrap\n```\n运行该命令后，会在当前项目的根目录下生成一个`npm-shrinkwrap.json`文件，内容是`node_modules`目录下所有已经安装的模块，以及它们的精确版本。\n\n下次运行`npm install`命令时，`npm`发现当前目录下有`npm-shrinkwrap.json`文件，就会只安装里面提到的模块，且版本也会保持一致。\n\n\n作者：majun00\n链接：https://www.jianshu.com/p/30ef3c874c1e\n\n","slug":"npm摘录","published":1,"updated":"2021-09-21T01:19:04.422Z","_id":"ckttecr00000y1kuv9c0pb790","comments":1,"layout":"post","photos":[],"link":"","content":"<p>摘录自： <a href=\"https://www.jianshu.com/p/30ef3c874c1e?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=weixin\">Node学习(1)–NPM</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><code>npm</code>有两层含义。一层含义是Node的开放式模块登记和管理系统，网址为<a href=\"https://www.npmjs.com/\">npmjs.org</a>。另一层含义是Node默认的模块管理器，是一个命令行下的软件，用来安装和管理Node模块。</p>\n<p><code>npm</code>不需要单独安装。在安装Node的时候，会连带一起安装<code>npm</code>。但是，Node附带的<code>npm</code>可能不是最新版本，最好用下面的命令，更新到最新版本。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> install <span class=\"built_in\">npm</span>@latest -g</span><br></pre></td></tr></table></figure>\n<p>上面的命令中，<code>@latest</code>表示最新版本，<code>-g</code>表示全局安装。所以，命令的主干是<code>npm install npm</code>，也就是使用<code>npm</code>安装自己。之所以可以这样，是因为<code>npm</code>本身与Node的其他模块没有区别。</p>\n<p>然后，运行下面的命令，查看各种信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 npm 命令列表</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm <span class=\"built_in\">help</span></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看各个命令的简单用法</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm -l</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 npm 的版本</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm -v</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 npm 的配置</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm config list -l</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h2 id=\"npm-init\"><a href=\"#npm-init\" class=\"headerlink\" title=\"npm init\"></a>npm init</h2><p><code>npm init</code>用来初始化生成一个新的<code>package.json</code>文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。</p>\n<p>如果使用了<code>-f</code>（代表force）、<code>-y</code>（代表yes），则跳过提问阶段，直接生成一个新的<code>package.json</code>文件。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> init -y</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-set\"><a href=\"#npm-set\" class=\"headerlink\" title=\"npm set\"></a>npm set</h2><p><code>npm set</code>用来设置环境变量。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">set</span> <span class=\"keyword\">init</span>-author-name <span class=\"string\">&#x27;Your name&#x27;</span></span><br><span class=\"line\">$ npm <span class=\"keyword\">set</span> <span class=\"keyword\">init</span>-author-email <span class=\"string\">&#x27;Your email&#x27;</span></span><br><span class=\"line\">$ npm <span class=\"keyword\">set</span> <span class=\"keyword\">init</span>-author-url <span class=\"string\">&#x27;http://yourdomain.com&#x27;</span></span><br><span class=\"line\">$ npm <span class=\"keyword\">set</span> <span class=\"keyword\">init</span>-license <span class=\"string\">&#x27;MIT&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令等于为<code>npm init</code>设置了默认值，以后执行<code>npm init</code>的时候，<code>package.json</code>的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的<code>~/.npmrc</code>文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行<code>npm config</code>。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> npm <span class=\"keyword\">set</span> save-exact <span class=\"comment\">true</span></span><br></pre></td></tr></table></figure>\n<p>上面命令设置加入模块时，<code>package.json</code>将记录模块的确切版本，而不是一个可选的版本范围。</p>\n<h2 id=\"npm-config\"><a href=\"#npm-config\" class=\"headerlink\" title=\"npm config\"></a>npm config</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm<span class=\"built_in\"> config </span><span class=\"builtin-name\">set</span><span class=\"built_in\"> prefix </span><span class=\"variable\">$dir</span></span><br></pre></td></tr></table></figure>\n<p>上面的命令将指定的<code>$dir</code>目录，设为模块的全局安装目录。如果当前有这个目录的写权限，那么运行<code>npm install</code>的时候，就不再需要<code>sudo</code>命令授权了。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> npm config <span class=\"keyword\">set</span> save-prefix ~</span><br></pre></td></tr></table></figure>\n<p>上面的命令使得<code>npm install --save</code>和<code>npm install --save-dev</code>安装新模块时，允许的版本范围从克拉符号（<code>^</code>）改成波浪号（<code>~</code>），即从允许小版本升级，变成只允许补丁包的升级。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm<span class=\"built_in\"> config </span><span class=\"builtin-name\">set</span> init.author.name <span class=\"variable\">$name</span></span><br><span class=\"line\">$ npm<span class=\"built_in\"> config </span><span class=\"builtin-name\">set</span> init.author.email <span class=\"variable\">$email</span></span><br></pre></td></tr></table></figure>\n<p>上面命令指定使用<code>npm init</code>时，生成的<code>package.json</code>文件的字段默认值。</p>\n<h2 id=\"npm-info\"><a href=\"#npm-info\" class=\"headerlink\" title=\"npm info\"></a>npm info</h2><p><code>npm info</code>命令可以查看每个模块的具体信息。比如，查看<code>underscore</code>模块的信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm info underscore</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;underscore&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">description</span>: <span class=\"string\">&#x27;JavaScript\\&#x27;s functional programming helper library.&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;dist-tags&#x27;</span>: &#123; <span class=\"attr\">latest</span>: <span class=\"string\">&#x27;1.5.2&#x27;</span>, <span class=\"attr\">stable</span>: <span class=\"string\">&#x27;1.5.2&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">repository</span>:</span><br><span class=\"line\">   &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;git&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">url</span>: <span class=\"string\">&#x27;git://github.com/jashkenas/underscore.git&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">homepage</span>: <span class=\"string\">&#x27;http://underscorejs.org&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">main</span>: <span class=\"string\">&#x27;underscore.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">version</span>: <span class=\"string\">&#x27;1.5.2&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devDependencies</span>: &#123; <span class=\"attr\">phantomjs</span>: <span class=\"string\">&#x27;1.9.0-1&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">licenses</span>:</span><br><span class=\"line\">   &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;MIT&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">url</span>: <span class=\"string\">&#x27;https://raw.github.com/jashkenas/underscore/master/LICENSE&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">files</span>:</span><br><span class=\"line\">   [ <span class=\"string\">&#x27;underscore.js&#x27;</span>,</span><br><span class=\"line\">     <span class=\"string\">&#x27;underscore-min.js&#x27;</span>,</span><br><span class=\"line\">     <span class=\"string\">&#x27;LICENSE&#x27;</span> ],</span><br><span class=\"line\">  <span class=\"attr\">readmeFilename</span>: <span class=\"string\">&#x27;README.md&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>上面命令返回一个JavaScript对象，包含了underscore模块的详细信息。这个对象的每个成员，都可以直接从info命令查询。</p>\n<figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">info</span> underscore description</span><br><span class=\"line\">JavaScript&#x27;s functional programming helper library.</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm <span class=\"keyword\">info</span> underscore homepage</span><br><span class=\"line\"><span class=\"keyword\">http</span>://underscorejs.org</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm <span class=\"keyword\">info</span> underscore version</span><br><span class=\"line\"><span class=\"number\">1.5</span><span class=\"number\">.2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-search\"><a href=\"#npm-search\" class=\"headerlink\" title=\"npm search\"></a>npm search</h2><p><code>npm search</code>命令用于搜索npm仓库，它后面可以跟字符串，也可以跟正则表达式。</p>\n<figure class=\"highlight bnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm search <span class=\"attribute\">&lt;搜索词&gt;</span></span><br></pre></td></tr></table></figure>\n<p>下面是一个例子。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm search <span class=\"keyword\">node</span><span class=\"title\">-gyp</span></span><br><span class=\"line\">// NAME                  DESCRIPTION</span><br><span class=\"line\">// autogypi              Autogypi handles dependencies for <span class=\"keyword\">node</span><span class=\"title\">-gyp</span> projects.</span><br><span class=\"line\">// grunt-<span class=\"keyword\">node</span><span class=\"title\">-gyp</span>        Run <span class=\"keyword\">node</span><span class=\"title\">-gyp</span> commands from Grunt.</span><br><span class=\"line\">// gyp-io                Temporary solution to let <span class=\"keyword\">node</span><span class=\"title\">-gyp</span> run `rebuild` under…</span><br><span class=\"line\">// ...</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-list\"><a href=\"#npm-list\" class=\"headerlink\" title=\"npm list\"></a>npm list</h2><p><code>npm list</code>命令以树型结构列出当前项目安装的所有模块，以及它们依赖的模块。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> list</span><br></pre></td></tr></table></figure>\n<p>加上global参数，会列出全局安装的模块。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> list -<span class=\"built_in\">global</span></span><br></pre></td></tr></table></figure>\n<p>npm list命令也可以列出单个模块。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> list underscore</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-install\"><a href=\"#npm-install\" class=\"headerlink\" title=\"npm install\"></a>npm install</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>Node模块采用<code>npm install</code>命令安装。</p>\n<p>每个模块可以“全局安装”，也可以“本地安装”。“全局安装”指的是将一个模块安装到系统目录中，各个项目都可以调用。一般来说，全局安装只适用于工具模块，比如<code>eslint</code>和<code>gulp</code>。“本地安装”指的是将一个模块下载到当前项目的<code>node_modules</code>子目录，然后只有在项目目录之中，才能调用这个模块。</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 本地安装</span><br><span class=\"line\">$ npm install &lt;<span class=\"keyword\">package</span> <span class=\"title\">name&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 全局安装</span><br><span class=\"line\">$ sudo npm install -global &lt;<span class=\"keyword\">package</span> <span class=\"title\">name&gt;</span></span><br><span class=\"line\">$ sudo npm install -g &lt;<span class=\"keyword\">package</span> <span class=\"title\">name&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>npm install</code>也支持直接输入Github代码库地址。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install git:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/package/</span>path.git</span><br><span class=\"line\">$ npm install git:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/package/</span>path.git<span class=\"comment\">#0.1.0</span></span><br></pre></td></tr></table></figure>\n<p>安装之前，<code>npm install</code>会先检查，<code>node_modules</code>目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。</p>\n<p>如果你希望，一个模块不管是否安装过，npm 都要强制重新安装，可以使用<code>-f</code>或<code>--force</code>参数。</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install &lt;packageName&gt; <span class=\"comment\">--force</span></span><br></pre></td></tr></table></figure>\n<p>如果你希望，所有模块都要强制重新安装，那就删除<code>node_modules</code>目录，重新执行<code>npm install</code>。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> <span class=\"built_in\">rm</span> <span class=\"literal\">-rf</span> node_modules</span><br><span class=\"line\"><span class=\"variable\">$</span> npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装不同版本\"><a href=\"#安装不同版本\" class=\"headerlink\" title=\"安装不同版本\"></a>安装不同版本</h3><p>install命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上@和版本号。</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>npm install sax<span class=\"variable\">@latest</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>npm install sax<span class=\"variable\">@0</span>.<span class=\"number\">1.1</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>npm install sax@<span class=\"string\">&quot;&gt;=0.1.0 &lt;0.2.0&quot;</span></span><br></pre></td></tr></table></figure>\n<p>如果使用<code>--save-exact</code>参数，会在<code>package.json</code>文件指定安装模块的确切版本。</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">$</span> <span class=\"comment\">npm</span> <span class=\"comment\">install</span> <span class=\"comment\">readable</span><span class=\"literal\">-</span><span class=\"comment\">stream</span> --<span class=\"comment\">save</span> --<span class=\"comment\">save</span><span class=\"literal\">-</span><span class=\"comment\">exact</span></span><br></pre></td></tr></table></figure>\n<p>install命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在packages.json文件的哪一项中。</p>\n<p>–save：模块名将被添加到dependencies，可以简化为参数<code>-S</code>。<br>–save-dev: 模块名将被添加到devDependencies，可以简化为参数<code>-D</code>。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install sax --save</span><br><span class=\"line\">$ npm install <span class=\"keyword\">node</span><span class=\"title\">-tap</span> --save-dev</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ npm install sax -S</span><br><span class=\"line\">$ npm install <span class=\"keyword\">node</span><span class=\"title\">-tap</span> -D</span><br></pre></td></tr></table></figure>\n<p>如果要安装beta版本的模块，需要使用下面的命令。</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装最新的beta版</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>npm install &lt;<span class=\"keyword\">module</span>-name&gt;<span class=\"variable\">@beta</span> (latest beta)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装指定的beta版</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>npm install &lt;<span class=\"keyword\">module</span>-name&gt;<span class=\"variable\">@1</span>.<span class=\"number\">3.1</span>-beta.<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p><code>npm install</code>默认会安装<code>dependencies</code>字段和<code>devDependencies</code>字段中的所有模块，如果使用<code>--production</code>参数，可以只安装<code>dependencies</code>字段的模块。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> --production</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ NODE_ENV=production npm <span class=\"keyword\">install</span></span><br></pre></td></tr></table></figure>\n<p>一旦安装了某个模块，就可以在代码中用<code>require</code>命令加载这个模块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> backbone = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;backbone&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(backbone.VERSION)</span><br></pre></td></tr></table></figure>\n<h3 id=\"避免系统权限\"><a href=\"#避免系统权限\" class=\"headerlink\" title=\"避免系统权限\"></a>避免系统权限</h3><p>默认情况下，Npm全局模块都安装在系统目录（比如<code>/usr/local/lib/</code>），普通用户没有写入权限，需要用到<code>sudo</code>命令。这不是很方便，我们可以在没有root权限的情况下，安装全局模块。</p>\n<p>首先，在主目录下新建配置文件<code>.npmrc</code>，然后在该文件中将<code>prefix</code>变量定义到主目录下面。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prefix = <span class=\"regexp\">/home/y</span>ourUsername/npm</span><br></pre></td></tr></table></figure>\n<p>然后在主目录下新建<code>npm</code>子目录。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir ~/npm</span><br></pre></td></tr></table></figure>\n<p>此后，全局安装的模块都会安装在这个子目录中，npm也会到<code>~/npm/bin</code>目录去寻找命令。</p>\n<p>最后，将这个路径在<code>.bash_profile</code>文件（或<code>.bashrc</code>文件）中加入PATH变量。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">PATH</span>=~/npm/bin:$PATH</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-update，npm-uninstall\"><a href=\"#npm-update，npm-uninstall\" class=\"headerlink\" title=\"npm update，npm uninstall\"></a>npm update，npm uninstall</h2><p><code>npm update</code>命令可以更新本地安装的模块。</p>\n<figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 升级当前项目的指定模块</span></span><br><span class=\"line\">$ npm <span class=\"keyword\">update</span> [<span class=\"keyword\">package</span> name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 升级全局安装的模块</span></span><br><span class=\"line\">$ npm <span class=\"keyword\">update</span> -<span class=\"keyword\">global</span> [<span class=\"keyword\">package</span> name]</span><br></pre></td></tr></table></figure>\n<p>它会先到远程仓库查询最新版本，然后查询本地版本。如果本地版本不存在，或者远程版本较新，就会安装。</p>\n<p>使用<code>-S</code>或<code>--save</code>参数，可以在安装的时候更新<code>package.json</code>里面模块的版本号。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新之前的package.json</span></span><br><span class=\"line\"><span class=\"symbol\">dependencies:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">  dep1:</span> <span class=\"string\">&quot;^1.1.1&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新之后的package.json</span></span><br><span class=\"line\"><span class=\"symbol\">dependencies:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">  dep1:</span> <span class=\"string\">&quot;^1.2.2&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，从npm v2.6.1 开始，<code>npm update</code>只更新顶层模块，而不更新依赖的依赖，以前版本是递归更新的。如果想取到老版本的效果，要使用下面的命令。</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"comment\">--depth 9999 update</span></span><br></pre></td></tr></table></figure>\n<p><code>npm uninstall</code>命令，卸载已安装的模块。</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm uninstall [<span class=\"keyword\">package</span> <span class=\"title\">name]</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 卸载全局模块</span><br><span class=\"line\">$ npm uninstall [<span class=\"keyword\">package</span> <span class=\"title\">name] -global</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-run\"><a href=\"#npm-run\" class=\"headerlink\" title=\"npm run\"></a>npm run</h2><p><code>npm</code>不仅可以用于模块管理，还可以用于执行脚本。<code>package.json</code>文件有一个<code>scripts</code>字段，可以用于指定脚本命令，供<code>npm</code>直接调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;myproject&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;jshint&quot;</span>: <span class=\"string\">&quot;latest&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;browserify&quot;</span>: <span class=\"string\">&quot;latest&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;mocha&quot;</span>: <span class=\"string\">&quot;latest&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;lint&quot;</span>: <span class=\"string\">&quot;jshint **.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;mocha test/&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>scripts</code>字段指定了两项命令<code>lint</code>和<code>test</code>。命令行输入<code>npm run-script lint</code>或者<code>npm run lint</code>，就会执行<code>jshint **.js</code>，输入<code>npm run-script test</code>或者<code>npm run test</code>，就会执行<code>mocha test/</code>。<code>npm run</code>是<code>npm run-script</code>的缩写，一般都使用前者，但是后者可以更好地反应这个命令的本质。</p>\n<p><code>npm run</code>命令会自动在环境变量<code>$PATH</code>添加<code>node_modules/.bin</code>目录，所以<code>scripts</code>字段里面调用命令时不用加上路径，这就避免了全局安装NPM模块。</p>\n<p><code>npm run</code>如果不加任何参数，直接运行，会列出<code>package.json</code>里面所有可以执行的脚本命令。</p>\n<p>npm内置了两个命令简写，<code>npm test</code>等同于执行<code>npm run test</code>，<code>npm start</code>等同于执行<code>npm run start</code>。</p>\n<p><code>npm run</code>会创建一个Shell，执行指定的命令，并临时将<code>node_modules/.bin</code>加入PATH变量，这意味着本地模块可以直接运行。</p>\n<p>举例来说，你执行ESLint的安装命令。</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i eslint --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n<p>运行上面的命令以后，会产生两个结果。首先，ESLint被安装到当前目录的<code>node_modules</code>子目录；其次，<code>node_modules/.bin</code>目录会生成一个符号链接<code>node_modules/.bin/eslint</code>，指向ESLint模块的可执行脚本。</p>\n<p>然后，你就可以在<code>package.json</code>的<code>script</code>属性里面，不带路径的引用<code>eslint</code>这个脚本。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;Test Project&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;eslint&quot;</span>: <span class=\"string\">&quot;^1.10.3&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;lint&quot;</span>: <span class=\"string\">&quot;eslint .&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>等到运行<code>npm run lint</code>的时候，它会自动执行<code>./node_modules/.bin/eslint .</code>。</p>\n<p>如果直接运行<code>npm run</code>不给出任何参数，就会列出<code>scripts</code>属性下所有命令。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">run</span></span><br><span class=\"line\">Available scripts <span class=\"keyword\">in</span> the user-service package:</span><br><span class=\"line\">  lint</span><br><span class=\"line\">     jshint **.js</span><br><span class=\"line\">  <span class=\"keyword\">test</span></span><br><span class=\"line\">    mocha <span class=\"keyword\">test</span>/</span><br></pre></td></tr></table></figure>\n<p>下面是另一个<code>package.json</code>文件的例子。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;watch&quot;</span>: <span class=\"string\">&quot;watchify client/main.js -o public/app.js -v&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;browserify client/main.js -o public/app.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;start&quot;</span>: <span class=\"string\">&quot;npm run watch &amp; nodemon server.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;node test/all.js&quot;</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>上面代码在<code>scripts</code>项，定义了四个别名，每个别名都有对应的脚本命令。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"builtin-name\">run</span> watch</span><br><span class=\"line\">$ npm <span class=\"builtin-name\">run</span> build</span><br><span class=\"line\">$ npm <span class=\"builtin-name\">run</span> start</span><br><span class=\"line\">$ npm <span class=\"builtin-name\">run</span> test</span><br></pre></td></tr></table></figure>\n<p>其中，<code>start</code>和<code>test</code>属于特殊命令，可以省略<code>run</code>。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> npm <span class=\"built_in\">start</span></span><br><span class=\"line\"><span class=\"variable\">$</span> npm test</span><br></pre></td></tr></table></figure>\n<p>如果希望一个操作的输出，是另一个操作的输入，可以借用Linux系统的管道命令，将两个操作连在一起。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;build-js&quot;</span>: <span class=\"string\">&quot;browserify browser/main.js | uglifyjs -mc &gt; static/bundle.js&quot;</span></span><br></pre></td></tr></table></figure>\n<p>但是，更方便的写法是引用其他npm run命令。</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;<span class=\"keyword\">build</span><span class=\"string\">&quot;: &quot;</span>npm run <span class=\"keyword\">build</span>-js &amp;&amp; npm run <span class=\"keyword\">build</span>-css<span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面的写法是先运行<code>npm run build-js</code>，然后再运行<code>npm run build-css</code>，两个命令中间用<code>&amp;&amp;</code>连接。如果希望两个命令同时平行执行，它们中间可以用<code>&amp;</code>连接。</p>\n<p>下面是一个流操作的例子。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;autoprefixer&quot;</span>: <span class=\"string\">&quot;latest&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;cssmin&quot;</span>: <span class=\"string\">&quot;latest&quot;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;build:css&quot;</span>: <span class=\"string\">&quot;autoprefixer -b &#x27;last 2 versions&#x27; &lt; assets/styles/main.css | cssmin &gt; dist/main.css&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写在<code>scripts</code>属性中的命令，也可以在<code>node_modules/.bin</code>目录中直接写成bash脚本。下面是一个bash脚本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> site/main</span><br><span class=\"line\">browserify browser/main.js | uglifyjs -mc &gt; static/bundle.js</span><br></pre></td></tr></table></figure>\n<p>假定上面的脚本文件名为build.sh，并且权限为可执行，就可以在scripts属性中引用该文件。</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;<span class=\"keyword\">build</span>-js<span class=\"string\">&quot;: &quot;</span>bin/<span class=\"keyword\">build</span>.sh<span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p><code>npm run</code>命令还可以添加参数。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;mocha test/&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码指定<code>npm test</code>，实际运行<code>mocha test/</code>。如果要通过<code>npm test</code>命令，将参数传到mocha，则参数之前要加上两个连词线。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm run <span class=\"built_in\">test</span> -- anothertest.js</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 等同于</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mocha <span class=\"built_in\">test</span>/ anothertest.js</span></span><br></pre></td></tr></table></figure>\n<p>上面命令表示，mocha要运行所有<code>test</code>子目录的测试脚本，以及另外一个测试脚本<a href=\"http://anothertest.js/\">anothertest.js</a>。</p>\n<p><code>npm run</code>本身有一个参数<code>-s</code>，表示关闭npm本身的输出，只输出脚本产生的结果。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输出npm命令头</span></span><br><span class=\"line\">$ npm <span class=\"keyword\">run</span> <span class=\"keyword\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不输出npm命令头</span></span><br><span class=\"line\">$ npm <span class=\"keyword\">run</span> -s <span class=\"keyword\">test</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"scripts脚本命令最佳实践\"><a href=\"#scripts脚本命令最佳实践\" class=\"headerlink\" title=\"scripts脚本命令最佳实践\"></a>scripts脚本命令最佳实践</h2><p><code>scripts</code>字段的脚本命令，有一些最佳实践，可以方便开发。首先，安装<code>npm-run-all</code>模块。</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install npm-run-<span class=\"built_in\">all</span> --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n<p>这个模块用于运行多个<code>scripts</code>脚本命令。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 继发执行</span></span><br><span class=\"line\">$ npm-<span class=\"built_in\">run</span>-all build:html build:js</span><br><span class=\"line\"><span class=\"comment\"># 等同于</span></span><br><span class=\"line\">$ npm <span class=\"built_in\">run</span> build:html &amp;&amp; npm <span class=\"built_in\">run</span> build:js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 并行执行</span></span><br><span class=\"line\">$ npm-<span class=\"built_in\">run</span>-all <span class=\"comment\">--parallel watch:html watch:js</span></span><br><span class=\"line\"><span class=\"comment\"># 等同于</span></span><br><span class=\"line\">$ npm <span class=\"built_in\">run</span> watch:html &amp; npm <span class=\"built_in\">run</span> watch:js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 混合执行</span></span><br><span class=\"line\">$ npm-<span class=\"built_in\">run</span>-all clean lint <span class=\"comment\">--parallel watch:html watch:js</span></span><br><span class=\"line\"><span class=\"comment\"># 等同于</span></span><br><span class=\"line\">$ npm-<span class=\"built_in\">run</span>-all clean lint</span><br><span class=\"line\">$ npm-<span class=\"built_in\">run</span>-all <span class=\"comment\">--parallel watch:html watch:js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通配符</span></span><br><span class=\"line\">$ npm-<span class=\"built_in\">run</span>-all <span class=\"comment\">--parallel watch:*</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"start脚本命令\"><a href=\"#start脚本命令\" class=\"headerlink\" title=\"start脚本命令\"></a>start脚本命令</h3><p><code>start</code>脚本命令，用于启动应用程序。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;start&quot;</span>: <span class=\"string\">&quot;npm-run-all --parallel dev serve&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令并行执行<code>dev</code>脚本命令和<code>serve</code><br>脚本命令，等同于下面的形式。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"builtin-name\">run</span> dev &amp; npm <span class=\"builtin-name\">run</span> serve</span><br></pre></td></tr></table></figure>\n<p>如果start脚本没有配置，<code>npm start</code>命令默认执行下面的脚本，前提是模块的根目录存在一个server.js文件。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">node</span> <span class=\"title\">server</span>.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"dev脚本命令\"><a href=\"#dev脚本命令\" class=\"headerlink\" title=\"dev脚本命令\"></a>dev脚本命令</h3><p><code>dev</code>脚本命令，规定开发阶段所要做的处理，比如构建网页资源。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;npm-run-all dev:*&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令用于继发执行所有<code>dev</code>的子命令。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;predev:sass&quot;</span>: <span class=\"string\">&quot;node-sass --source-map src/css/hoodie.css.map --output-style nested src/sass/base.scss src/css/hoodie.css&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令将sass文件编译为css文件，并生成source map文件。</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&quot;dev:sass&quot;:</span> <span class=\"comment\">&quot;node</span><span class=\"literal\">-</span><span class=\"comment\">sass</span> --<span class=\"comment\">source</span><span class=\"literal\">-</span><span class=\"comment\">map</span> <span class=\"comment\">src/css/hoodie</span><span class=\"string\">.</span><span class=\"comment\">css</span><span class=\"string\">.</span><span class=\"comment\">map</span> --<span class=\"comment\">watch</span> --<span class=\"comment\">output</span><span class=\"literal\">-</span><span class=\"comment\">style</span> <span class=\"comment\">nested</span> <span class=\"comment\">src/sass/base</span><span class=\"string\">.</span><span class=\"comment\">scss</span> <span class=\"comment\">src/css/hoodie</span><span class=\"string\">.</span><span class=\"comment\">css&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令会监视sass文件的变动，只要有变动，就自动将其编译为css文件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;dev:autoprefix&quot;</span>: <span class=\"string\">&quot;postcss --use autoprefixer --autoprefixer.browsers <span class=\"subst\">\\&quot;</span>&gt; 5%<span class=\"subst\">\\&quot;</span> --output src/css/hoodie.css src/css/hoodie.css&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令为css文件加上浏览器前缀，限制条件是只考虑市场份额大于5%的浏览器。</p>\n<h3 id=\"serve脚本命令\"><a href=\"#serve脚本命令\" class=\"headerlink\" title=\"serve脚本命令\"></a>serve脚本命令</h3><p><code>serve</code>脚本命令用于启动服务。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;serve&quot;</span>: <span class=\"string\">&quot;live-server dist/ --port=9090&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令启动服务，用的是<code>live-server</code>模块，将服务启动在9090端口，展示<code>dist</code>子目录。</p>\n<p><code>live-server</code>模块有三个功能。</p>\n<ul>\n<li>启动一个HTTP服务器，展示指定目录的<code>index.html</code>文件，通过该文件加载各种网络资源，这是<code>file://</code>协议做不到的。</li>\n<li>添加自动刷新功能。只要指定目录之中，文件有任何变化，它就会刷新页面。</li>\n<li><code>npm run serve</code>命令执行以后，自动打开浏览器。<br>以前，上面三个功能需要三个模块来完成：<code>http-server</code>、<code>live-reload</code>和<code>opener</code>，现在只要<code>live-server</code>一个模块就够了。</li>\n</ul>\n<h3 id=\"test脚本命令\"><a href=\"#test脚本命令\" class=\"headerlink\" title=\"test脚本命令\"></a>test脚本命令</h3><p><code>test</code>脚本命令用于执行测试。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;npm-run-all test:*&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;test:lint&quot;</span>: <span class=\"string\">&quot;sass-lint --verbose --config .sass-lint.yml src/sass/*&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令规定，执行测试时，运行<code>lint</code>脚本，检查脚本之中的语法错误。</p>\n<h3 id=\"prod脚本命令\"><a href=\"#prod脚本命令\" class=\"headerlink\" title=\"prod脚本命令\"></a>prod脚本命令</h3><p><code>prod</code>脚本命令，规定进入生产环境时需要做的处理。</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;prod&quot;</span>: <span class=\"string\">&quot;npm-run-all prod:*&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;prod:sass&quot;</span>: <span class=\"string\">&quot;node-sass --output-style compressed src/sass/base.scss src/css/prod/hoodie.min.css&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;prod:autoprefix&quot;</span>: <span class=\"string\">&quot;postcss --use autoprefixer --autoprefixer.browsers &quot;</span>&gt; <span class=\"number\">5</span>%&quot; --output src/css/prod/hoodie.<span class=\"keyword\">min</span>.css src/css/prod/hoodie.<span class=\"keyword\">min</span>.css<span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令将sass文件转为css文件，并加上浏览器前缀。</p>\n<h3 id=\"help脚本命令\"><a href=\"#help脚本命令\" class=\"headerlink\" title=\"help脚本命令\"></a>help脚本命令</h3><p><code>help</code>脚本命令用于展示帮助信息。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;help&quot;</span>: <span class=\"string\">&quot;markdown-chalk --input DEVELOPMENT.md&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令之中，<code>markdown-chalk</code>模块用于将指定的markdown文件，转为彩色文本显示在终端之中。</p>\n<h3 id=\"docs脚本命令\"><a href=\"#docs脚本命令\" class=\"headerlink\" title=\"docs脚本命令\"></a>docs脚本命令</h3><p><code>docs</code>脚本命令用于生成文档。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;docs&quot;</span>: <span class=\"string\">&quot;kss-node --source src/sass --homepage ../../styleguide.md&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令使用<code>kss-node</code>模块，提供源码的注释生成markdown格式的文档。</p>\n<h3 id=\"pre-和-post-脚本\"><a href=\"#pre-和-post-脚本\" class=\"headerlink\" title=\"pre- 和 post- 脚本\"></a>pre- 和 post- 脚本</h3><p><code>npm run</code>为每条命令提供了<code>pre-</code>和<code>post-</code>两个钩子（hook）。以<code>npm run lint</code>为例，执行这条命令之前，npm会先查看有没有定义prelint和postlint两个钩子，如果有的话，就会先执行<code>npm run prelint</code>，然后执行<code>npm run lint</code>，最后执行<code>npm run postlint</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;myproject&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;eslint&quot;</span>: <span class=\"string\">&quot;latest&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;karma&quot;</span>: <span class=\"string\">&quot;latest&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;lint&quot;</span>: <span class=\"string\">&quot;eslint --cache --ext .js --ext .jsx src&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;karma start --log-leve=error karma.config.js --single-run=true&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;pretest&quot;</span>: <span class=\"string\">&quot;npm run lint&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;posttest&quot;</span>: <span class=\"string\">&quot;echo &#x27;Finished running tests&#x27;&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码是一个<code>package.json</code>文件的例子。如果执行<code>npm test</code>，会按下面的顺序执行相应的命令。</p>\n<pre><code>1. `pretest`\n1. `test`\n1. `posttest`\n</code></pre>\n<p>如果执行过程出错，就不会执行排在后面的脚本，即如果prelint脚本执行出错，就不会接着执行lint和postlint脚本。</p>\n<p>下面是一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;karma start&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;test:lint&quot;</span>: <span class=\"string\">&quot;eslint . --ext .js --ext .jsx&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;pretest&quot;</span>: <span class=\"string\">&quot;npm run test:lint&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，在运行<code>npm run test</code>之前，会自动检查代码，即运行<code>npm run test:lint</code>命令。</p>\n<p>下面是一些常见的<code>pre-</code>和<code>post-</code>脚本。</p>\n<ul>\n<li><code>prepublish</code>：发布一个模块前执行。</li>\n<li><code>postpublish</code>：发布一个模块后执行。</li>\n<li><code>preinstall</code>：用户执行<code>npm install</code>命令时，先执行该脚本。</li>\n<li><code>postinstall</code>：用户执行<code>npm install</code>命令时，安装结束后执行该脚本，通常用于将下载的源码编译成用户需要的格式，比如有些模块需要在用户机器上跟本地的C++模块一起编译。</li>\n<li><code>preuninstall</code>：卸载一个模块前执行。</li>\n<li><code>postuninstall</code>：卸载一个模块后执行。</li>\n<li><code>preversion</code>：更改模块版本前执行。</li>\n<li><code>postversion</code>：更改模块版本后执行。</li>\n<li><code>pretest</code>：运行<code>npm test</code>命令前执行。</li>\n<li><code>posttest</code>：运行<code>npm test</code>命令后执行。</li>\n<li><code>prestop</code>：运行<code>npm stop</code>命令前执行。</li>\n<li><code>poststop</code>：运行<code>npm stop</code>命令后执行。</li>\n<li><code>prestart</code>：运行<code>npm start</code>命令前执行。</li>\n<li><code>poststart</code>：运行<code>npm start</code>命令后执行。</li>\n<li><code>prerestart</code>：运行<code>npm restart</code>命令前执行。</li>\n<li><code>postrestart</code>：运行<code>npm restart</code>命令后执行。<br>对于最后一个<code>npm restart</code>命令，如果没有设置<code>restart</code>脚本，<code>prerestart</code>和<code>postrestart</code>会依次执行stop和start脚本。</li>\n</ul>\n<p>另外，不能在<code>pre</code>脚本之前再加<code>pre</code>，即<code>prepretest</code>脚本不起作用。</p>\n<p>注意，即使Npm可以自动运行<code>pre</code>和<code>post</code>脚本，也可以手动执行它们。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"builtin-name\">run</span> prepublish</span><br></pre></td></tr></table></figure>\n<p>下面是<code>post install</code>的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;postinstall&quot;</span>: <span class=\"string\">&quot;node lib/post_install.js&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的这个命令，主要用于处理从Git仓库拉下来的源码。比如，有些源码是用TypeScript写的，可能需要转换一下。</p>\n<p>下面是<code>publish</code>钩子的一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;dist:modules&quot;</span>: <span class=\"string\">&quot;babel ./src --out-dir ./dist-modules&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;gh-pages&quot;</span>: <span class=\"string\">&quot;webpack&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;gh-pages:deploy&quot;</span>: <span class=\"string\">&quot;gh-pages -d gh-pages&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;prepublish&quot;</span>: <span class=\"string\">&quot;npm run dist:modules&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;postpublish&quot;</span>: <span class=\"string\">&quot;npm run gh-pages &amp;&amp; npm run gh-pages:deploy&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面命令在运行<code>npm run publish</code>时，会先执行Babel编译，然后调用Webpack构建，最后发到Github Pages上面。</p>\n<p>以上都是npm相关操作的钩子，如果安装某些模块，还能支持Git相关的钩子。下面以husky模块为例。</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install husky --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n<p>安装以后，就能在<code>package.json</code>添加<code>precommit</code>、<code>prepush</code>等钩子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;lint&quot;</span>: <span class=\"string\">&quot;eslint yourJsFiles.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;precommit&quot;</span>: <span class=\"string\">&quot;npm run test &amp;&amp; npm run lint&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;prepush&quot;</span>: <span class=\"string\">&quot;npm run test &amp;&amp; npm run lint&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;...&quot;</span>: <span class=\"string\">&quot;...&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类似作用的模块还有<code>pre-commit</code>、<code>precommit-hook</code>等。</p>\n<h2 id=\"内部变量\"><a href=\"#内部变量\" class=\"headerlink\" title=\"内部变量\"></a>内部变量</h2><p>scripts字段可以使用一些内部变量，主要是package.json的各种字段。</p>\n<p>比如，package.json的内容是<code>&#123;&quot;name&quot;:&quot;foo&quot;, &quot;version&quot;:&quot;1.2.5&quot;&#125;</code>，那么变量<code>npm_package_name</code>的值是foo，变量<code>npm_package_version</code>的值是1.2.5。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;bundle&quot;</span>: <span class=\"string\">&quot;mkdir -p build/$npm_package_version/&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行<code>npm run bundle</code>以后，将会生成<code>build/1.2.5/</code>子目录。</p>\n<p><code>config</code>字段也可以用于设置内部字段。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;fooproject&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;config&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;reporter&quot;</span>: <span class=\"string\">&quot;xunit&quot;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;mocha test/ --reporter <span class=\"variable\">$npm_package_config_reporter</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，变量<code>npm_package_config_reporter</code>对应的就是reporter。</p>\n<h2 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h2><p>npm的通配符的规则如下。</p>\n<ul>\n<li><code>*</code> 匹配0个或多个字符</li>\n<li><code>?</code> 匹配1个字符</li>\n<li><code>[...]</code> 匹配某个范围的字符。如果该范围的第一个字符是!或^，则匹配不在该范围的字符。</li>\n<li><code>!(pattern|pattern|pattern)</code> 匹配任何不符合给定的模式</li>\n<li><code>?(pattern|pattern|pattern)</code> 匹配0个或1个给定的模式</li>\n<li><code>+(pattern|pattern|pattern)</code> 匹配1个或多个给定的模式</li>\n<li><code>*(a|b|c)</code> 匹配0个或多个给定的模式</li>\n<li><code>@(pattern|pat*|pat?erN)</code> 只匹配给定模式之一</li>\n<li><code>**</code> 如果出现在路径部分，表示0个或多个子目录。</li>\n</ul>\n<h2 id=\"npm-link\"><a href=\"#npm-link\" class=\"headerlink\" title=\"npm link\"></a>npm link</h2><p>开发NPM模块的时候，有时我们会希望，边开发边试用，比如本地调试的时候，<code>require(&#39;myModule&#39;)</code>会自动加载本机开发中的模块。Node规定，使用一个模块时，需要将其安装到全局的或项目的<code>node_modules</code>目录之中。对于开发中的模块，解决方法就是在全局的<code>node_modules</code>目录之中，生成一个符号链接，指向模块的本地目录。</p>\n<p><code>npm link</code>就能起到这个作用，会自动建立这个符号链接。</p>\n<p>请设想这样一个场景，你开发了一个模块<code>myModule</code>，目录为<code>src/myModule</code>，你自己的项目<code>myProject</code>要用到这个模块，项目目录为<code>src/myProject</code>。首先，在模块目录<code>（src/myModule）</code>下运行<code>npm link</code>命令。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/myModule$ <span class=\"built_in\">npm</span> link</span><br></pre></td></tr></table></figure>\n<p>上面的命令会在NPM的全局模块目录内，生成一个符号链接文件，该文件的名字就是<code>package.json</code>文件中指定的模块名。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/path/</span>to<span class=\"regexp\">/global/</span>node_modules<span class=\"regexp\">/myModule -&gt; src/my</span>Module</span><br></pre></td></tr></table></figure>\n<p>这个时候，已经可以全局调用<code>myModule</code>模块了。但是，如果我们要让这个模块安装在项目内，还要进行下面的步骤。</p>\n<p>切换到项目目录，再次运行<code>npm link</code>命令，并指定模块名。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/myProject$ <span class=\"built_in\">npm</span> link myModule</span><br></pre></td></tr></table></figure>\n<p>上面命令等同于生成了本地模块的符号链接。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src<span class=\"regexp\">/myProject/</span>node_modules<span class=\"regexp\">/myModule -&gt; /</span>path<span class=\"regexp\">/to/g</span>lobal<span class=\"regexp\">/node_modules/my</span>Module</span><br></pre></td></tr></table></figure>\n<p>然后，就可以在你的项目中，加载该模块了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myModule = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;myModule&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>这样一来，<code>myModule</code>的任何变化，都可以直接反映在<code>myProject</code>项目之中。但是，这样也出现了风险，任何在<code>myProject</code>目录中对<code>myModule</code>的修改，都会反映到模块的源码中。</p>\n<p>如果你的项目不再需要该模块，可以在项目目录内使用<code>npm unlink</code>命令，删除符号链接。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/myProject$ <span class=\"built_in\">npm</span> unlink myModule</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-bin\"><a href=\"#npm-bin\" class=\"headerlink\" title=\"npm bin\"></a>npm bin</h2><p><code>npm bin</code>命令显示相对于当前目录的，Node模块的可执行脚本所在的目录（即<code>.bin</code>目录）。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 项目根目录下执行</span></span><br><span class=\"line\">$ npm bin</span><br><span class=\"line\">.<span class=\"regexp\">/node_modules/</span>.bin</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-adduser\"><a href=\"#npm-adduser\" class=\"headerlink\" title=\"npm adduser\"></a>npm adduser</h2><p><code>npm adduser</code>用于在npmjs.com注册一个用户。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm adduser</span><br><span class=\"line\"><span class=\"attr\">Username</span>: YOUR_USER_NAME</span><br><span class=\"line\"><span class=\"attr\">Password</span>: YOUR_PASSWORD</span><br><span class=\"line\"><span class=\"attr\">Email</span>: YOUR_EMAIL@domain.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-publish\"><a href=\"#npm-publish\" class=\"headerlink\" title=\"npm publish\"></a>npm publish</h2><p><code>npm publish</code>用于将当前模块发布到<a href=\"http://npmjs.com/\">npmjs.com</a>。执行之前，需要向<a href=\"http://npmjs.com/\">npmjs.com</a>申请用户名。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> adduser</span><br></pre></td></tr></table></figure>\n<p>如果已经注册过，就使用下面的命令登录。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> login</span><br></pre></td></tr></table></figure>\n<p>登录以后，就可以使用<code>npm publish</code>命令发布。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> publish</span><br></pre></td></tr></table></figure>\n<p>如果当前模块是一个beta版，比如<code>1.3.1-beta.3</code>，那么发布的时候需要使用tag参数，将其发布到指定标签，默认的发布标签是<code>latest</code>。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm publish --<span class=\"keyword\">tag</span> <span class=\"title\">beta</span></span><br></pre></td></tr></table></figure>\n<p>如果发布私有模块，模块初始化的时候，需要加上<code>scope</code>参数。只有npm的付费用户才能发布私有模块。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init <span class=\"attribute\">--scope</span>=&lt;yourscope&gt;</span><br></pre></td></tr></table></figure>\n<p>如果你的模块是用ES6写的，那么发布的时候，最好转成ES5。首先，需要安装Babel。</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev babel-<span class=\"keyword\">cli</span><span class=\"subst\">@6</span> babel-preset-es2015<span class=\"subst\">@6</span></span><br></pre></td></tr></table></figure>\n<p>然后，在<code>package.json</code>里面写入<code>build</code>脚本。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;babel source --presets babel-preset-es2015 --out-dir distribution&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;prepublish&quot;</span>: <span class=\"string\">&quot;npm run build&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行上面的脚本，会将<code>source</code>目录里面的ES6源码文件，转为<code>distribution</code>目录里面的ES5源码文件。然后，在项目根目录下面创建两个文件<code>.npmignore</code>和<code>.gitignore</code>，分别写入以下内容。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> .npmignore</span><br><span class=\"line\">source</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> .gitignore</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">distribution</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-deprecate\"><a href=\"#npm-deprecate\" class=\"headerlink\" title=\"npm deprecate\"></a>npm deprecate</h2><p>如果想废弃某个版本的模块，可以使用npm deprecate命令。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm deprecate <span class=\"keyword\">my</span>-thing@<span class=\"string\">&quot;&lt; 0.2.3&quot;</span> <span class=\"string\">&quot;critical bug fixed in v0.2.3&quot;</span></span><br></pre></td></tr></table></figure>\n<p>运行上面的命令以后，小于<code>0.2.3</code>版本的模块的<code>package.json</code>都会写入一行警告，用户安装这些版本时，这行警告就会在命令行显示。</p>\n<h2 id=\"npm-owner\"><a href=\"#npm-owner\" class=\"headerlink\" title=\"npm owner\"></a>npm owner</h2><p>模块的维护者可以发布新版本。<code>npm owner</code>命令用于管理模块的维护者。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出指定模块的维护者</span><br><span class=\"line\">$ npm <span class=\"keyword\">owner</span> ls &lt;package <span class=\"type\">name</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 新增维护者</span><br><span class=\"line\">$ npm <span class=\"keyword\">owner</span> <span class=\"keyword\">add</span> &lt;<span class=\"keyword\">user</span>&gt; &lt;package <span class=\"type\">name</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除维护者</span><br><span class=\"line\">$ npm <span class=\"keyword\">owner</span> rm &lt;<span class=\"keyword\">user</span>&gt; &lt;package <span class=\"type\">name</span>&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h2><h3 id=\"npm-home，npm-repo\"><a href=\"#npm-home，npm-repo\" class=\"headerlink\" title=\"npm home，npm repo\"></a>npm home，npm repo</h3><p><code>npm home</code>命令可以打开一个模块的主页，<code>npm repo</code>命令则是打开一个模块的代码仓库。</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>npm home <span class=\"variable\">$package</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>npm repo <span class=\"variable\">$package</span></span><br></pre></td></tr></table></figure>\n<p>这两个命令不需要模块先安装。</p>\n<h3 id=\"npm-outdated\"><a href=\"#npm-outdated\" class=\"headerlink\" title=\"npm outdated\"></a>npm outdated</h3><p><code>npm outdated</code>命令检查当前项目所依赖的模块，是否已经有新版本。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> outdated</span><br></pre></td></tr></table></figure>\n<p>它会输出当前版本（current version）、应当安装的版本（wanted version）和最新发布的版本（latest version）。</p>\n<h3 id=\"npm-prune\"><a href=\"#npm-prune\" class=\"headerlink\" title=\"npm prune\"></a>npm prune</h3><p><code>npm prune</code>检查当前项目的<code>node_modules</code>目录中，是否有<code>package.json</code>里面没有提到的模块，然后将所有这些模块输出在命令行。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> prune</span><br></pre></td></tr></table></figure>\n<h3 id=\"npm-shrinkwrap\"><a href=\"#npm-shrinkwrap\" class=\"headerlink\" title=\"npm shrinkwrap\"></a>npm shrinkwrap</h3><p><code>npm shrinkwrap</code>的作用是锁定当前项目的依赖模块的版本。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> shrinkwrap</span><br></pre></td></tr></table></figure>\n<p>运行该命令后，会在当前项目的根目录下生成一个<code>npm-shrinkwrap.json</code>文件，内容是<code>node_modules</code>目录下所有已经安装的模块，以及它们的精确版本。</p>\n<p>下次运行<code>npm install</code>命令时，<code>npm</code>发现当前目录下有<code>npm-shrinkwrap.json</code>文件，就会只安装里面提到的模块，且版本也会保持一致。</p>\n<p>作者：majun00<br>链接：<a href=\"https://www.jianshu.com/p/30ef3c874c1e\">https://www.jianshu.com/p/30ef3c874c1e</a></p>\n","site":{"data":{}},"excerpt":"<p>摘录自： <a href=\"https://www.jianshu.com/p/30ef3c874c1e?utm_campaign=haruki&utm_content=note&utm_medium=reader_share&utm_source=weixin\">Node学习(1)–NPM</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><code>npm</code>有两层含义。一层含义是Node的开放式模块登记和管理系统，网址为<a href=\"https://www.npmjs.com/\">npmjs.org</a>。另一层含义是Node默认的模块管理器，是一个命令行下的软件，用来安装和管理Node模块。</p>\n<p><code>npm</code>不需要单独安装。在安装Node的时候，会连带一起安装<code>npm</code>。但是，Node附带的<code>npm</code>可能不是最新版本，最好用下面的命令，更新到最新版本。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> install <span class=\"built_in\">npm</span>@latest -g</span><br></pre></td></tr></table></figure>\n<p>上面的命令中，<code>@latest</code>表示最新版本，<code>-g</code>表示全局安装。所以，命令的主干是<code>npm install npm</code>，也就是使用<code>npm</code>安装自己。之所以可以这样，是因为<code>npm</code>本身与Node的其他模块没有区别。</p>\n<p>然后，运行下面的命令，查看各种信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 npm 命令列表</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm <span class=\"built_in\">help</span></span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看各个命令的简单用法</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm -l</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 npm 的版本</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm -v</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看 npm 的配置</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm config list -l</span></span><br></pre></td></tr></table></figure>","more":"<h2 id=\"npm-init\"><a href=\"#npm-init\" class=\"headerlink\" title=\"npm init\"></a>npm init</h2><p><code>npm init</code>用来初始化生成一个新的<code>package.json</code>文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。</p>\n<p>如果使用了<code>-f</code>（代表force）、<code>-y</code>（代表yes），则跳过提问阶段，直接生成一个新的<code>package.json</code>文件。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> init -y</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-set\"><a href=\"#npm-set\" class=\"headerlink\" title=\"npm set\"></a>npm set</h2><p><code>npm set</code>用来设置环境变量。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">set</span> <span class=\"keyword\">init</span>-author-name <span class=\"string\">&#x27;Your name&#x27;</span></span><br><span class=\"line\">$ npm <span class=\"keyword\">set</span> <span class=\"keyword\">init</span>-author-email <span class=\"string\">&#x27;Your email&#x27;</span></span><br><span class=\"line\">$ npm <span class=\"keyword\">set</span> <span class=\"keyword\">init</span>-author-url <span class=\"string\">&#x27;http://yourdomain.com&#x27;</span></span><br><span class=\"line\">$ npm <span class=\"keyword\">set</span> <span class=\"keyword\">init</span>-license <span class=\"string\">&#x27;MIT&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令等于为<code>npm init</code>设置了默认值，以后执行<code>npm init</code>的时候，<code>package.json</code>的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的<code>~/.npmrc</code>文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行<code>npm config</code>。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> npm <span class=\"keyword\">set</span> save-exact <span class=\"comment\">true</span></span><br></pre></td></tr></table></figure>\n<p>上面命令设置加入模块时，<code>package.json</code>将记录模块的确切版本，而不是一个可选的版本范围。</p>\n<h2 id=\"npm-config\"><a href=\"#npm-config\" class=\"headerlink\" title=\"npm config\"></a>npm config</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm<span class=\"built_in\"> config </span><span class=\"builtin-name\">set</span><span class=\"built_in\"> prefix </span><span class=\"variable\">$dir</span></span><br></pre></td></tr></table></figure>\n<p>上面的命令将指定的<code>$dir</code>目录，设为模块的全局安装目录。如果当前有这个目录的写权限，那么运行<code>npm install</code>的时候，就不再需要<code>sudo</code>命令授权了。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> npm config <span class=\"keyword\">set</span> save-prefix ~</span><br></pre></td></tr></table></figure>\n<p>上面的命令使得<code>npm install --save</code>和<code>npm install --save-dev</code>安装新模块时，允许的版本范围从克拉符号（<code>^</code>）改成波浪号（<code>~</code>），即从允许小版本升级，变成只允许补丁包的升级。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm<span class=\"built_in\"> config </span><span class=\"builtin-name\">set</span> init.author.name <span class=\"variable\">$name</span></span><br><span class=\"line\">$ npm<span class=\"built_in\"> config </span><span class=\"builtin-name\">set</span> init.author.email <span class=\"variable\">$email</span></span><br></pre></td></tr></table></figure>\n<p>上面命令指定使用<code>npm init</code>时，生成的<code>package.json</code>文件的字段默认值。</p>\n<h2 id=\"npm-info\"><a href=\"#npm-info\" class=\"headerlink\" title=\"npm info\"></a>npm info</h2><p><code>npm info</code>命令可以查看每个模块的具体信息。比如，查看<code>underscore</code>模块的信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm info underscore</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;underscore&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">description</span>: <span class=\"string\">&#x27;JavaScript\\&#x27;s functional programming helper library.&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;dist-tags&#x27;</span>: &#123; <span class=\"attr\">latest</span>: <span class=\"string\">&#x27;1.5.2&#x27;</span>, <span class=\"attr\">stable</span>: <span class=\"string\">&#x27;1.5.2&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">repository</span>:</span><br><span class=\"line\">   &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;git&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">url</span>: <span class=\"string\">&#x27;git://github.com/jashkenas/underscore.git&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">homepage</span>: <span class=\"string\">&#x27;http://underscorejs.org&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">main</span>: <span class=\"string\">&#x27;underscore.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">version</span>: <span class=\"string\">&#x27;1.5.2&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devDependencies</span>: &#123; <span class=\"attr\">phantomjs</span>: <span class=\"string\">&#x27;1.9.0-1&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">licenses</span>:</span><br><span class=\"line\">   &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;MIT&#x27;</span>,</span><br><span class=\"line\">     <span class=\"attr\">url</span>: <span class=\"string\">&#x27;https://raw.github.com/jashkenas/underscore/master/LICENSE&#x27;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">files</span>:</span><br><span class=\"line\">   [ <span class=\"string\">&#x27;underscore.js&#x27;</span>,</span><br><span class=\"line\">     <span class=\"string\">&#x27;underscore-min.js&#x27;</span>,</span><br><span class=\"line\">     <span class=\"string\">&#x27;LICENSE&#x27;</span> ],</span><br><span class=\"line\">  <span class=\"attr\">readmeFilename</span>: <span class=\"string\">&#x27;README.md&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>上面命令返回一个JavaScript对象，包含了underscore模块的详细信息。这个对象的每个成员，都可以直接从info命令查询。</p>\n<figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">info</span> underscore description</span><br><span class=\"line\">JavaScript&#x27;s functional programming helper library.</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm <span class=\"keyword\">info</span> underscore homepage</span><br><span class=\"line\"><span class=\"keyword\">http</span>://underscorejs.org</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm <span class=\"keyword\">info</span> underscore version</span><br><span class=\"line\"><span class=\"number\">1.5</span><span class=\"number\">.2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-search\"><a href=\"#npm-search\" class=\"headerlink\" title=\"npm search\"></a>npm search</h2><p><code>npm search</code>命令用于搜索npm仓库，它后面可以跟字符串，也可以跟正则表达式。</p>\n<figure class=\"highlight bnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm search <span class=\"attribute\">&lt;搜索词&gt;</span></span><br></pre></td></tr></table></figure>\n<p>下面是一个例子。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm search <span class=\"keyword\">node</span><span class=\"title\">-gyp</span></span><br><span class=\"line\">// NAME                  DESCRIPTION</span><br><span class=\"line\">// autogypi              Autogypi handles dependencies for <span class=\"keyword\">node</span><span class=\"title\">-gyp</span> projects.</span><br><span class=\"line\">// grunt-<span class=\"keyword\">node</span><span class=\"title\">-gyp</span>        Run <span class=\"keyword\">node</span><span class=\"title\">-gyp</span> commands from Grunt.</span><br><span class=\"line\">// gyp-io                Temporary solution to let <span class=\"keyword\">node</span><span class=\"title\">-gyp</span> run `rebuild` under…</span><br><span class=\"line\">// ...</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-list\"><a href=\"#npm-list\" class=\"headerlink\" title=\"npm list\"></a>npm list</h2><p><code>npm list</code>命令以树型结构列出当前项目安装的所有模块，以及它们依赖的模块。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> list</span><br></pre></td></tr></table></figure>\n<p>加上global参数，会列出全局安装的模块。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> list -<span class=\"built_in\">global</span></span><br></pre></td></tr></table></figure>\n<p>npm list命令也可以列出单个模块。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> list underscore</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-install\"><a href=\"#npm-install\" class=\"headerlink\" title=\"npm install\"></a>npm install</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>Node模块采用<code>npm install</code>命令安装。</p>\n<p>每个模块可以“全局安装”，也可以“本地安装”。“全局安装”指的是将一个模块安装到系统目录中，各个项目都可以调用。一般来说，全局安装只适用于工具模块，比如<code>eslint</code>和<code>gulp</code>。“本地安装”指的是将一个模块下载到当前项目的<code>node_modules</code>子目录，然后只有在项目目录之中，才能调用这个模块。</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 本地安装</span><br><span class=\"line\">$ npm install &lt;<span class=\"keyword\">package</span> <span class=\"title\">name&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 全局安装</span><br><span class=\"line\">$ sudo npm install -global &lt;<span class=\"keyword\">package</span> <span class=\"title\">name&gt;</span></span><br><span class=\"line\">$ sudo npm install -g &lt;<span class=\"keyword\">package</span> <span class=\"title\">name&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>npm install</code>也支持直接输入Github代码库地址。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install git:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/package/</span>path.git</span><br><span class=\"line\">$ npm install git:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/package/</span>path.git<span class=\"comment\">#0.1.0</span></span><br></pre></td></tr></table></figure>\n<p>安装之前，<code>npm install</code>会先检查，<code>node_modules</code>目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。</p>\n<p>如果你希望，一个模块不管是否安装过，npm 都要强制重新安装，可以使用<code>-f</code>或<code>--force</code>参数。</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install &lt;packageName&gt; <span class=\"comment\">--force</span></span><br></pre></td></tr></table></figure>\n<p>如果你希望，所有模块都要强制重新安装，那就删除<code>node_modules</code>目录，重新执行<code>npm install</code>。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> <span class=\"built_in\">rm</span> <span class=\"literal\">-rf</span> node_modules</span><br><span class=\"line\"><span class=\"variable\">$</span> npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装不同版本\"><a href=\"#安装不同版本\" class=\"headerlink\" title=\"安装不同版本\"></a>安装不同版本</h3><p>install命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上@和版本号。</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>npm install sax<span class=\"variable\">@latest</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>npm install sax<span class=\"variable\">@0</span>.<span class=\"number\">1.1</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>npm install sax@<span class=\"string\">&quot;&gt;=0.1.0 &lt;0.2.0&quot;</span></span><br></pre></td></tr></table></figure>\n<p>如果使用<code>--save-exact</code>参数，会在<code>package.json</code>文件指定安装模块的确切版本。</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">$</span> <span class=\"comment\">npm</span> <span class=\"comment\">install</span> <span class=\"comment\">readable</span><span class=\"literal\">-</span><span class=\"comment\">stream</span> --<span class=\"comment\">save</span> --<span class=\"comment\">save</span><span class=\"literal\">-</span><span class=\"comment\">exact</span></span><br></pre></td></tr></table></figure>\n<p>install命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在packages.json文件的哪一项中。</p>\n<p>–save：模块名将被添加到dependencies，可以简化为参数<code>-S</code>。<br>–save-dev: 模块名将被添加到devDependencies，可以简化为参数<code>-D</code>。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install sax --save</span><br><span class=\"line\">$ npm install <span class=\"keyword\">node</span><span class=\"title\">-tap</span> --save-dev</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ npm install sax -S</span><br><span class=\"line\">$ npm install <span class=\"keyword\">node</span><span class=\"title\">-tap</span> -D</span><br></pre></td></tr></table></figure>\n<p>如果要安装beta版本的模块，需要使用下面的命令。</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装最新的beta版</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>npm install &lt;<span class=\"keyword\">module</span>-name&gt;<span class=\"variable\">@beta</span> (latest beta)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装指定的beta版</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>npm install &lt;<span class=\"keyword\">module</span>-name&gt;<span class=\"variable\">@1</span>.<span class=\"number\">3.1</span>-beta.<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p><code>npm install</code>默认会安装<code>dependencies</code>字段和<code>devDependencies</code>字段中的所有模块，如果使用<code>--production</code>参数，可以只安装<code>dependencies</code>字段的模块。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">install</span> --production</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">$ NODE_ENV=production npm <span class=\"keyword\">install</span></span><br></pre></td></tr></table></figure>\n<p>一旦安装了某个模块，就可以在代码中用<code>require</code>命令加载这个模块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> backbone = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;backbone&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(backbone.VERSION)</span><br></pre></td></tr></table></figure>\n<h3 id=\"避免系统权限\"><a href=\"#避免系统权限\" class=\"headerlink\" title=\"避免系统权限\"></a>避免系统权限</h3><p>默认情况下，Npm全局模块都安装在系统目录（比如<code>/usr/local/lib/</code>），普通用户没有写入权限，需要用到<code>sudo</code>命令。这不是很方便，我们可以在没有root权限的情况下，安装全局模块。</p>\n<p>首先，在主目录下新建配置文件<code>.npmrc</code>，然后在该文件中将<code>prefix</code>变量定义到主目录下面。</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">prefix = <span class=\"regexp\">/home/y</span>ourUsername/npm</span><br></pre></td></tr></table></figure>\n<p>然后在主目录下新建<code>npm</code>子目录。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir ~/npm</span><br></pre></td></tr></table></figure>\n<p>此后，全局安装的模块都会安装在这个子目录中，npm也会到<code>~/npm/bin</code>目录去寻找命令。</p>\n<p>最后，将这个路径在<code>.bash_profile</code>文件（或<code>.bashrc</code>文件）中加入PATH变量。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">PATH</span>=~/npm/bin:$PATH</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-update，npm-uninstall\"><a href=\"#npm-update，npm-uninstall\" class=\"headerlink\" title=\"npm update，npm uninstall\"></a>npm update，npm uninstall</h2><p><code>npm update</code>命令可以更新本地安装的模块。</p>\n<figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 升级当前项目的指定模块</span></span><br><span class=\"line\">$ npm <span class=\"keyword\">update</span> [<span class=\"keyword\">package</span> name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 升级全局安装的模块</span></span><br><span class=\"line\">$ npm <span class=\"keyword\">update</span> -<span class=\"keyword\">global</span> [<span class=\"keyword\">package</span> name]</span><br></pre></td></tr></table></figure>\n<p>它会先到远程仓库查询最新版本，然后查询本地版本。如果本地版本不存在，或者远程版本较新，就会安装。</p>\n<p>使用<code>-S</code>或<code>--save</code>参数，可以在安装的时候更新<code>package.json</code>里面模块的版本号。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 更新之前的package.json</span></span><br><span class=\"line\"><span class=\"symbol\">dependencies:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">  dep1:</span> <span class=\"string\">&quot;^1.1.1&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新之后的package.json</span></span><br><span class=\"line\"><span class=\"symbol\">dependencies:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">  dep1:</span> <span class=\"string\">&quot;^1.2.2&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，从npm v2.6.1 开始，<code>npm update</code>只更新顶层模块，而不更新依赖的依赖，以前版本是递归更新的。如果想取到老版本的效果，要使用下面的命令。</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"comment\">--depth 9999 update</span></span><br></pre></td></tr></table></figure>\n<p><code>npm uninstall</code>命令，卸载已安装的模块。</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm uninstall [<span class=\"keyword\">package</span> <span class=\"title\">name]</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 卸载全局模块</span><br><span class=\"line\">$ npm uninstall [<span class=\"keyword\">package</span> <span class=\"title\">name] -global</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-run\"><a href=\"#npm-run\" class=\"headerlink\" title=\"npm run\"></a>npm run</h2><p><code>npm</code>不仅可以用于模块管理，还可以用于执行脚本。<code>package.json</code>文件有一个<code>scripts</code>字段，可以用于指定脚本命令，供<code>npm</code>直接调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;myproject&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;jshint&quot;</span>: <span class=\"string\">&quot;latest&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;browserify&quot;</span>: <span class=\"string\">&quot;latest&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;mocha&quot;</span>: <span class=\"string\">&quot;latest&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;lint&quot;</span>: <span class=\"string\">&quot;jshint **.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;mocha test/&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>scripts</code>字段指定了两项命令<code>lint</code>和<code>test</code>。命令行输入<code>npm run-script lint</code>或者<code>npm run lint</code>，就会执行<code>jshint **.js</code>，输入<code>npm run-script test</code>或者<code>npm run test</code>，就会执行<code>mocha test/</code>。<code>npm run</code>是<code>npm run-script</code>的缩写，一般都使用前者，但是后者可以更好地反应这个命令的本质。</p>\n<p><code>npm run</code>命令会自动在环境变量<code>$PATH</code>添加<code>node_modules/.bin</code>目录，所以<code>scripts</code>字段里面调用命令时不用加上路径，这就避免了全局安装NPM模块。</p>\n<p><code>npm run</code>如果不加任何参数，直接运行，会列出<code>package.json</code>里面所有可以执行的脚本命令。</p>\n<p>npm内置了两个命令简写，<code>npm test</code>等同于执行<code>npm run test</code>，<code>npm start</code>等同于执行<code>npm run start</code>。</p>\n<p><code>npm run</code>会创建一个Shell，执行指定的命令，并临时将<code>node_modules/.bin</code>加入PATH变量，这意味着本地模块可以直接运行。</p>\n<p>举例来说，你执行ESLint的安装命令。</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm i eslint --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n<p>运行上面的命令以后，会产生两个结果。首先，ESLint被安装到当前目录的<code>node_modules</code>子目录；其次，<code>node_modules/.bin</code>目录会生成一个符号链接<code>node_modules/.bin/eslint</code>，指向ESLint模块的可执行脚本。</p>\n<p>然后，你就可以在<code>package.json</code>的<code>script</code>属性里面，不带路径的引用<code>eslint</code>这个脚本。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;Test Project&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;eslint&quot;</span>: <span class=\"string\">&quot;^1.10.3&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;lint&quot;</span>: <span class=\"string\">&quot;eslint .&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>等到运行<code>npm run lint</code>的时候，它会自动执行<code>./node_modules/.bin/eslint .</code>。</p>\n<p>如果直接运行<code>npm run</code>不给出任何参数，就会列出<code>scripts</code>属性下所有命令。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"keyword\">run</span></span><br><span class=\"line\">Available scripts <span class=\"keyword\">in</span> the user-service package:</span><br><span class=\"line\">  lint</span><br><span class=\"line\">     jshint **.js</span><br><span class=\"line\">  <span class=\"keyword\">test</span></span><br><span class=\"line\">    mocha <span class=\"keyword\">test</span>/</span><br></pre></td></tr></table></figure>\n<p>下面是另一个<code>package.json</code>文件的例子。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;watch&quot;</span>: <span class=\"string\">&quot;watchify client/main.js -o public/app.js -v&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;browserify client/main.js -o public/app.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;start&quot;</span>: <span class=\"string\">&quot;npm run watch &amp; nodemon server.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;node test/all.js&quot;</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>上面代码在<code>scripts</code>项，定义了四个别名，每个别名都有对应的脚本命令。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"builtin-name\">run</span> watch</span><br><span class=\"line\">$ npm <span class=\"builtin-name\">run</span> build</span><br><span class=\"line\">$ npm <span class=\"builtin-name\">run</span> start</span><br><span class=\"line\">$ npm <span class=\"builtin-name\">run</span> test</span><br></pre></td></tr></table></figure>\n<p>其中，<code>start</code>和<code>test</code>属于特殊命令，可以省略<code>run</code>。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> npm <span class=\"built_in\">start</span></span><br><span class=\"line\"><span class=\"variable\">$</span> npm test</span><br></pre></td></tr></table></figure>\n<p>如果希望一个操作的输出，是另一个操作的输入，可以借用Linux系统的管道命令，将两个操作连在一起。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;build-js&quot;</span>: <span class=\"string\">&quot;browserify browser/main.js | uglifyjs -mc &gt; static/bundle.js&quot;</span></span><br></pre></td></tr></table></figure>\n<p>但是，更方便的写法是引用其他npm run命令。</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;<span class=\"keyword\">build</span><span class=\"string\">&quot;: &quot;</span>npm run <span class=\"keyword\">build</span>-js &amp;&amp; npm run <span class=\"keyword\">build</span>-css<span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面的写法是先运行<code>npm run build-js</code>，然后再运行<code>npm run build-css</code>，两个命令中间用<code>&amp;&amp;</code>连接。如果希望两个命令同时平行执行，它们中间可以用<code>&amp;</code>连接。</p>\n<p>下面是一个流操作的例子。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;autoprefixer&quot;</span>: <span class=\"string\">&quot;latest&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;cssmin&quot;</span>: <span class=\"string\">&quot;latest&quot;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;build:css&quot;</span>: <span class=\"string\">&quot;autoprefixer -b &#x27;last 2 versions&#x27; &lt; assets/styles/main.css | cssmin &gt; dist/main.css&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>写在<code>scripts</code>属性中的命令，也可以在<code>node_modules/.bin</code>目录中直接写成bash脚本。下面是一个bash脚本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> site/main</span><br><span class=\"line\">browserify browser/main.js | uglifyjs -mc &gt; static/bundle.js</span><br></pre></td></tr></table></figure>\n<p>假定上面的脚本文件名为build.sh，并且权限为可执行，就可以在scripts属性中引用该文件。</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;<span class=\"keyword\">build</span>-js<span class=\"string\">&quot;: &quot;</span>bin/<span class=\"keyword\">build</span>.sh<span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p><code>npm run</code>命令还可以添加参数。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;mocha test/&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码指定<code>npm test</code>，实际运行<code>mocha test/</code>。如果要通过<code>npm test</code>命令，将参数传到mocha，则参数之前要加上两个连词线。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm run <span class=\"built_in\">test</span> -- anothertest.js</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 等同于</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mocha <span class=\"built_in\">test</span>/ anothertest.js</span></span><br></pre></td></tr></table></figure>\n<p>上面命令表示，mocha要运行所有<code>test</code>子目录的测试脚本，以及另外一个测试脚本<a href=\"http://anothertest.js/\">anothertest.js</a>。</p>\n<p><code>npm run</code>本身有一个参数<code>-s</code>，表示关闭npm本身的输出，只输出脚本产生的结果。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输出npm命令头</span></span><br><span class=\"line\">$ npm <span class=\"keyword\">run</span> <span class=\"keyword\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不输出npm命令头</span></span><br><span class=\"line\">$ npm <span class=\"keyword\">run</span> -s <span class=\"keyword\">test</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"scripts脚本命令最佳实践\"><a href=\"#scripts脚本命令最佳实践\" class=\"headerlink\" title=\"scripts脚本命令最佳实践\"></a>scripts脚本命令最佳实践</h2><p><code>scripts</code>字段的脚本命令，有一些最佳实践，可以方便开发。首先，安装<code>npm-run-all</code>模块。</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install npm-run-<span class=\"built_in\">all</span> --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n<p>这个模块用于运行多个<code>scripts</code>脚本命令。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 继发执行</span></span><br><span class=\"line\">$ npm-<span class=\"built_in\">run</span>-all build:html build:js</span><br><span class=\"line\"><span class=\"comment\"># 等同于</span></span><br><span class=\"line\">$ npm <span class=\"built_in\">run</span> build:html &amp;&amp; npm <span class=\"built_in\">run</span> build:js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 并行执行</span></span><br><span class=\"line\">$ npm-<span class=\"built_in\">run</span>-all <span class=\"comment\">--parallel watch:html watch:js</span></span><br><span class=\"line\"><span class=\"comment\"># 等同于</span></span><br><span class=\"line\">$ npm <span class=\"built_in\">run</span> watch:html &amp; npm <span class=\"built_in\">run</span> watch:js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 混合执行</span></span><br><span class=\"line\">$ npm-<span class=\"built_in\">run</span>-all clean lint <span class=\"comment\">--parallel watch:html watch:js</span></span><br><span class=\"line\"><span class=\"comment\"># 等同于</span></span><br><span class=\"line\">$ npm-<span class=\"built_in\">run</span>-all clean lint</span><br><span class=\"line\">$ npm-<span class=\"built_in\">run</span>-all <span class=\"comment\">--parallel watch:html watch:js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通配符</span></span><br><span class=\"line\">$ npm-<span class=\"built_in\">run</span>-all <span class=\"comment\">--parallel watch:*</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"start脚本命令\"><a href=\"#start脚本命令\" class=\"headerlink\" title=\"start脚本命令\"></a>start脚本命令</h3><p><code>start</code>脚本命令，用于启动应用程序。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;start&quot;</span>: <span class=\"string\">&quot;npm-run-all --parallel dev serve&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令并行执行<code>dev</code>脚本命令和<code>serve</code><br>脚本命令，等同于下面的形式。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"builtin-name\">run</span> dev &amp; npm <span class=\"builtin-name\">run</span> serve</span><br></pre></td></tr></table></figure>\n<p>如果start脚本没有配置，<code>npm start</code>命令默认执行下面的脚本，前提是模块的根目录存在一个server.js文件。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">node</span> <span class=\"title\">server</span>.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"dev脚本命令\"><a href=\"#dev脚本命令\" class=\"headerlink\" title=\"dev脚本命令\"></a>dev脚本命令</h3><p><code>dev</code>脚本命令，规定开发阶段所要做的处理，比如构建网页资源。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;dev&quot;</span>: <span class=\"string\">&quot;npm-run-all dev:*&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令用于继发执行所有<code>dev</code>的子命令。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;predev:sass&quot;</span>: <span class=\"string\">&quot;node-sass --source-map src/css/hoodie.css.map --output-style nested src/sass/base.scss src/css/hoodie.css&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令将sass文件编译为css文件，并生成source map文件。</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&quot;dev:sass&quot;:</span> <span class=\"comment\">&quot;node</span><span class=\"literal\">-</span><span class=\"comment\">sass</span> --<span class=\"comment\">source</span><span class=\"literal\">-</span><span class=\"comment\">map</span> <span class=\"comment\">src/css/hoodie</span><span class=\"string\">.</span><span class=\"comment\">css</span><span class=\"string\">.</span><span class=\"comment\">map</span> --<span class=\"comment\">watch</span> --<span class=\"comment\">output</span><span class=\"literal\">-</span><span class=\"comment\">style</span> <span class=\"comment\">nested</span> <span class=\"comment\">src/sass/base</span><span class=\"string\">.</span><span class=\"comment\">scss</span> <span class=\"comment\">src/css/hoodie</span><span class=\"string\">.</span><span class=\"comment\">css&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令会监视sass文件的变动，只要有变动，就自动将其编译为css文件。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;dev:autoprefix&quot;</span>: <span class=\"string\">&quot;postcss --use autoprefixer --autoprefixer.browsers <span class=\"subst\">\\&quot;</span>&gt; 5%<span class=\"subst\">\\&quot;</span> --output src/css/hoodie.css src/css/hoodie.css&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令为css文件加上浏览器前缀，限制条件是只考虑市场份额大于5%的浏览器。</p>\n<h3 id=\"serve脚本命令\"><a href=\"#serve脚本命令\" class=\"headerlink\" title=\"serve脚本命令\"></a>serve脚本命令</h3><p><code>serve</code>脚本命令用于启动服务。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;serve&quot;</span>: <span class=\"string\">&quot;live-server dist/ --port=9090&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令启动服务，用的是<code>live-server</code>模块，将服务启动在9090端口，展示<code>dist</code>子目录。</p>\n<p><code>live-server</code>模块有三个功能。</p>\n<ul>\n<li>启动一个HTTP服务器，展示指定目录的<code>index.html</code>文件，通过该文件加载各种网络资源，这是<code>file://</code>协议做不到的。</li>\n<li>添加自动刷新功能。只要指定目录之中，文件有任何变化，它就会刷新页面。</li>\n<li><code>npm run serve</code>命令执行以后，自动打开浏览器。<br>以前，上面三个功能需要三个模块来完成：<code>http-server</code>、<code>live-reload</code>和<code>opener</code>，现在只要<code>live-server</code>一个模块就够了。</li>\n</ul>\n<h3 id=\"test脚本命令\"><a href=\"#test脚本命令\" class=\"headerlink\" title=\"test脚本命令\"></a>test脚本命令</h3><p><code>test</code>脚本命令用于执行测试。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;npm-run-all test:*&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;test:lint&quot;</span>: <span class=\"string\">&quot;sass-lint --verbose --config .sass-lint.yml src/sass/*&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令规定，执行测试时，运行<code>lint</code>脚本，检查脚本之中的语法错误。</p>\n<h3 id=\"prod脚本命令\"><a href=\"#prod脚本命令\" class=\"headerlink\" title=\"prod脚本命令\"></a>prod脚本命令</h3><p><code>prod</code>脚本命令，规定进入生产环境时需要做的处理。</p>\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;prod&quot;</span>: <span class=\"string\">&quot;npm-run-all prod:*&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;prod:sass&quot;</span>: <span class=\"string\">&quot;node-sass --output-style compressed src/sass/base.scss src/css/prod/hoodie.min.css&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;prod:autoprefix&quot;</span>: <span class=\"string\">&quot;postcss --use autoprefixer --autoprefixer.browsers &quot;</span>&gt; <span class=\"number\">5</span>%&quot; --output src/css/prod/hoodie.<span class=\"keyword\">min</span>.css src/css/prod/hoodie.<span class=\"keyword\">min</span>.css<span class=\"string\">&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令将sass文件转为css文件，并加上浏览器前缀。</p>\n<h3 id=\"help脚本命令\"><a href=\"#help脚本命令\" class=\"headerlink\" title=\"help脚本命令\"></a>help脚本命令</h3><p><code>help</code>脚本命令用于展示帮助信息。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;help&quot;</span>: <span class=\"string\">&quot;markdown-chalk --input DEVELOPMENT.md&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令之中，<code>markdown-chalk</code>模块用于将指定的markdown文件，转为彩色文本显示在终端之中。</p>\n<h3 id=\"docs脚本命令\"><a href=\"#docs脚本命令\" class=\"headerlink\" title=\"docs脚本命令\"></a>docs脚本命令</h3><p><code>docs</code>脚本命令用于生成文档。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;docs&quot;</span>: <span class=\"string\">&quot;kss-node --source src/sass --homepage ../../styleguide.md&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面命令使用<code>kss-node</code>模块，提供源码的注释生成markdown格式的文档。</p>\n<h3 id=\"pre-和-post-脚本\"><a href=\"#pre-和-post-脚本\" class=\"headerlink\" title=\"pre- 和 post- 脚本\"></a>pre- 和 post- 脚本</h3><p><code>npm run</code>为每条命令提供了<code>pre-</code>和<code>post-</code>两个钩子（hook）。以<code>npm run lint</code>为例，执行这条命令之前，npm会先查看有没有定义prelint和postlint两个钩子，如果有的话，就会先执行<code>npm run prelint</code>，然后执行<code>npm run lint</code>，最后执行<code>npm run postlint</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;myproject&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;eslint&quot;</span>: <span class=\"string\">&quot;latest&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;karma&quot;</span>: <span class=\"string\">&quot;latest&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;lint&quot;</span>: <span class=\"string\">&quot;eslint --cache --ext .js --ext .jsx src&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;karma start --log-leve=error karma.config.js --single-run=true&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;pretest&quot;</span>: <span class=\"string\">&quot;npm run lint&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;posttest&quot;</span>: <span class=\"string\">&quot;echo &#x27;Finished running tests&#x27;&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码是一个<code>package.json</code>文件的例子。如果执行<code>npm test</code>，会按下面的顺序执行相应的命令。</p>\n<pre><code>1. `pretest`\n1. `test`\n1. `posttest`\n</code></pre>\n<p>如果执行过程出错，就不会执行排在后面的脚本，即如果prelint脚本执行出错，就不会接着执行lint和postlint脚本。</p>\n<p>下面是一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;karma start&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;test:lint&quot;</span>: <span class=\"string\">&quot;eslint . --ext .js --ext .jsx&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;pretest&quot;</span>: <span class=\"string\">&quot;npm run test:lint&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，在运行<code>npm run test</code>之前，会自动检查代码，即运行<code>npm run test:lint</code>命令。</p>\n<p>下面是一些常见的<code>pre-</code>和<code>post-</code>脚本。</p>\n<ul>\n<li><code>prepublish</code>：发布一个模块前执行。</li>\n<li><code>postpublish</code>：发布一个模块后执行。</li>\n<li><code>preinstall</code>：用户执行<code>npm install</code>命令时，先执行该脚本。</li>\n<li><code>postinstall</code>：用户执行<code>npm install</code>命令时，安装结束后执行该脚本，通常用于将下载的源码编译成用户需要的格式，比如有些模块需要在用户机器上跟本地的C++模块一起编译。</li>\n<li><code>preuninstall</code>：卸载一个模块前执行。</li>\n<li><code>postuninstall</code>：卸载一个模块后执行。</li>\n<li><code>preversion</code>：更改模块版本前执行。</li>\n<li><code>postversion</code>：更改模块版本后执行。</li>\n<li><code>pretest</code>：运行<code>npm test</code>命令前执行。</li>\n<li><code>posttest</code>：运行<code>npm test</code>命令后执行。</li>\n<li><code>prestop</code>：运行<code>npm stop</code>命令前执行。</li>\n<li><code>poststop</code>：运行<code>npm stop</code>命令后执行。</li>\n<li><code>prestart</code>：运行<code>npm start</code>命令前执行。</li>\n<li><code>poststart</code>：运行<code>npm start</code>命令后执行。</li>\n<li><code>prerestart</code>：运行<code>npm restart</code>命令前执行。</li>\n<li><code>postrestart</code>：运行<code>npm restart</code>命令后执行。<br>对于最后一个<code>npm restart</code>命令，如果没有设置<code>restart</code>脚本，<code>prerestart</code>和<code>postrestart</code>会依次执行stop和start脚本。</li>\n</ul>\n<p>另外，不能在<code>pre</code>脚本之前再加<code>pre</code>，即<code>prepretest</code>脚本不起作用。</p>\n<p>注意，即使Npm可以自动运行<code>pre</code>和<code>post</code>脚本，也可以手动执行它们。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm <span class=\"builtin-name\">run</span> prepublish</span><br></pre></td></tr></table></figure>\n<p>下面是<code>post install</code>的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;postinstall&quot;</span>: <span class=\"string\">&quot;node lib/post_install.js&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的这个命令，主要用于处理从Git仓库拉下来的源码。比如，有些源码是用TypeScript写的，可能需要转换一下。</p>\n<p>下面是<code>publish</code>钩子的一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;dist:modules&quot;</span>: <span class=\"string\">&quot;babel ./src --out-dir ./dist-modules&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;gh-pages&quot;</span>: <span class=\"string\">&quot;webpack&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;gh-pages:deploy&quot;</span>: <span class=\"string\">&quot;gh-pages -d gh-pages&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;prepublish&quot;</span>: <span class=\"string\">&quot;npm run dist:modules&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;postpublish&quot;</span>: <span class=\"string\">&quot;npm run gh-pages &amp;&amp; npm run gh-pages:deploy&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面命令在运行<code>npm run publish</code>时，会先执行Babel编译，然后调用Webpack构建，最后发到Github Pages上面。</p>\n<p>以上都是npm相关操作的钩子，如果安装某些模块，还能支持Git相关的钩子。下面以husky模块为例。</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install husky --<span class=\"built_in\">save</span>-<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n<p>安装以后，就能在<code>package.json</code>添加<code>precommit</code>、<code>prepush</code>等钩子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;lint&quot;</span>: <span class=\"string\">&quot;eslint yourJsFiles.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;precommit&quot;</span>: <span class=\"string\">&quot;npm run test &amp;&amp; npm run lint&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;prepush&quot;</span>: <span class=\"string\">&quot;npm run test &amp;&amp; npm run lint&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;...&quot;</span>: <span class=\"string\">&quot;...&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类似作用的模块还有<code>pre-commit</code>、<code>precommit-hook</code>等。</p>\n<h2 id=\"内部变量\"><a href=\"#内部变量\" class=\"headerlink\" title=\"内部变量\"></a>内部变量</h2><p>scripts字段可以使用一些内部变量，主要是package.json的各种字段。</p>\n<p>比如，package.json的内容是<code>&#123;&quot;name&quot;:&quot;foo&quot;, &quot;version&quot;:&quot;1.2.5&quot;&#125;</code>，那么变量<code>npm_package_name</code>的值是foo，变量<code>npm_package_version</code>的值是1.2.5。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;bundle&quot;</span>: <span class=\"string\">&quot;mkdir -p build/$npm_package_version/&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行<code>npm run bundle</code>以后，将会生成<code>build/1.2.5/</code>子目录。</p>\n<p><code>config</code>字段也可以用于设置内部字段。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;fooproject&quot;</span>,</span><br><span class=\"line\"><span class=\"string\">&quot;config&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;reporter&quot;</span>: <span class=\"string\">&quot;xunit&quot;</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;mocha test/ --reporter <span class=\"variable\">$npm_package_config_reporter</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，变量<code>npm_package_config_reporter</code>对应的就是reporter。</p>\n<h2 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h2><p>npm的通配符的规则如下。</p>\n<ul>\n<li><code>*</code> 匹配0个或多个字符</li>\n<li><code>?</code> 匹配1个字符</li>\n<li><code>[...]</code> 匹配某个范围的字符。如果该范围的第一个字符是!或^，则匹配不在该范围的字符。</li>\n<li><code>!(pattern|pattern|pattern)</code> 匹配任何不符合给定的模式</li>\n<li><code>?(pattern|pattern|pattern)</code> 匹配0个或1个给定的模式</li>\n<li><code>+(pattern|pattern|pattern)</code> 匹配1个或多个给定的模式</li>\n<li><code>*(a|b|c)</code> 匹配0个或多个给定的模式</li>\n<li><code>@(pattern|pat*|pat?erN)</code> 只匹配给定模式之一</li>\n<li><code>**</code> 如果出现在路径部分，表示0个或多个子目录。</li>\n</ul>\n<h2 id=\"npm-link\"><a href=\"#npm-link\" class=\"headerlink\" title=\"npm link\"></a>npm link</h2><p>开发NPM模块的时候，有时我们会希望，边开发边试用，比如本地调试的时候，<code>require(&#39;myModule&#39;)</code>会自动加载本机开发中的模块。Node规定，使用一个模块时，需要将其安装到全局的或项目的<code>node_modules</code>目录之中。对于开发中的模块，解决方法就是在全局的<code>node_modules</code>目录之中，生成一个符号链接，指向模块的本地目录。</p>\n<p><code>npm link</code>就能起到这个作用，会自动建立这个符号链接。</p>\n<p>请设想这样一个场景，你开发了一个模块<code>myModule</code>，目录为<code>src/myModule</code>，你自己的项目<code>myProject</code>要用到这个模块，项目目录为<code>src/myProject</code>。首先，在模块目录<code>（src/myModule）</code>下运行<code>npm link</code>命令。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/myModule$ <span class=\"built_in\">npm</span> link</span><br></pre></td></tr></table></figure>\n<p>上面的命令会在NPM的全局模块目录内，生成一个符号链接文件，该文件的名字就是<code>package.json</code>文件中指定的模块名。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/path/</span>to<span class=\"regexp\">/global/</span>node_modules<span class=\"regexp\">/myModule -&gt; src/my</span>Module</span><br></pre></td></tr></table></figure>\n<p>这个时候，已经可以全局调用<code>myModule</code>模块了。但是，如果我们要让这个模块安装在项目内，还要进行下面的步骤。</p>\n<p>切换到项目目录，再次运行<code>npm link</code>命令，并指定模块名。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/myProject$ <span class=\"built_in\">npm</span> link myModule</span><br></pre></td></tr></table></figure>\n<p>上面命令等同于生成了本地模块的符号链接。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src<span class=\"regexp\">/myProject/</span>node_modules<span class=\"regexp\">/myModule -&gt; /</span>path<span class=\"regexp\">/to/g</span>lobal<span class=\"regexp\">/node_modules/my</span>Module</span><br></pre></td></tr></table></figure>\n<p>然后，就可以在你的项目中，加载该模块了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myModule = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;myModule&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>这样一来，<code>myModule</code>的任何变化，都可以直接反映在<code>myProject</code>项目之中。但是，这样也出现了风险，任何在<code>myProject</code>目录中对<code>myModule</code>的修改，都会反映到模块的源码中。</p>\n<p>如果你的项目不再需要该模块，可以在项目目录内使用<code>npm unlink</code>命令，删除符号链接。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src/myProject$ <span class=\"built_in\">npm</span> unlink myModule</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-bin\"><a href=\"#npm-bin\" class=\"headerlink\" title=\"npm bin\"></a>npm bin</h2><p><code>npm bin</code>命令显示相对于当前目录的，Node模块的可执行脚本所在的目录（即<code>.bin</code>目录）。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 项目根目录下执行</span></span><br><span class=\"line\">$ npm bin</span><br><span class=\"line\">.<span class=\"regexp\">/node_modules/</span>.bin</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-adduser\"><a href=\"#npm-adduser\" class=\"headerlink\" title=\"npm adduser\"></a>npm adduser</h2><p><code>npm adduser</code>用于在npmjs.com注册一个用户。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm adduser</span><br><span class=\"line\"><span class=\"attr\">Username</span>: YOUR_USER_NAME</span><br><span class=\"line\"><span class=\"attr\">Password</span>: YOUR_PASSWORD</span><br><span class=\"line\"><span class=\"attr\">Email</span>: YOUR_EMAIL@domain.com</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-publish\"><a href=\"#npm-publish\" class=\"headerlink\" title=\"npm publish\"></a>npm publish</h2><p><code>npm publish</code>用于将当前模块发布到<a href=\"http://npmjs.com/\">npmjs.com</a>。执行之前，需要向<a href=\"http://npmjs.com/\">npmjs.com</a>申请用户名。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> adduser</span><br></pre></td></tr></table></figure>\n<p>如果已经注册过，就使用下面的命令登录。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> login</span><br></pre></td></tr></table></figure>\n<p>登录以后，就可以使用<code>npm publish</code>命令发布。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> publish</span><br></pre></td></tr></table></figure>\n<p>如果当前模块是一个beta版，比如<code>1.3.1-beta.3</code>，那么发布的时候需要使用tag参数，将其发布到指定标签，默认的发布标签是<code>latest</code>。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm publish --<span class=\"keyword\">tag</span> <span class=\"title\">beta</span></span><br></pre></td></tr></table></figure>\n<p>如果发布私有模块，模块初始化的时候，需要加上<code>scope</code>参数。只有npm的付费用户才能发布私有模块。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm init <span class=\"attribute\">--scope</span>=&lt;yourscope&gt;</span><br></pre></td></tr></table></figure>\n<p>如果你的模块是用ES6写的，那么发布的时候，最好转成ES5。首先，需要安装Babel。</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev babel-<span class=\"keyword\">cli</span><span class=\"subst\">@6</span> babel-preset-es2015<span class=\"subst\">@6</span></span><br></pre></td></tr></table></figure>\n<p>然后，在<code>package.json</code>里面写入<code>build</code>脚本。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;babel source --presets babel-preset-es2015 --out-dir distribution&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;prepublish&quot;</span>: <span class=\"string\">&quot;npm run build&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行上面的脚本，会将<code>source</code>目录里面的ES6源码文件，转为<code>distribution</code>目录里面的ES5源码文件。然后，在项目根目录下面创建两个文件<code>.npmignore</code>和<code>.gitignore</code>，分别写入以下内容。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> .npmignore</span><br><span class=\"line\">source</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span> .gitignore</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">distribution</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-deprecate\"><a href=\"#npm-deprecate\" class=\"headerlink\" title=\"npm deprecate\"></a>npm deprecate</h2><p>如果想废弃某个版本的模块，可以使用npm deprecate命令。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm deprecate <span class=\"keyword\">my</span>-thing@<span class=\"string\">&quot;&lt; 0.2.3&quot;</span> <span class=\"string\">&quot;critical bug fixed in v0.2.3&quot;</span></span><br></pre></td></tr></table></figure>\n<p>运行上面的命令以后，小于<code>0.2.3</code>版本的模块的<code>package.json</code>都会写入一行警告，用户安装这些版本时，这行警告就会在命令行显示。</p>\n<h2 id=\"npm-owner\"><a href=\"#npm-owner\" class=\"headerlink\" title=\"npm owner\"></a>npm owner</h2><p>模块的维护者可以发布新版本。<code>npm owner</code>命令用于管理模块的维护者。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出指定模块的维护者</span><br><span class=\"line\">$ npm <span class=\"keyword\">owner</span> ls &lt;package <span class=\"type\">name</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 新增维护者</span><br><span class=\"line\">$ npm <span class=\"keyword\">owner</span> <span class=\"keyword\">add</span> &lt;<span class=\"keyword\">user</span>&gt; &lt;package <span class=\"type\">name</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除维护者</span><br><span class=\"line\">$ npm <span class=\"keyword\">owner</span> rm &lt;<span class=\"keyword\">user</span>&gt; &lt;package <span class=\"type\">name</span>&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h2><h3 id=\"npm-home，npm-repo\"><a href=\"#npm-home，npm-repo\" class=\"headerlink\" title=\"npm home，npm repo\"></a>npm home，npm repo</h3><p><code>npm home</code>命令可以打开一个模块的主页，<code>npm repo</code>命令则是打开一个模块的代码仓库。</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>npm home <span class=\"variable\">$package</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>npm repo <span class=\"variable\">$package</span></span><br></pre></td></tr></table></figure>\n<p>这两个命令不需要模块先安装。</p>\n<h3 id=\"npm-outdated\"><a href=\"#npm-outdated\" class=\"headerlink\" title=\"npm outdated\"></a>npm outdated</h3><p><code>npm outdated</code>命令检查当前项目所依赖的模块，是否已经有新版本。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> outdated</span><br></pre></td></tr></table></figure>\n<p>它会输出当前版本（current version）、应当安装的版本（wanted version）和最新发布的版本（latest version）。</p>\n<h3 id=\"npm-prune\"><a href=\"#npm-prune\" class=\"headerlink\" title=\"npm prune\"></a>npm prune</h3><p><code>npm prune</code>检查当前项目的<code>node_modules</code>目录中，是否有<code>package.json</code>里面没有提到的模块，然后将所有这些模块输出在命令行。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> prune</span><br></pre></td></tr></table></figure>\n<h3 id=\"npm-shrinkwrap\"><a href=\"#npm-shrinkwrap\" class=\"headerlink\" title=\"npm shrinkwrap\"></a>npm shrinkwrap</h3><p><code>npm shrinkwrap</code>的作用是锁定当前项目的依赖模块的版本。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">npm</span> shrinkwrap</span><br></pre></td></tr></table></figure>\n<p>运行该命令后，会在当前项目的根目录下生成一个<code>npm-shrinkwrap.json</code>文件，内容是<code>node_modules</code>目录下所有已经安装的模块，以及它们的精确版本。</p>\n<p>下次运行<code>npm install</code>命令时，<code>npm</code>发现当前目录下有<code>npm-shrinkwrap.json</code>文件，就会只安装里面提到的模块，且版本也会保持一致。</p>\n<p>作者：majun00<br>链接：<a href=\"https://www.jianshu.com/p/30ef3c874c1e\">https://www.jianshu.com/p/30ef3c874c1e</a></p>"},{"title":"用Hexo搭建个人博客-前言","date":"2019-12-29T23:50:57.000Z","_content":"\n## 用Hexo搭建个人博客\n\n### 前言\n从本质来说Hexo是一个基于Node.js的Web程序框架。运用Hexo脚手架，我们可以通过npm创建并管理一个生成静态页面博客的Web工程。如果从web工程的角度来看Hexo，这样一个编辑博客的客户端未免太重量级了，要知道动态博客系统我们无论在何时何地，只要能打开页面就可以编写管理博客。但是从部署一个博客服务端程序来看；当我们要部署一个动态的博客程序时，我们需要有数据库来存储我们的博客的相关数据，我们需要或是Apache、或是Tomcat、或是Node.js等等这样的web程序容器来运行相关的web程序；当然你还需要一台联网的服务器机器，否则我们前面说的也是空中楼阁了。所以部署一个动态的个人的博客系统可不是一件轻松的事情。\n<!-- more -->\n这个时候，突然出现了github pages，你可以把它看作是个github推出了一个公共的nginx服务器。任何github用户可以把自己的html页面挂在这个服务器上；只要github设定了相关的域名，通过反向代理你可以访问自己的网页。相对于前面的博客系统服务端，这样的服务端简直太轻量了。\n\n于是当大家把越来越多的html页面挂在github pages上时，如何系统化编辑组织自己的html页面就是一个问题了。然后出现了不少解决方案。而Hexo就是一个特别适合前端工程师的解决方案。\n\n### 规划\n\n#### github的相关设定\n可以是说，静态页面博客的兴起是从github pages开始的。现在类似github pages的产品也有不少，但是这里我们还是以github为例创建个人静态博客。而其他的产品也是类似的，甚至可以之间迁移过去。\n\n规划github主要是两方面。一方面是github pages的设定，这是静态博客基础。其次是工程配置管理库的设定；毕竟我们不可能每到一个地方还要从头开始设定工程，特别是还有我们的博客数据总不能总是随身带着吧。这样一个配置管理库就是必须的了。\n\n#### 工程设定\n前面说了，基于Hexo的博客系统，从本质来说就是一个基于Node.js的Web程序工程，设定好这个工程，对我们编写、部署博客会提供很大的便利。\n\n#### 模板的设定\n爱美之心，人皆有之。一个漂亮的模板不仅能让自己在写博客时轻松舒服，也让别人看你的博客是赏心悦目，何乐而不为之。特别是一个好的模板有很多设定好的关于这个站点的功能，只需要你简单配置就可以了，而不用自己再去编写代码；这样可节省自己的时间。\n\n### 结语\n相对于动态博客来说，静态博客的确费时费力。但对于一个需要能由自己控制而且免费的个人博客系统来说，这是值得的。下面我们就配置一个基于Hexo的个人静态博客。\n","source":"_posts/用Hexo搭建个人博客-前言.md","raw":"---\ntitle: 用Hexo搭建个人博客-前言\ndate: 2019-12-30 07:50:57\ncategories:\n- 用Hexo搭建个人博客\ntags:\n- Hexo\n- github\n- CentOS\n---\n\n## 用Hexo搭建个人博客\n\n### 前言\n从本质来说Hexo是一个基于Node.js的Web程序框架。运用Hexo脚手架，我们可以通过npm创建并管理一个生成静态页面博客的Web工程。如果从web工程的角度来看Hexo，这样一个编辑博客的客户端未免太重量级了，要知道动态博客系统我们无论在何时何地，只要能打开页面就可以编写管理博客。但是从部署一个博客服务端程序来看；当我们要部署一个动态的博客程序时，我们需要有数据库来存储我们的博客的相关数据，我们需要或是Apache、或是Tomcat、或是Node.js等等这样的web程序容器来运行相关的web程序；当然你还需要一台联网的服务器机器，否则我们前面说的也是空中楼阁了。所以部署一个动态的个人的博客系统可不是一件轻松的事情。\n<!-- more -->\n这个时候，突然出现了github pages，你可以把它看作是个github推出了一个公共的nginx服务器。任何github用户可以把自己的html页面挂在这个服务器上；只要github设定了相关的域名，通过反向代理你可以访问自己的网页。相对于前面的博客系统服务端，这样的服务端简直太轻量了。\n\n于是当大家把越来越多的html页面挂在github pages上时，如何系统化编辑组织自己的html页面就是一个问题了。然后出现了不少解决方案。而Hexo就是一个特别适合前端工程师的解决方案。\n\n### 规划\n\n#### github的相关设定\n可以是说，静态页面博客的兴起是从github pages开始的。现在类似github pages的产品也有不少，但是这里我们还是以github为例创建个人静态博客。而其他的产品也是类似的，甚至可以之间迁移过去。\n\n规划github主要是两方面。一方面是github pages的设定，这是静态博客基础。其次是工程配置管理库的设定；毕竟我们不可能每到一个地方还要从头开始设定工程，特别是还有我们的博客数据总不能总是随身带着吧。这样一个配置管理库就是必须的了。\n\n#### 工程设定\n前面说了，基于Hexo的博客系统，从本质来说就是一个基于Node.js的Web程序工程，设定好这个工程，对我们编写、部署博客会提供很大的便利。\n\n#### 模板的设定\n爱美之心，人皆有之。一个漂亮的模板不仅能让自己在写博客时轻松舒服，也让别人看你的博客是赏心悦目，何乐而不为之。特别是一个好的模板有很多设定好的关于这个站点的功能，只需要你简单配置就可以了，而不用自己再去编写代码；这样可节省自己的时间。\n\n### 结语\n相对于动态博客来说，静态博客的确费时费力。但对于一个需要能由自己控制而且免费的个人博客系统来说，这是值得的。下面我们就配置一个基于Hexo的个人静态博客。\n","slug":"用Hexo搭建个人博客-前言","published":1,"updated":"2021-09-21T01:19:04.422Z","_id":"ckttecr0100121kuv1sr62qa0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"用Hexo搭建个人博客\"><a href=\"#用Hexo搭建个人博客\" class=\"headerlink\" title=\"用Hexo搭建个人博客\"></a>用Hexo搭建个人博客</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>从本质来说Hexo是一个基于Node.js的Web程序框架。运用Hexo脚手架，我们可以通过npm创建并管理一个生成静态页面博客的Web工程。如果从web工程的角度来看Hexo，这样一个编辑博客的客户端未免太重量级了，要知道动态博客系统我们无论在何时何地，只要能打开页面就可以编写管理博客。但是从部署一个博客服务端程序来看；当我们要部署一个动态的博客程序时，我们需要有数据库来存储我们的博客的相关数据，我们需要或是Apache、或是Tomcat、或是Node.js等等这样的web程序容器来运行相关的web程序；当然你还需要一台联网的服务器机器，否则我们前面说的也是空中楼阁了。所以部署一个动态的个人的博客系统可不是一件轻松的事情。</p>\n<span id=\"more\"></span>\n<p>这个时候，突然出现了github pages，你可以把它看作是个github推出了一个公共的nginx服务器。任何github用户可以把自己的html页面挂在这个服务器上；只要github设定了相关的域名，通过反向代理你可以访问自己的网页。相对于前面的博客系统服务端，这样的服务端简直太轻量了。</p>\n<p>于是当大家把越来越多的html页面挂在github pages上时，如何系统化编辑组织自己的html页面就是一个问题了。然后出现了不少解决方案。而Hexo就是一个特别适合前端工程师的解决方案。</p>\n<h3 id=\"规划\"><a href=\"#规划\" class=\"headerlink\" title=\"规划\"></a>规划</h3><h4 id=\"github的相关设定\"><a href=\"#github的相关设定\" class=\"headerlink\" title=\"github的相关设定\"></a>github的相关设定</h4><p>可以是说，静态页面博客的兴起是从github pages开始的。现在类似github pages的产品也有不少，但是这里我们还是以github为例创建个人静态博客。而其他的产品也是类似的，甚至可以之间迁移过去。</p>\n<p>规划github主要是两方面。一方面是github pages的设定，这是静态博客基础。其次是工程配置管理库的设定；毕竟我们不可能每到一个地方还要从头开始设定工程，特别是还有我们的博客数据总不能总是随身带着吧。这样一个配置管理库就是必须的了。</p>\n<h4 id=\"工程设定\"><a href=\"#工程设定\" class=\"headerlink\" title=\"工程设定\"></a>工程设定</h4><p>前面说了，基于Hexo的博客系统，从本质来说就是一个基于Node.js的Web程序工程，设定好这个工程，对我们编写、部署博客会提供很大的便利。</p>\n<h4 id=\"模板的设定\"><a href=\"#模板的设定\" class=\"headerlink\" title=\"模板的设定\"></a>模板的设定</h4><p>爱美之心，人皆有之。一个漂亮的模板不仅能让自己在写博客时轻松舒服，也让别人看你的博客是赏心悦目，何乐而不为之。特别是一个好的模板有很多设定好的关于这个站点的功能，只需要你简单配置就可以了，而不用自己再去编写代码；这样可节省自己的时间。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>相对于动态博客来说，静态博客的确费时费力。但对于一个需要能由自己控制而且免费的个人博客系统来说，这是值得的。下面我们就配置一个基于Hexo的个人静态博客。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"用Hexo搭建个人博客\"><a href=\"#用Hexo搭建个人博客\" class=\"headerlink\" title=\"用Hexo搭建个人博客\"></a>用Hexo搭建个人博客</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>从本质来说Hexo是一个基于Node.js的Web程序框架。运用Hexo脚手架，我们可以通过npm创建并管理一个生成静态页面博客的Web工程。如果从web工程的角度来看Hexo，这样一个编辑博客的客户端未免太重量级了，要知道动态博客系统我们无论在何时何地，只要能打开页面就可以编写管理博客。但是从部署一个博客服务端程序来看；当我们要部署一个动态的博客程序时，我们需要有数据库来存储我们的博客的相关数据，我们需要或是Apache、或是Tomcat、或是Node.js等等这样的web程序容器来运行相关的web程序；当然你还需要一台联网的服务器机器，否则我们前面说的也是空中楼阁了。所以部署一个动态的个人的博客系统可不是一件轻松的事情。</p>","more":"<p>这个时候，突然出现了github pages，你可以把它看作是个github推出了一个公共的nginx服务器。任何github用户可以把自己的html页面挂在这个服务器上；只要github设定了相关的域名，通过反向代理你可以访问自己的网页。相对于前面的博客系统服务端，这样的服务端简直太轻量了。</p>\n<p>于是当大家把越来越多的html页面挂在github pages上时，如何系统化编辑组织自己的html页面就是一个问题了。然后出现了不少解决方案。而Hexo就是一个特别适合前端工程师的解决方案。</p>\n<h3 id=\"规划\"><a href=\"#规划\" class=\"headerlink\" title=\"规划\"></a>规划</h3><h4 id=\"github的相关设定\"><a href=\"#github的相关设定\" class=\"headerlink\" title=\"github的相关设定\"></a>github的相关设定</h4><p>可以是说，静态页面博客的兴起是从github pages开始的。现在类似github pages的产品也有不少，但是这里我们还是以github为例创建个人静态博客。而其他的产品也是类似的，甚至可以之间迁移过去。</p>\n<p>规划github主要是两方面。一方面是github pages的设定，这是静态博客基础。其次是工程配置管理库的设定；毕竟我们不可能每到一个地方还要从头开始设定工程，特别是还有我们的博客数据总不能总是随身带着吧。这样一个配置管理库就是必须的了。</p>\n<h4 id=\"工程设定\"><a href=\"#工程设定\" class=\"headerlink\" title=\"工程设定\"></a>工程设定</h4><p>前面说了，基于Hexo的博客系统，从本质来说就是一个基于Node.js的Web程序工程，设定好这个工程，对我们编写、部署博客会提供很大的便利。</p>\n<h4 id=\"模板的设定\"><a href=\"#模板的设定\" class=\"headerlink\" title=\"模板的设定\"></a>模板的设定</h4><p>爱美之心，人皆有之。一个漂亮的模板不仅能让自己在写博客时轻松舒服，也让别人看你的博客是赏心悦目，何乐而不为之。特别是一个好的模板有很多设定好的关于这个站点的功能，只需要你简单配置就可以了，而不用自己再去编写代码；这样可节省自己的时间。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>相对于动态博客来说，静态博客的确费时费力。但对于一个需要能由自己控制而且免费的个人博客系统来说，这是值得的。下面我们就配置一个基于Hexo的个人静态博客。</p>"},{"title":"个人博客的使用方式","date":"2019-12-30T13:04:26.000Z","_content":"用了2天时间配置了这个博客，现在看来基本上是可以用了。怎么用这个博客还是需要有一个规划的；而第一篇正式的博客就是这个规划了。\n\n### 为什么要建这个博客\n以前是用svn管理自己的工程以及文档。在适应以git作为配置管理工具以来，我已经渐渐把自己的配置管理工具完全转移到了git上了。不同于svn的集中管理，git的分布式管理就注定了每一个项目就是一个单独的配置库，这样一些文档、笔记、总结散落的到处都是。所以就决定单独建立一个专门存储相关文档的库。但是如何将文档组织起来一直没有拿定主意，如果用专门的笔记软件就不能充分利用git的功能，而只是文字档又过于零落。最后还是决定用静态博客的形式来组织总结的一些文档。\n<!-- more -->\n### 如何组织博客\n现在的设想就是分类为主，标签为辅。关于一个知识点，在一个分类之下，从**资料摘录**、到**练习笔记**、到**开发笔记**、到**总结**组织起来,可以充分的利用git的功能去完善自己的文档。而github pages也提供了一个友好的查阅文档的界面。\n\n### 关于其他\n至于博客的其他功能，现在就先不急，以后有时间再说。对于目前来说，这个静态博客就是自己的文档管理器。\n","source":"_posts/个人博客的使用方式.md","raw":"---\ntitle: 个人博客的使用方式\ndate: 2019-12-30 21:04:26\ncategories:\n- 个人博客的使用方式\ntags:\n- 个人博客\n---\n用了2天时间配置了这个博客，现在看来基本上是可以用了。怎么用这个博客还是需要有一个规划的；而第一篇正式的博客就是这个规划了。\n\n### 为什么要建这个博客\n以前是用svn管理自己的工程以及文档。在适应以git作为配置管理工具以来，我已经渐渐把自己的配置管理工具完全转移到了git上了。不同于svn的集中管理，git的分布式管理就注定了每一个项目就是一个单独的配置库，这样一些文档、笔记、总结散落的到处都是。所以就决定单独建立一个专门存储相关文档的库。但是如何将文档组织起来一直没有拿定主意，如果用专门的笔记软件就不能充分利用git的功能，而只是文字档又过于零落。最后还是决定用静态博客的形式来组织总结的一些文档。\n<!-- more -->\n### 如何组织博客\n现在的设想就是分类为主，标签为辅。关于一个知识点，在一个分类之下，从**资料摘录**、到**练习笔记**、到**开发笔记**、到**总结**组织起来,可以充分的利用git的功能去完善自己的文档。而github pages也提供了一个友好的查阅文档的界面。\n\n### 关于其他\n至于博客的其他功能，现在就先不急，以后有时间再说。对于目前来说，这个静态博客就是自己的文档管理器。\n","slug":"个人博客的使用方式","published":1,"updated":"2021-09-21T01:19:04.422Z","_id":"ckttecr0200131kuval059h62","comments":1,"layout":"post","photos":[],"link":"","content":"<p>用了2天时间配置了这个博客，现在看来基本上是可以用了。怎么用这个博客还是需要有一个规划的；而第一篇正式的博客就是这个规划了。</p>\n<h3 id=\"为什么要建这个博客\"><a href=\"#为什么要建这个博客\" class=\"headerlink\" title=\"为什么要建这个博客\"></a>为什么要建这个博客</h3><p>以前是用svn管理自己的工程以及文档。在适应以git作为配置管理工具以来，我已经渐渐把自己的配置管理工具完全转移到了git上了。不同于svn的集中管理，git的分布式管理就注定了每一个项目就是一个单独的配置库，这样一些文档、笔记、总结散落的到处都是。所以就决定单独建立一个专门存储相关文档的库。但是如何将文档组织起来一直没有拿定主意，如果用专门的笔记软件就不能充分利用git的功能，而只是文字档又过于零落。最后还是决定用静态博客的形式来组织总结的一些文档。</p>\n<span id=\"more\"></span>\n<h3 id=\"如何组织博客\"><a href=\"#如何组织博客\" class=\"headerlink\" title=\"如何组织博客\"></a>如何组织博客</h3><p>现在的设想就是分类为主，标签为辅。关于一个知识点，在一个分类之下，从<strong>资料摘录</strong>、到<strong>练习笔记</strong>、到<strong>开发笔记</strong>、到<strong>总结</strong>组织起来,可以充分的利用git的功能去完善自己的文档。而github pages也提供了一个友好的查阅文档的界面。</p>\n<h3 id=\"关于其他\"><a href=\"#关于其他\" class=\"headerlink\" title=\"关于其他\"></a>关于其他</h3><p>至于博客的其他功能，现在就先不急，以后有时间再说。对于目前来说，这个静态博客就是自己的文档管理器。</p>\n","site":{"data":{}},"excerpt":"<p>用了2天时间配置了这个博客，现在看来基本上是可以用了。怎么用这个博客还是需要有一个规划的；而第一篇正式的博客就是这个规划了。</p>\n<h3 id=\"为什么要建这个博客\"><a href=\"#为什么要建这个博客\" class=\"headerlink\" title=\"为什么要建这个博客\"></a>为什么要建这个博客</h3><p>以前是用svn管理自己的工程以及文档。在适应以git作为配置管理工具以来，我已经渐渐把自己的配置管理工具完全转移到了git上了。不同于svn的集中管理，git的分布式管理就注定了每一个项目就是一个单独的配置库，这样一些文档、笔记、总结散落的到处都是。所以就决定单独建立一个专门存储相关文档的库。但是如何将文档组织起来一直没有拿定主意，如果用专门的笔记软件就不能充分利用git的功能，而只是文字档又过于零落。最后还是决定用静态博客的形式来组织总结的一些文档。</p>","more":"<h3 id=\"如何组织博客\"><a href=\"#如何组织博客\" class=\"headerlink\" title=\"如何组织博客\"></a>如何组织博客</h3><p>现在的设想就是分类为主，标签为辅。关于一个知识点，在一个分类之下，从<strong>资料摘录</strong>、到<strong>练习笔记</strong>、到<strong>开发笔记</strong>、到<strong>总结</strong>组织起来,可以充分的利用git的功能去完善自己的文档。而github pages也提供了一个友好的查阅文档的界面。</p>\n<h3 id=\"关于其他\"><a href=\"#关于其他\" class=\"headerlink\" title=\"关于其他\"></a>关于其他</h3><p>至于博客的其他功能，现在就先不急，以后有时间再说。对于目前来说，这个静态博客就是自己的文档管理器。</p>"},{"title":"用Hexo搭建个人博客-设置GitHub","date":"2019-12-30T12:20:30.000Z","_content":"静态博客可以说是从GitHub pages开始兴起的。当我们在github上配置静态博客的时候，就需要在github完成相关配置。\n<!-- more -->\n### 配置github pages\n其实就是配置一个github的子域名指向你的静态页面配置库。Github对这个配置库的库名有一个明确的规定，需要以你的账号名为前缀连接\"github.io\"为库名。所以创建github pages第一步要创建一个git配置库，库名是：yourname.github.io。\n\n然后点击进入库页面，点击标签页上的“settings”进入到设定页面还可以自定义自己的域名。\n\n再次你要创建一个工程配置库用来管理你的博客工程，这样就不用担心数据丢失，或者在异地写博客了。","source":"_posts/用Hexo搭建个人博客-设置GitHub.md","raw":"---\ntitle: 用Hexo搭建个人博客-设置GitHub\ndate: 2019-12-30 20:20:30\ncategories:\n- 用Hexo搭建个人博客\ntags:\n- Hexo\n- github\n---\n静态博客可以说是从GitHub pages开始兴起的。当我们在github上配置静态博客的时候，就需要在github完成相关配置。\n<!-- more -->\n### 配置github pages\n其实就是配置一个github的子域名指向你的静态页面配置库。Github对这个配置库的库名有一个明确的规定，需要以你的账号名为前缀连接\"github.io\"为库名。所以创建github pages第一步要创建一个git配置库，库名是：yourname.github.io。\n\n然后点击进入库页面，点击标签页上的“settings”进入到设定页面还可以自定义自己的域名。\n\n再次你要创建一个工程配置库用来管理你的博客工程，这样就不用担心数据丢失，或者在异地写博客了。","slug":"用Hexo搭建个人博客-设置GitHub","published":1,"updated":"2021-09-21T01:19:04.422Z","_id":"ckttecr0300161kuv3t7j8rb9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>静态博客可以说是从GitHub pages开始兴起的。当我们在github上配置静态博客的时候，就需要在github完成相关配置。</p>\n<span id=\"more\"></span>\n<h3 id=\"配置github-pages\"><a href=\"#配置github-pages\" class=\"headerlink\" title=\"配置github pages\"></a>配置github pages</h3><p>其实就是配置一个github的子域名指向你的静态页面配置库。Github对这个配置库的库名有一个明确的规定，需要以你的账号名为前缀连接”github.io”为库名。所以创建github pages第一步要创建一个git配置库，库名是：yourname.github.io。</p>\n<p>然后点击进入库页面，点击标签页上的“settings”进入到设定页面还可以自定义自己的域名。</p>\n<p>再次你要创建一个工程配置库用来管理你的博客工程，这样就不用担心数据丢失，或者在异地写博客了。</p>\n","site":{"data":{}},"excerpt":"<p>静态博客可以说是从GitHub pages开始兴起的。当我们在github上配置静态博客的时候，就需要在github完成相关配置。</p>","more":"<h3 id=\"配置github-pages\"><a href=\"#配置github-pages\" class=\"headerlink\" title=\"配置github pages\"></a>配置github pages</h3><p>其实就是配置一个github的子域名指向你的静态页面配置库。Github对这个配置库的库名有一个明确的规定，需要以你的账号名为前缀连接”github.io”为库名。所以创建github pages第一步要创建一个git配置库，库名是：yourname.github.io。</p>\n<p>然后点击进入库页面，点击标签页上的“settings”进入到设定页面还可以自定义自己的域名。</p>\n<p>再次你要创建一个工程配置库用来管理你的博客工程，这样就不用担心数据丢失，或者在异地写博客了。</p>"},{"title":"用Hexo搭建个人博客-配置hexo工程","date":"2019-12-31T11:24:06.000Z","_content":"前面说了，hexo从根本上来说是一个web程序框架；而hexo-cli脚手架提供各种快捷指令，方便我们开发配置我们需要开发的web程序。\n\n### 安装脚手架\n```\n$ npm install hexo-cli -g\n```\n我们先通过npm全局安装hexo-cli这个给脚手架,然后就可以用hexo指令来执行一些快捷指令进行创建工程、生成页面、部署博客等等一些功能。现在我们就可以先生成一个blog工程。\n```\n$ hexo init blog\n$ cd blog\n$ npm install\n```\n<!-- more -->\n### 将工程用git管理起来\n然后在github创建一个blog配置管理库，把这个工程关联并管理起来。  \n* 先进入到个人的github页面，点击Repositories右侧的New按钮，然后按照默认创建一个空的blog库：git@github.com:youname/yourblog.git\n* 然后返回到本地机器，在刚刚建立的blog目录下初始化git库\n    ```\n    $ git init\n    $ git add .                     #添加当前文件夹所有文件到暂存区\n    $ git commit -m 'init blog'     #提交文件到本地库\n    ```\n* 将本地库与远程库关联起来\n    ```\n    $ git remote add origin git@github.com:youname/yourblog.git #将本地库与远程库关联起来\n    $ git push -u origin master     #将本地库push到远程库中\n    ```\n这样就把blog工程用git管理起来了，并且可以随时把工程push github远端库里；这样可以随时在任何机器上获取你的工程文件生成博客了。\n### 生成博客\n现在只要运行hexo指令\n```\n$ hexo g\n$ hexo s\n```\n这样我们就可以在`localhost:4000`访问初始的hexo博客了。\n### 配置博客\n博客的配置文件是在根目录下的`_config.yml`。需要注意的是在博客的themes目录中也有一个`_config.yml`文件；通常的我们把根目录下的`_config.yml`文件叫做**站点配置文件**，而themes目录中的`_config.yml`文件叫做**主题配置文件**  \n打开站点配置文件`_config.yml`；我们需要配置的主要有这么几项。\n```\n# Site\ntitle:                      # 站点标题\nsubtitle:                   # 站点的副标题\ndescription:                # 站点的说明\nkeywords:                   # 站点的关键字\nauthor:                     # 你的名字\nlanguage: zh-CN             # 站点语言\ntimezone: 'Asia/Shanghai'   # 站点的时区\n\nurl: http://www.yoursite.com #你的域名\n```\n上面的就是关于配置博客的一些基本信息。\n然后是关于博客的部署配置，在填写配置信息之前，需要安装部署的插件\n```\n$ npm install hexo-deployer-git --save\n```\n然后修改站点配置文件`_config.yml`\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: 'git'\n  repo: git@github.com:yourname/yourname.github.io.git\n  branch: master \n```\n然后运行hexo指令\n```\nhexo d\n```\n或者当添加了新的日志之后运行\n```\nhexo clean  # 清除旧文件\nhexo g      # 生成博客\nhexo d      # 发布博客到github pages上\n```\n现在打开`https://yourname.github.io`就可看到我们的博客了。\n### 写日志\n运行hexo治理\n```\nhexo new '日志标题'\n```\n这样就会在source/_posts目录中生成一个`日志标题.md`的文件，然后用markdown格式编写一篇文档之后，重复以下的指令，就可以在个人博客上看到新日志了\n```\nhexo clean  # 清除旧文件\nhexo g      # 生成博客\nhexo d      # 发布博客到github pages上\n```\n至此，可以作为一个hexo博客的冒烟测试。\n之后关于博客的标签、分类、归档以及主题的设置，将在下一篇说明。\n\n\n","source":"_posts/用Hexo搭建个人博客-配置hexo工程.md","raw":"---\ntitle: 用Hexo搭建个人博客-配置hexo工程\ndate: 2019-12-31 19:24:06\ncategories:\n- 用Hexo搭建个人博客\ntags:\n- Hexo\n---\n前面说了，hexo从根本上来说是一个web程序框架；而hexo-cli脚手架提供各种快捷指令，方便我们开发配置我们需要开发的web程序。\n\n### 安装脚手架\n```\n$ npm install hexo-cli -g\n```\n我们先通过npm全局安装hexo-cli这个给脚手架,然后就可以用hexo指令来执行一些快捷指令进行创建工程、生成页面、部署博客等等一些功能。现在我们就可以先生成一个blog工程。\n```\n$ hexo init blog\n$ cd blog\n$ npm install\n```\n<!-- more -->\n### 将工程用git管理起来\n然后在github创建一个blog配置管理库，把这个工程关联并管理起来。  \n* 先进入到个人的github页面，点击Repositories右侧的New按钮，然后按照默认创建一个空的blog库：git@github.com:youname/yourblog.git\n* 然后返回到本地机器，在刚刚建立的blog目录下初始化git库\n    ```\n    $ git init\n    $ git add .                     #添加当前文件夹所有文件到暂存区\n    $ git commit -m 'init blog'     #提交文件到本地库\n    ```\n* 将本地库与远程库关联起来\n    ```\n    $ git remote add origin git@github.com:youname/yourblog.git #将本地库与远程库关联起来\n    $ git push -u origin master     #将本地库push到远程库中\n    ```\n这样就把blog工程用git管理起来了，并且可以随时把工程push github远端库里；这样可以随时在任何机器上获取你的工程文件生成博客了。\n### 生成博客\n现在只要运行hexo指令\n```\n$ hexo g\n$ hexo s\n```\n这样我们就可以在`localhost:4000`访问初始的hexo博客了。\n### 配置博客\n博客的配置文件是在根目录下的`_config.yml`。需要注意的是在博客的themes目录中也有一个`_config.yml`文件；通常的我们把根目录下的`_config.yml`文件叫做**站点配置文件**，而themes目录中的`_config.yml`文件叫做**主题配置文件**  \n打开站点配置文件`_config.yml`；我们需要配置的主要有这么几项。\n```\n# Site\ntitle:                      # 站点标题\nsubtitle:                   # 站点的副标题\ndescription:                # 站点的说明\nkeywords:                   # 站点的关键字\nauthor:                     # 你的名字\nlanguage: zh-CN             # 站点语言\ntimezone: 'Asia/Shanghai'   # 站点的时区\n\nurl: http://www.yoursite.com #你的域名\n```\n上面的就是关于配置博客的一些基本信息。\n然后是关于博客的部署配置，在填写配置信息之前，需要安装部署的插件\n```\n$ npm install hexo-deployer-git --save\n```\n然后修改站点配置文件`_config.yml`\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: 'git'\n  repo: git@github.com:yourname/yourname.github.io.git\n  branch: master \n```\n然后运行hexo指令\n```\nhexo d\n```\n或者当添加了新的日志之后运行\n```\nhexo clean  # 清除旧文件\nhexo g      # 生成博客\nhexo d      # 发布博客到github pages上\n```\n现在打开`https://yourname.github.io`就可看到我们的博客了。\n### 写日志\n运行hexo治理\n```\nhexo new '日志标题'\n```\n这样就会在source/_posts目录中生成一个`日志标题.md`的文件，然后用markdown格式编写一篇文档之后，重复以下的指令，就可以在个人博客上看到新日志了\n```\nhexo clean  # 清除旧文件\nhexo g      # 生成博客\nhexo d      # 发布博客到github pages上\n```\n至此，可以作为一个hexo博客的冒烟测试。\n之后关于博客的标签、分类、归档以及主题的设置，将在下一篇说明。\n\n\n","slug":"用Hexo搭建个人博客-配置hexo工程","published":1,"updated":"2021-09-21T01:19:04.423Z","_id":"ckttecr0c001m1kuvdjai6az0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前面说了，hexo从根本上来说是一个web程序框架；而hexo-cli脚手架提供各种快捷指令，方便我们开发配置我们需要开发的web程序。</p>\n<h3 id=\"安装脚手架\"><a href=\"#安装脚手架\" class=\"headerlink\" title=\"安装脚手架\"></a>安装脚手架</h3><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-<span class=\"keyword\">cli</span> -g</span><br></pre></td></tr></table></figure>\n<p>我们先通过npm全局安装hexo-cli这个给脚手架,然后就可以用hexo指令来执行一些快捷指令进行创建工程、生成页面、部署博客等等一些功能。现在我们就可以先生成一个blog工程。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> hexo init blog</span><br><span class=\"line\"><span class=\"variable\">$</span> <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\"><span class=\"variable\">$</span> npm install</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"将工程用git管理起来\"><a href=\"#将工程用git管理起来\" class=\"headerlink\" title=\"将工程用git管理起来\"></a>将工程用git管理起来</h3><p>然后在github创建一个blog配置管理库，把这个工程关联并管理起来。  </p>\n<ul>\n<li>先进入到个人的github页面，点击Repositories右侧的New按钮，然后按照默认创建一个空的blog库：<a href=\"mailto:&#103;&#105;&#x74;&#x40;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#99;&#111;&#x6d;\">&#103;&#105;&#x74;&#x40;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#99;&#111;&#x6d;</a>:youname/yourblog.git</li>\n<li>然后返回到本地机器，在刚刚建立的blog目录下初始化git库  <figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git init</span><br><span class=\"line\"><span class=\"variable\">$ </span>git add .                     <span class=\"comment\">#添加当前文件夹所有文件到暂存区</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit -m <span class=\"string\">&#x27;init blog&#x27;</span>     <span class=\"comment\">#提交文件到本地库</span></span><br></pre></td></tr></table></figure></li>\n<li>将本地库与远程库关联起来  <figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git remote add origin git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>youname/yourblog.git <span class=\"comment\">#将本地库与远程库关联起来</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push -u origin master     <span class=\"comment\">#将本地库push到远程库中</span></span><br></pre></td></tr></table></figure>\n这样就把blog工程用git管理起来了，并且可以随时把工程push github远端库里；这样可以随时在任何机器上获取你的工程文件生成博客了。<h3 id=\"生成博客\"><a href=\"#生成博客\" class=\"headerlink\" title=\"生成博客\"></a>生成博客</h3>现在只要运行hexo指令<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo g</span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo s</span><br></pre></td></tr></table></figure>\n这样我们就可以在<code>localhost:4000</code>访问初始的hexo博客了。<h3 id=\"配置博客\"><a href=\"#配置博客\" class=\"headerlink\" title=\"配置博客\"></a>配置博客</h3>博客的配置文件是在根目录下的<code>_config.yml</code>。需要注意的是在博客的themes目录中也有一个<code>_config.yml</code>文件；通常的我们把根目录下的<code>_config.yml</code>文件叫做<strong>站点配置文件</strong>，而themes目录中的<code>_config.yml</code>文件叫做<strong>主题配置文件</strong><br>打开站点配置文件<code>_config.yml</code>；我们需要配置的主要有这么几项。<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span>                      <span class=\"comment\"># 站点标题</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span>                   <span class=\"comment\"># 站点的副标题</span></span><br><span class=\"line\"><span class=\"attr\">description:</span>                <span class=\"comment\"># 站点的说明</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span>                   <span class=\"comment\"># 站点的关键字</span></span><br><span class=\"line\"><span class=\"attr\">author:</span>                     <span class=\"comment\"># 你的名字</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span>             <span class=\"comment\"># 站点语言</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">&#x27;Asia/Shanghai&#x27;</span>   <span class=\"comment\"># 站点的时区</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">http://www.yoursite.com</span> <span class=\"comment\">#你的域名</span></span><br></pre></td></tr></table></figure>\n上面的就是关于配置博客的一些基本信息。<br>然后是关于博客的部署配置，在填写配置信息之前，需要安装部署的插件<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure>\n然后修改站点配置文件<code>_config.yml</code><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy</span>:<span class=\"string\"></span></span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;git&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">repo</span>: <span class=\"string\">git@github.com:yourname/yourname.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch</span>: <span class=\"string\">master </span></span><br></pre></td></tr></table></figure>\n然后运行hexo指令<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">hexo d</span></span><br></pre></td></tr></table></figure>\n或者当添加了新的日志之后运行<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">hexo</span> clean  <span class=\"comment\"># 清除旧文件</span></span><br><span class=\"line\">hexo g      <span class=\"comment\"># 生成博客</span></span><br><span class=\"line\">hexo d      <span class=\"comment\"># 发布博客到github pages上</span></span><br></pre></td></tr></table></figure>\n现在打开<code>https://yourname.github.io</code>就可看到我们的博客了。<h3 id=\"写日志\"><a href=\"#写日志\" class=\"headerlink\" title=\"写日志\"></a>写日志</h3>运行hexo治理<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">&#x27;日志标题&#x27;</span></span><br></pre></td></tr></table></figure>\n这样就会在source/_posts目录中生成一个<code>日志标题.md</code>的文件，然后用markdown格式编写一篇文档之后，重复以下的指令，就可以在个人博客上看到新日志了<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">hexo</span> clean  <span class=\"comment\"># 清除旧文件</span></span><br><span class=\"line\">hexo g      <span class=\"comment\"># 生成博客</span></span><br><span class=\"line\">hexo d      <span class=\"comment\"># 发布博客到github pages上</span></span><br></pre></td></tr></table></figure>\n至此，可以作为一个hexo博客的冒烟测试。<br>之后关于博客的标签、分类、归档以及主题的设置，将在下一篇说明。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>前面说了，hexo从根本上来说是一个web程序框架；而hexo-cli脚手架提供各种快捷指令，方便我们开发配置我们需要开发的web程序。</p>\n<h3 id=\"安装脚手架\"><a href=\"#安装脚手架\" class=\"headerlink\" title=\"安装脚手架\"></a>安装脚手架</h3><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-<span class=\"keyword\">cli</span> -g</span><br></pre></td></tr></table></figure>\n<p>我们先通过npm全局安装hexo-cli这个给脚手架,然后就可以用hexo指令来执行一些快捷指令进行创建工程、生成页面、部署博客等等一些功能。现在我们就可以先生成一个blog工程。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$</span> hexo init blog</span><br><span class=\"line\"><span class=\"variable\">$</span> <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\"><span class=\"variable\">$</span> npm install</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"将工程用git管理起来\"><a href=\"#将工程用git管理起来\" class=\"headerlink\" title=\"将工程用git管理起来\"></a>将工程用git管理起来</h3><p>然后在github创建一个blog配置管理库，把这个工程关联并管理起来。  </p>\n<ul>\n<li>先进入到个人的github页面，点击Repositories右侧的New按钮，然后按照默认创建一个空的blog库：<a href=\"mailto:&#103;&#105;&#x74;&#x40;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#99;&#111;&#x6d;\">&#103;&#105;&#x74;&#x40;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#99;&#111;&#x6d;</a>:youname/yourblog.git</li>\n<li>然后返回到本地机器，在刚刚建立的blog目录下初始化git库  <figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git init</span><br><span class=\"line\"><span class=\"variable\">$ </span>git add .                     <span class=\"comment\">#添加当前文件夹所有文件到暂存区</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git commit -m <span class=\"string\">&#x27;init blog&#x27;</span>     <span class=\"comment\">#提交文件到本地库</span></span><br></pre></td></tr></table></figure></li>\n<li>将本地库与远程库关联起来  <figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git remote add origin git<span class=\"variable\">@github</span>.<span class=\"symbol\">com:</span>youname/yourblog.git <span class=\"comment\">#将本地库与远程库关联起来</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push -u origin master     <span class=\"comment\">#将本地库push到远程库中</span></span><br></pre></td></tr></table></figure>\n这样就把blog工程用git管理起来了，并且可以随时把工程push github远端库里；这样可以随时在任何机器上获取你的工程文件生成博客了。<h3 id=\"生成博客\"><a href=\"#生成博客\" class=\"headerlink\" title=\"生成博客\"></a>生成博客</h3>现在只要运行hexo指令<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>hexo g</span><br><span class=\"line\"><span class=\"variable\">$ </span>hexo s</span><br></pre></td></tr></table></figure>\n这样我们就可以在<code>localhost:4000</code>访问初始的hexo博客了。<h3 id=\"配置博客\"><a href=\"#配置博客\" class=\"headerlink\" title=\"配置博客\"></a>配置博客</h3>博客的配置文件是在根目录下的<code>_config.yml</code>。需要注意的是在博客的themes目录中也有一个<code>_config.yml</code>文件；通常的我们把根目录下的<code>_config.yml</code>文件叫做<strong>站点配置文件</strong>，而themes目录中的<code>_config.yml</code>文件叫做<strong>主题配置文件</strong><br>打开站点配置文件<code>_config.yml</code>；我们需要配置的主要有这么几项。<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span>                      <span class=\"comment\"># 站点标题</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span>                   <span class=\"comment\"># 站点的副标题</span></span><br><span class=\"line\"><span class=\"attr\">description:</span>                <span class=\"comment\"># 站点的说明</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span>                   <span class=\"comment\"># 站点的关键字</span></span><br><span class=\"line\"><span class=\"attr\">author:</span>                     <span class=\"comment\"># 你的名字</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span>             <span class=\"comment\"># 站点语言</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">&#x27;Asia/Shanghai&#x27;</span>   <span class=\"comment\"># 站点的时区</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">http://www.yoursite.com</span> <span class=\"comment\">#你的域名</span></span><br></pre></td></tr></table></figure>\n上面的就是关于配置博客的一些基本信息。<br>然后是关于博客的部署配置，在填写配置信息之前，需要安装部署的插件<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure>\n然后修改站点配置文件<code>_config.yml</code><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy</span>:<span class=\"string\"></span></span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;git&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">repo</span>: <span class=\"string\">git@github.com:yourname/yourname.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch</span>: <span class=\"string\">master </span></span><br></pre></td></tr></table></figure>\n然后运行hexo指令<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">hexo d</span></span><br></pre></td></tr></table></figure>\n或者当添加了新的日志之后运行<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">hexo</span> clean  <span class=\"comment\"># 清除旧文件</span></span><br><span class=\"line\">hexo g      <span class=\"comment\"># 生成博客</span></span><br><span class=\"line\">hexo d      <span class=\"comment\"># 发布博客到github pages上</span></span><br></pre></td></tr></table></figure>\n现在打开<code>https://yourname.github.io</code>就可看到我们的博客了。<h3 id=\"写日志\"><a href=\"#写日志\" class=\"headerlink\" title=\"写日志\"></a>写日志</h3>运行hexo治理<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">&#x27;日志标题&#x27;</span></span><br></pre></td></tr></table></figure>\n这样就会在source/_posts目录中生成一个<code>日志标题.md</code>的文件，然后用markdown格式编写一篇文档之后，重复以下的指令，就可以在个人博客上看到新日志了<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">hexo</span> clean  <span class=\"comment\"># 清除旧文件</span></span><br><span class=\"line\">hexo g      <span class=\"comment\"># 生成博客</span></span><br><span class=\"line\">hexo d      <span class=\"comment\"># 发布博客到github pages上</span></span><br></pre></td></tr></table></figure>\n至此，可以作为一个hexo博客的冒烟测试。<br>之后关于博客的标签、分类、归档以及主题的设置，将在下一篇说明。</li>\n</ul>"},{"title":"用Hexo搭建个人博客-配置主题","date":"2020-01-01T11:43:42.000Z","_content":"谁都喜欢赏心悦目的东西，但是一般人却未必由美术的功底。为了让自己的博客好看一些，使用现成的主题就是一个很好的选择了。Next主题到现在以及是v7.6.0了，可以看出它有稳定的团队，而且经过这么长时间的迭代，版本的bug必然会少一些。\n\n### 下载Next\n因为我选择把博客工程用git管理起来，为了方式git的版本嵌套问题。我没有把Next主题在工程内部clone，而是在工程外选择一个文件夹clone Next工程。\n```\n$ cd ~/\n$ mkdir themes\n$ cd themes\n$ git clone https://github.com/theme-next/hexo-theme-next\n```\n把Next主题clone下之后，拷贝到我们的博客工程中，先在博客工程的themes目录下建立一个next目录，然后copy Next主题的文件到这个目录\n<!-- more -->\n```\n$ cd ~/blog/themes\n$ mkdir next\n$ cp ~/themes/hexo-thems-next/* -Rf ./next \n```\n### 配置站点主题\n先打开博客工程的根目录下的站点配置文件`_config.yml`；\n```\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next                             #添加这个配置项\n```\n运行hexo指令\n```\nhexo s\n```\n打开https://localhost:4000/ 我们就可以看到主题模式已经改成了Next主题了。\n\n### 配置Next主题。\n在Next主题还有一些配置项，可以让主题更适合你的审美。\n#### 设置主页连接菜单\n```\nmenu:\n  home: / || home\n  tags: /tags/ || tags\n  categories: /categories/ || th\n  archives: /archives/ || archive\n  about: /about/ || user\n  #schedule: /schedule/ || calendar\n  #sitemap: /sitemap.xml || sitemap\n  #commonweal: /404/ || heartbeat\n```\n在这里按照需要，就可以添加相关的链接；在添加完链接后，还需要添加相关的页面。比如上面的例子，还需要添加tags页面、categories页面以及about页面。\n* **添加tags页面**\n```\n$ hexo new page \"tags\"\n```\n然后在source目录下就可以看到增加了一个tags目录，目录中添加了一个 index.md；打开index.md 文件。我们添加一个Front-matter项\n```\n---\ntitle: 标签\ndate: 2019-12-29 08:36:37\ntype: \"tags\"                # 添加项\n---\n```\n这样我们在文章中添加了tags就可以自动在tags页面显示了，categories也一样。\n* **添加categories**\n```\n$ hexo new page \"categories\"\n```\n然后打开 source/categories/index.md\n```\n---\ntitle: 分类\ndate: 2019-12-29 08:37:56\ntype: \"categories\"          # 添加项\n---\n```\n#### 设置Scheme\n```\n# ---------------------------------------------------------------\n# Scheme Settings\n# ---------------------------------------------------------------\n\n# Schemes\n#scheme: Muse\n#scheme: Mist\n#scheme: Pisces\nscheme: Gemini      #去掉注释，现在这个scheme\n```\nNext主题有几个不同的Scheme，你可以选择一个你喜欢的去掉注释，然后把其他的注释起来就可以了。\n\n#### 设置字体\n在这里我们可以设置字体大小和字体样式，首先要打开配置项，将enable设置为true，然后按照提示设置相应的设置就可以了，我这里之更改了字体的大小。将字体从16px改成了14px，然后把主题也等比例缩小了\n```\nfont:\n  enable: true      #打开配置\n\n  # Uri of fonts host, e.g. //fonts.googleapis.com (Default).\n  host:\n\n  # Font options:\n  # `external: true` will load this font family from `host` above.\n  # `family: Times New Roman`. Without any quotes.\n  # `size: x.x`. Use `em` as unit. Default: 1 (16px)\n\n  # Global font settings used for all elements inside <body>.\n  global:\n    external: true\n    family: Lato\n    size: 0.875         #默认是1，就是16px，这里选择14px，就是0.875em\n\n  # Font settings for site title (.site-title).\n  title:\n    external: true\n    family:\n    size: \n\n  # Font settings for headlines (<h1> to <h6>).\n  headings:\n    external: true\n    family:\n    size: 1.42          #在base配置文件中是1.625em，这里等比例缩小之1.42em\n```\n\n在主题配置文件中，还有很多配置项。设置还有很多插件我都没有涉及，这里只是保证博客最低可以运行的配置，其他的提高设置等到以后有时间再总结。hexo的初步使用就到此为止。","source":"_posts/用Hexo搭建个人博客-配置主题.md","raw":"---\ntitle: 用Hexo搭建个人博客-配置主题\ndate: 2020-01-01 19:43:42\ncategories:\n- 用Hexo搭建个人博客\ntags:\n- Hexo\n---\n谁都喜欢赏心悦目的东西，但是一般人却未必由美术的功底。为了让自己的博客好看一些，使用现成的主题就是一个很好的选择了。Next主题到现在以及是v7.6.0了，可以看出它有稳定的团队，而且经过这么长时间的迭代，版本的bug必然会少一些。\n\n### 下载Next\n因为我选择把博客工程用git管理起来，为了方式git的版本嵌套问题。我没有把Next主题在工程内部clone，而是在工程外选择一个文件夹clone Next工程。\n```\n$ cd ~/\n$ mkdir themes\n$ cd themes\n$ git clone https://github.com/theme-next/hexo-theme-next\n```\n把Next主题clone下之后，拷贝到我们的博客工程中，先在博客工程的themes目录下建立一个next目录，然后copy Next主题的文件到这个目录\n<!-- more -->\n```\n$ cd ~/blog/themes\n$ mkdir next\n$ cp ~/themes/hexo-thems-next/* -Rf ./next \n```\n### 配置站点主题\n先打开博客工程的根目录下的站点配置文件`_config.yml`；\n```\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next                             #添加这个配置项\n```\n运行hexo指令\n```\nhexo s\n```\n打开https://localhost:4000/ 我们就可以看到主题模式已经改成了Next主题了。\n\n### 配置Next主题。\n在Next主题还有一些配置项，可以让主题更适合你的审美。\n#### 设置主页连接菜单\n```\nmenu:\n  home: / || home\n  tags: /tags/ || tags\n  categories: /categories/ || th\n  archives: /archives/ || archive\n  about: /about/ || user\n  #schedule: /schedule/ || calendar\n  #sitemap: /sitemap.xml || sitemap\n  #commonweal: /404/ || heartbeat\n```\n在这里按照需要，就可以添加相关的链接；在添加完链接后，还需要添加相关的页面。比如上面的例子，还需要添加tags页面、categories页面以及about页面。\n* **添加tags页面**\n```\n$ hexo new page \"tags\"\n```\n然后在source目录下就可以看到增加了一个tags目录，目录中添加了一个 index.md；打开index.md 文件。我们添加一个Front-matter项\n```\n---\ntitle: 标签\ndate: 2019-12-29 08:36:37\ntype: \"tags\"                # 添加项\n---\n```\n这样我们在文章中添加了tags就可以自动在tags页面显示了，categories也一样。\n* **添加categories**\n```\n$ hexo new page \"categories\"\n```\n然后打开 source/categories/index.md\n```\n---\ntitle: 分类\ndate: 2019-12-29 08:37:56\ntype: \"categories\"          # 添加项\n---\n```\n#### 设置Scheme\n```\n# ---------------------------------------------------------------\n# Scheme Settings\n# ---------------------------------------------------------------\n\n# Schemes\n#scheme: Muse\n#scheme: Mist\n#scheme: Pisces\nscheme: Gemini      #去掉注释，现在这个scheme\n```\nNext主题有几个不同的Scheme，你可以选择一个你喜欢的去掉注释，然后把其他的注释起来就可以了。\n\n#### 设置字体\n在这里我们可以设置字体大小和字体样式，首先要打开配置项，将enable设置为true，然后按照提示设置相应的设置就可以了，我这里之更改了字体的大小。将字体从16px改成了14px，然后把主题也等比例缩小了\n```\nfont:\n  enable: true      #打开配置\n\n  # Uri of fonts host, e.g. //fonts.googleapis.com (Default).\n  host:\n\n  # Font options:\n  # `external: true` will load this font family from `host` above.\n  # `family: Times New Roman`. Without any quotes.\n  # `size: x.x`. Use `em` as unit. Default: 1 (16px)\n\n  # Global font settings used for all elements inside <body>.\n  global:\n    external: true\n    family: Lato\n    size: 0.875         #默认是1，就是16px，这里选择14px，就是0.875em\n\n  # Font settings for site title (.site-title).\n  title:\n    external: true\n    family:\n    size: \n\n  # Font settings for headlines (<h1> to <h6>).\n  headings:\n    external: true\n    family:\n    size: 1.42          #在base配置文件中是1.625em，这里等比例缩小之1.42em\n```\n\n在主题配置文件中，还有很多配置项。设置还有很多插件我都没有涉及，这里只是保证博客最低可以运行的配置，其他的提高设置等到以后有时间再总结。hexo的初步使用就到此为止。","slug":"用Hexo搭建个人博客-配置主题","published":1,"updated":"2021-09-21T01:19:04.423Z","_id":"ckttecr0d001n1kuv5bix6fex","comments":1,"layout":"post","photos":[],"link":"","content":"<p>谁都喜欢赏心悦目的东西，但是一般人却未必由美术的功底。为了让自己的博客好看一些，使用现成的主题就是一个很好的选择了。Next主题到现在以及是v7.6.0了，可以看出它有稳定的团队，而且经过这么长时间的迭代，版本的bug必然会少一些。</p>\n<h3 id=\"下载Next\"><a href=\"#下载Next\" class=\"headerlink\" title=\"下载Next\"></a>下载Next</h3><p>因为我选择把博客工程用git管理起来，为了方式git的版本嵌套问题。我没有把Next主题在工程内部clone，而是在工程外选择一个文件夹clone Next工程。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir themes</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> themes</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next</span></span><br></pre></td></tr></table></figure>\n<p>把Next主题clone下之后，拷贝到我们的博客工程中，先在博客工程的themes目录下建立一个next目录，然后copy Next主题的文件到这个目录</p>\n<span id=\"more\"></span>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd ~<span class=\"regexp\">/blog/</span>themes</span><br><span class=\"line\">$ mkdir <span class=\"keyword\">next</span></span><br><span class=\"line\">$ cp ~<span class=\"regexp\">/themes/</span>hexo-thems-<span class=\"keyword\">next</span><span class=\"regexp\">/* -Rf ./</span><span class=\"keyword\">next</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"配置站点主题\"><a href=\"#配置站点主题\" class=\"headerlink\" title=\"配置站点主题\"></a>配置站点主题</h3><p>先打开博客工程的根目录下的站点配置文件<code>_config.yml</code>；</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https:<span class=\"comment\">//hexo.io/plugins/</span></span><br><span class=\"line\">## Themes: https:<span class=\"comment\">//hexo.io/themes/</span></span><br><span class=\"line\">theme: next                             #添加这个配置项</span><br></pre></td></tr></table></figure>\n<p>运行hexo指令</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">hexo s</span></span><br></pre></td></tr></table></figure>\n<p>打开<a href=\"https://localhost:4000/\">https://localhost:4000/</a> 我们就可以看到主题模式已经改成了Next主题了。</p>\n<h3 id=\"配置Next主题。\"><a href=\"#配置Next主题。\" class=\"headerlink\" title=\"配置Next主题。\"></a>配置Next主题。</h3><p>在Next主题还有一些配置项，可以让主题更适合你的审美。</p>\n<h4 id=\"设置主页连接菜单\"><a href=\"#设置主页连接菜单\" class=\"headerlink\" title=\"设置主页连接菜单\"></a>设置主页连接菜单</h4><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">menu:</span></span><br><span class=\"line\"><span class=\"symbol\">  home:</span> / || home</span><br><span class=\"line\"><span class=\"symbol\">  tags:</span> <span class=\"meta-keyword\">/tags/</span> || tags</span><br><span class=\"line\"><span class=\"symbol\">  categories:</span> <span class=\"meta-keyword\">/categories/</span> || th</span><br><span class=\"line\"><span class=\"symbol\">  archives:</span> <span class=\"meta-keyword\">/archives/</span> || archive</span><br><span class=\"line\"><span class=\"symbol\">  about:</span> <span class=\"meta-keyword\">/about/</span> || user</span><br><span class=\"line\">  <span class=\"meta\">#schedule: /schedule/ || calendar</span></span><br><span class=\"line\">  <span class=\"meta\">#sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\">  <span class=\"meta\">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>\n<p>在这里按照需要，就可以添加相关的链接；在添加完链接后，还需要添加相关的页面。比如上面的例子，还需要添加tags页面、categories页面以及about页面。</p>\n<ul>\n<li><strong>添加tags页面</strong><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span> <span class=\"type\">page</span> <span class=\"string\">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>\n然后在source目录下就可以看到增加了一个tags目录，目录中添加了一个 index.md；打开index.md 文件。我们添加一个Front-matter项<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">标签</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2019-12-29 08:36:37</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;tags&quot;</span>                <span class=\"comment\"># 添加项</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n这样我们在文章中添加了tags就可以自动在tags页面显示了，categories也一样。</li>\n<li><strong>添加categories</strong><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span> <span class=\"type\">page</span> <span class=\"string\">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>\n然后打开 source/categories/index.md<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">分类</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2019-12-29 08:37:56</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;categories&quot;</span>          <span class=\"comment\"># 添加项</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"设置Scheme\"><a href=\"#设置Scheme\" class=\"headerlink\" title=\"设置Scheme\"></a>设置Scheme</h4><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"meta\"># Scheme Settings</span></span><br><span class=\"line\"><span class=\"meta\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># Schemes</span></span><br><span class=\"line\"><span class=\"meta\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"meta\">#scheme: Mist</span></span><br><span class=\"line\"><span class=\"meta\">#scheme: Pisces</span></span><br><span class=\"line\">scheme: Gemini      #去掉注释，现在这个scheme</span><br></pre></td></tr></table></figure>\nNext主题有几个不同的Scheme，你可以选择一个你喜欢的去掉注释，然后把其他的注释起来就可以了。</li>\n</ul>\n<h4 id=\"设置字体\"><a href=\"#设置字体\" class=\"headerlink\" title=\"设置字体\"></a>设置字体</h4><p>在这里我们可以设置字体大小和字体样式，首先要打开配置项，将enable设置为true，然后按照提示设置相应的设置就可以了，我这里之更改了字体的大小。将字体从16px改成了14px，然后把主题也等比例缩小了</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">font:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span>      <span class=\"comment\">#打开配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Uri of fonts host, e.g. //fonts.googleapis.com (Default).</span></span><br><span class=\"line\">  <span class=\"attr\">host:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Font options:</span></span><br><span class=\"line\">  <span class=\"comment\"># `external: true` will load this font family from `host` above.</span></span><br><span class=\"line\">  <span class=\"comment\"># `family: Times New Roman`. Without any quotes.</span></span><br><span class=\"line\">  <span class=\"comment\"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class=\"line\">  <span class=\"attr\">global:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">family:</span> <span class=\"string\">Lato</span></span><br><span class=\"line\">    <span class=\"attr\">size:</span> <span class=\"number\">0.875</span>         <span class=\"comment\">#默认是1，就是16px，这里选择14px，就是0.875em</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Font settings for site title (.site-title).</span></span><br><span class=\"line\">  <span class=\"attr\">title:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">family:</span></span><br><span class=\"line\">    <span class=\"attr\">size:</span> </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class=\"line\">  <span class=\"attr\">headings:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">family:</span></span><br><span class=\"line\">    <span class=\"attr\">size:</span> <span class=\"number\">1.42</span>          <span class=\"comment\">#在base配置文件中是1.625em，这里等比例缩小之1.42em</span></span><br></pre></td></tr></table></figure>\n\n<p>在主题配置文件中，还有很多配置项。设置还有很多插件我都没有涉及，这里只是保证博客最低可以运行的配置，其他的提高设置等到以后有时间再总结。hexo的初步使用就到此为止。</p>\n","site":{"data":{}},"excerpt":"<p>谁都喜欢赏心悦目的东西，但是一般人却未必由美术的功底。为了让自己的博客好看一些，使用现成的主题就是一个很好的选择了。Next主题到现在以及是v7.6.0了，可以看出它有稳定的团队，而且经过这么长时间的迭代，版本的bug必然会少一些。</p>\n<h3 id=\"下载Next\"><a href=\"#下载Next\" class=\"headerlink\" title=\"下载Next\"></a>下载Next</h3><p>因为我选择把博客工程用git管理起来，为了方式git的版本嵌套问题。我没有把Next主题在工程内部clone，而是在工程外选择一个文件夹clone Next工程。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir themes</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> themes</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next</span></span><br></pre></td></tr></table></figure>\n<p>把Next主题clone下之后，拷贝到我们的博客工程中，先在博客工程的themes目录下建立一个next目录，然后copy Next主题的文件到这个目录</p>","more":"<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd ~<span class=\"regexp\">/blog/</span>themes</span><br><span class=\"line\">$ mkdir <span class=\"keyword\">next</span></span><br><span class=\"line\">$ cp ~<span class=\"regexp\">/themes/</span>hexo-thems-<span class=\"keyword\">next</span><span class=\"regexp\">/* -Rf ./</span><span class=\"keyword\">next</span> </span><br></pre></td></tr></table></figure>\n<h3 id=\"配置站点主题\"><a href=\"#配置站点主题\" class=\"headerlink\" title=\"配置站点主题\"></a>配置站点主题</h3><p>先打开博客工程的根目录下的站点配置文件<code>_config.yml</code>；</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https:<span class=\"comment\">//hexo.io/plugins/</span></span><br><span class=\"line\">## Themes: https:<span class=\"comment\">//hexo.io/themes/</span></span><br><span class=\"line\">theme: next                             #添加这个配置项</span><br></pre></td></tr></table></figure>\n<p>运行hexo指令</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">hexo s</span></span><br></pre></td></tr></table></figure>\n<p>打开<a href=\"https://localhost:4000/\">https://localhost:4000/</a> 我们就可以看到主题模式已经改成了Next主题了。</p>\n<h3 id=\"配置Next主题。\"><a href=\"#配置Next主题。\" class=\"headerlink\" title=\"配置Next主题。\"></a>配置Next主题。</h3><p>在Next主题还有一些配置项，可以让主题更适合你的审美。</p>\n<h4 id=\"设置主页连接菜单\"><a href=\"#设置主页连接菜单\" class=\"headerlink\" title=\"设置主页连接菜单\"></a>设置主页连接菜单</h4><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">menu:</span></span><br><span class=\"line\"><span class=\"symbol\">  home:</span> / || home</span><br><span class=\"line\"><span class=\"symbol\">  tags:</span> <span class=\"meta-keyword\">/tags/</span> || tags</span><br><span class=\"line\"><span class=\"symbol\">  categories:</span> <span class=\"meta-keyword\">/categories/</span> || th</span><br><span class=\"line\"><span class=\"symbol\">  archives:</span> <span class=\"meta-keyword\">/archives/</span> || archive</span><br><span class=\"line\"><span class=\"symbol\">  about:</span> <span class=\"meta-keyword\">/about/</span> || user</span><br><span class=\"line\">  <span class=\"meta\">#schedule: /schedule/ || calendar</span></span><br><span class=\"line\">  <span class=\"meta\">#sitemap: /sitemap.xml || sitemap</span></span><br><span class=\"line\">  <span class=\"meta\">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>\n<p>在这里按照需要，就可以添加相关的链接；在添加完链接后，还需要添加相关的页面。比如上面的例子，还需要添加tags页面、categories页面以及about页面。</p>\n<ul>\n<li><strong>添加tags页面</strong><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span> <span class=\"type\">page</span> <span class=\"string\">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>\n然后在source目录下就可以看到增加了一个tags目录，目录中添加了一个 index.md；打开index.md 文件。我们添加一个Front-matter项<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">标签</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2019-12-29 08:36:37</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;tags&quot;</span>                <span class=\"comment\"># 添加项</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n这样我们在文章中添加了tags就可以自动在tags页面显示了，categories也一样。</li>\n<li><strong>添加categories</strong><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo <span class=\"keyword\">new</span> <span class=\"type\">page</span> <span class=\"string\">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>\n然后打开 source/categories/index.md<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">分类</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2019-12-29 08:37:56</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;categories&quot;</span>          <span class=\"comment\"># 添加项</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"设置Scheme\"><a href=\"#设置Scheme\" class=\"headerlink\" title=\"设置Scheme\"></a>设置Scheme</h4><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"meta\"># Scheme Settings</span></span><br><span class=\"line\"><span class=\"meta\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># Schemes</span></span><br><span class=\"line\"><span class=\"meta\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"meta\">#scheme: Mist</span></span><br><span class=\"line\"><span class=\"meta\">#scheme: Pisces</span></span><br><span class=\"line\">scheme: Gemini      #去掉注释，现在这个scheme</span><br></pre></td></tr></table></figure>\nNext主题有几个不同的Scheme，你可以选择一个你喜欢的去掉注释，然后把其他的注释起来就可以了。</li>\n</ul>\n<h4 id=\"设置字体\"><a href=\"#设置字体\" class=\"headerlink\" title=\"设置字体\"></a>设置字体</h4><p>在这里我们可以设置字体大小和字体样式，首先要打开配置项，将enable设置为true，然后按照提示设置相应的设置就可以了，我这里之更改了字体的大小。将字体从16px改成了14px，然后把主题也等比例缩小了</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">font:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span>      <span class=\"comment\">#打开配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Uri of fonts host, e.g. //fonts.googleapis.com (Default).</span></span><br><span class=\"line\">  <span class=\"attr\">host:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Font options:</span></span><br><span class=\"line\">  <span class=\"comment\"># `external: true` will load this font family from `host` above.</span></span><br><span class=\"line\">  <span class=\"comment\"># `family: Times New Roman`. Without any quotes.</span></span><br><span class=\"line\">  <span class=\"comment\"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class=\"line\">  <span class=\"attr\">global:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">family:</span> <span class=\"string\">Lato</span></span><br><span class=\"line\">    <span class=\"attr\">size:</span> <span class=\"number\">0.875</span>         <span class=\"comment\">#默认是1，就是16px，这里选择14px，就是0.875em</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Font settings for site title (.site-title).</span></span><br><span class=\"line\">  <span class=\"attr\">title:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">family:</span></span><br><span class=\"line\">    <span class=\"attr\">size:</span> </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class=\"line\">  <span class=\"attr\">headings:</span></span><br><span class=\"line\">    <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">family:</span></span><br><span class=\"line\">    <span class=\"attr\">size:</span> <span class=\"number\">1.42</span>          <span class=\"comment\">#在base配置文件中是1.625em，这里等比例缩小之1.42em</span></span><br></pre></td></tr></table></figure>\n\n<p>在主题配置文件中，还有很多配置项。设置还有很多插件我都没有涉及，这里只是保证博客最低可以运行的配置，其他的提高设置等到以后有时间再总结。hexo的初步使用就到此为止。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckttecqzl00041kuvdpzvbx32","category_id":"ckttecqzn00051kuv82qq9vtg","_id":"ckttecqzo00081kuv7wrec1le"},{"post_id":"ckttecqzq00091kuvdbwdhjt0","category_id":"ckttecqzr000a1kuvfc78gw0r","_id":"ckttecqzt000g1kuvf5k17u6v"},{"post_id":"ckttecqzq00091kuvdbwdhjt0","category_id":"ckttecqzs000d1kuvdbexf766","_id":"ckttecqzt000h1kuvayjm0xp2"},{"post_id":"ckttecqzu000i1kuv4mlv9rxm","category_id":"ckttecqzv000j1kuvdkla7t8f","_id":"ckttecqzx000p1kuv47ej2mte"},{"post_id":"ckttecqzu000i1kuv4mlv9rxm","category_id":"ckttecqzw000m1kuvebm4djo5","_id":"ckttecqzx000q1kuv7a7w6jq3"},{"post_id":"ckttecqzx000r1kuvczlj9crj","category_id":"ckttecqzy000s1kuv9qpqdqbz","_id":"ckttecqzz000v1kuvf5uh01e5"},{"post_id":"ckttecr00000y1kuv9c0pb790","category_id":"ckttecqzr000a1kuvfc78gw0r","_id":"ckttecr0100101kuv3a9h5dz8"},{"post_id":"ckttecr00000y1kuv9c0pb790","category_id":"ckttecqzs000d1kuvdbexf766","_id":"ckttecr0100111kuv4lrwgrk7"},{"post_id":"ckttecr0100121kuv1sr62qa0","category_id":"ckttecr0300141kuv5qe92eze","_id":"ckttecr0400191kuvfz2he46i"},{"post_id":"ckttecr0200131kuval059h62","category_id":"ckttecr0400171kuv5fi6cerj","_id":"ckttecr06001e1kuveqslbcu8"},{"post_id":"ckttecr0300161kuv3t7j8rb9","category_id":"ckttecr0300141kuv5qe92eze","_id":"ckttecr07001i1kuvdm2scsim"},{"post_id":"ckttecr0c001m1kuvdjai6az0","category_id":"ckttecr0300141kuv5qe92eze","_id":"ckttecr0e001q1kuvbvw1fh89"},{"post_id":"ckttecr0d001n1kuv5bix6fex","category_id":"ckttecr0300141kuv5qe92eze","_id":"ckttecr0e001r1kuvdg8p3di2"}],"PostTag":[{"post_id":"ckttecqzl00041kuvdpzvbx32","tag_id":"ckttecqzo00061kuvbmy2hgpk","_id":"ckttecqzo00071kuvbtdc87s3"},{"post_id":"ckttecqzq00091kuvdbwdhjt0","tag_id":"ckttecqzs000b1kuvaukigtd5","_id":"ckttecqzt000e1kuvag3fh3ir"},{"post_id":"ckttecqzq00091kuvdbwdhjt0","tag_id":"ckttecqzs000c1kuv5undg9e6","_id":"ckttecqzt000f1kuv5hq33aqw"},{"post_id":"ckttecqzu000i1kuv4mlv9rxm","tag_id":"ckttecqzv000k1kuv2ges0soj","_id":"ckttecqzx000n1kuvhfnafurd"},{"post_id":"ckttecqzu000i1kuv4mlv9rxm","tag_id":"ckttecqzv000l1kuvh73ygx5d","_id":"ckttecqzx000o1kuvh4km9w9w"},{"post_id":"ckttecqzx000r1kuvczlj9crj","tag_id":"ckttecqzy000t1kuv95kb56ca","_id":"ckttecqzz000w1kuv7tbm66sh"},{"post_id":"ckttecqzx000r1kuvczlj9crj","tag_id":"ckttecqzz000u1kuv8gb75r47","_id":"ckttecqzz000x1kuvcz27fxi1"},{"post_id":"ckttecr00000y1kuv9c0pb790","tag_id":"ckttecqzs000b1kuvaukigtd5","_id":"ckttecr00000z1kuvbxhs6w5e"},{"post_id":"ckttecr0100121kuv1sr62qa0","tag_id":"ckttecr0300151kuv22nocnol","_id":"ckttecr05001c1kuv9g7mgox7"},{"post_id":"ckttecr0100121kuv1sr62qa0","tag_id":"ckttecr0400181kuveoydgdir","_id":"ckttecr06001d1kuv02ga0k51"},{"post_id":"ckttecr0100121kuv1sr62qa0","tag_id":"ckttecqzv000k1kuv2ges0soj","_id":"ckttecr06001g1kuv202w1qce"},{"post_id":"ckttecr0200131kuval059h62","tag_id":"ckttecr04001b1kuvc04fd3oy","_id":"ckttecr07001h1kuvgwy9cd10"},{"post_id":"ckttecr0300161kuv3t7j8rb9","tag_id":"ckttecr0300151kuv22nocnol","_id":"ckttecr09001k1kuvbmlxhaqi"},{"post_id":"ckttecr0300161kuv3t7j8rb9","tag_id":"ckttecr0400181kuveoydgdir","_id":"ckttecr09001l1kuv1bm92z9o"},{"post_id":"ckttecr0c001m1kuvdjai6az0","tag_id":"ckttecr0300151kuv22nocnol","_id":"ckttecr0d001o1kuvafkz85pl"},{"post_id":"ckttecr0d001n1kuv5bix6fex","tag_id":"ckttecr0300151kuv22nocnol","_id":"ckttecr0e001p1kuv78ut79m1"}],"Tag":[{"name":"node","_id":"ckttecqzo00061kuvbmy2hgpk"},{"name":"npm","_id":"ckttecqzs000b1kuvaukigtd5"},{"name":"package.json","_id":"ckttecqzs000c1kuv5undg9e6"},{"name":"CentOS","_id":"ckttecqzv000k1kuv2ges0soj"},{"name":"firewalld","_id":"ckttecqzv000l1kuvh73ygx5d"},{"name":"javascript","_id":"ckttecqzy000t1kuv95kb56ca"},{"name":"event","_id":"ckttecqzz000u1kuv8gb75r47"},{"name":"Hexo","_id":"ckttecr0300151kuv22nocnol"},{"name":"github","_id":"ckttecr0400181kuveoydgdir"},{"name":"个人博客","_id":"ckttecr04001b1kuvc04fd3oy"}]}}